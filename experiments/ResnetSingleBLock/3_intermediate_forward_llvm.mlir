// -----// IR Dump After PromoteBuffersToStack (promote-buffers-to-stack) //----- //
func.func @forward_kernel_2(%arg0: memref<1x3x230x230xf32>, %arg1: memref<64x3x7x7xf32>, %arg2: memref<1x64x112x112xf32>, %arg3: memref<1x64x112x112xf32>) attributes {Kernel, forward_kernel_2} {
  cf.br ^bb1
^bb1:  // pred: ^bb0
  affine.for %arg4 = 0 to 8 {
    affine.for %arg5 = 0 to 3 {
      affine.for %arg6 = 0 to 7 {
        affine.for %arg7 = 0 to 7 {
          %0 = affine.load %arg0[0, %arg5, %arg6, %arg4 * 2 + %arg7] : memref<1x3x230x230xf32>
          %1 = affine.load %arg1[0, %arg5, %arg6, %arg7] : memref<64x3x7x7xf32>
          %2 = affine.load %arg2[0, 0, 0, %arg4] : memref<1x64x112x112xf32>
          %3 = arith.mulf %0, %1 : f32
          %4 = arith.addf %2, %3 : f32
          affine.store %4, %arg3[0, 0, 0, %arg4] : memref<1x64x112x112xf32>
        }
      }
    }
  }
  return
}

// -----// IR Dump After PromoteBuffersToStack (promote-buffers-to-stack) //----- //
func.func @forward_kernel_0(%arg0: memref<1x3x230x230xf32>) attributes {Kernel, forward_kernel_0} {
  cf.br ^bb1
^bb1:  // pred: ^bb0
  %cst = arith.constant 0.000000e+00 : f32
  affine.for %arg1 = 0 to 5 {
    affine.for %arg2 = 0 to 230 {
      affine.store %cst, %arg0[0, 0, %arg1, %arg2] : memref<1x3x230x230xf32>
    }
  }
  return
}

// -----// IR Dump After PromoteBuffersToStack (promote-buffers-to-stack) //----- //
func.func @forward(%arg0: memref<1x3x224x224xf32>) -> memref<1x64x56x56xf32> {
  %cst = arith.constant 1.000000e-05 : f64
  %cst_0 = arith.constant 0xFF800000 : f32
  %cst_1 = arith.constant 0.000000e+00 : f32
  %0 = memref.get_global @__constant_64x3x7x7xf32 : memref<64x3x7x7xf32>
  %1 = memref.get_global @__constant_64xf32 : memref<64xf32>
  %2 = memref.get_global @__constant_64xf32_0 : memref<64xf32>
  %3 = memref.get_global @__constant_64xf32_1 : memref<64xf32>
  %4 = memref.get_global @__constant_64xf32_2 : memref<64xf32>
  %alloc = memref.alloc() {alignment = 64 : i64} : memref<1x3x230x230xf32>
  affine.for %arg1 = 0 to 1 {
    affine.for %arg2 = 0 to 3 {
      affine.for %arg3 = 0 to 230 step 5 {
        %5 = FDRA.BlockLoad %alloc [0, %arg2, %arg3, 0] : memref<1x3x230x230xf32> -> memref<1x3x230x230xf32> {"forward_kernel_0"}
        FDRA.KernelCall @forward_kernel_0(%5) : (memref<1x3x230x230xf32>) -> ()
        FDRA.BlockStore %5,  %alloc [0, %arg2, %arg3, 0] : memref<1x3x230x230xf32> -> memref<1x3x230x230xf32> {"forward_kernel_0"}
      }
    }
  }
  %alloc_2 = memref.alloc() {alignment = 64 : i64} : memref<1x3x230x230xf32>
  memref.copy %alloc, %alloc_2 : memref<1x3x230x230xf32> to memref<1x3x230x230xf32>
  %subview = memref.subview %alloc_2[0, 0, 3, 3] [1, 3, 224, 224] [1, 1, 1, 1] : memref<1x3x230x230xf32> to memref<1x3x224x224xf32, strided<[158700, 52900, 230, 1], offset: 693>>
  memref.copy %arg0, %subview : memref<1x3x224x224xf32> to memref<1x3x224x224xf32, strided<[158700, 52900, 230, 1], offset: 693>>
  %alloc_3 = memref.alloc() {alignment = 64 : i64} : memref<1x64x112x112xf32>
  affine.for %arg1 = 0 to 1 {
    affine.for %arg2 = 0 to 64 {
      affine.for %arg3 = 0 to 112 step 16 {
        %5 = FDRA.BlockLoad %alloc_3 [0, %arg2, %arg3, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_1"}
        FDRA.KernelCall @forward_kernel_1(%5) : (memref<1x64x112x112xf32>) -> ()
        FDRA.BlockStore %5,  %alloc_3 [0, %arg2, %arg3, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_1"}
      }
    }
  }
  %alloc_4 = memref.alloc() {alignment = 64 : i64} : memref<1x64x112x112xf32>
  memref.copy %alloc_3, %alloc_4 : memref<1x64x112x112xf32> to memref<1x64x112x112xf32>
  affine.for %arg1 = 0 to 1 {
    affine.for %arg2 = 0 to 64 {
      affine.for %arg3 = 0 to 112 {
        affine.for %arg4 = 0 to 112 step 8 {
          %5 = FDRA.BlockLoad %alloc_2 [0, 0, %arg3 * 2, %arg4 * 2] : memref<1x3x230x230xf32> -> memref<1x3x230x230xf32> {"forward_kernel_2"}
          %6 = FDRA.BlockLoad %0 [%arg2, 0, 0, 0] : memref<64x3x7x7xf32> -> memref<64x3x7x7xf32> {"forward_kernel_2"}
          %7 = FDRA.BlockLoad %alloc_4 [0, %arg2, %arg3, %arg4] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_2"}
          %8 = FDRA.BlockLoad %alloc_4 [0, %arg2, %arg3, %arg4] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_2"}
          FDRA.KernelCall @forward_kernel_2(%5, %6, %7, %8) : (memref<1x3x230x230xf32>, memref<64x3x7x7xf32>, memref<1x64x112x112xf32>, memref<1x64x112x112xf32>) -> ()
          FDRA.BlockStore %8,  %alloc_4 [0, %arg2, %arg3, %arg4] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_2"}
        }
      }
    }
  }
  %alloc_5 = memref.alloc() {alignment = 64 : i64} : memref<1x64x112x112xf32>
  affine.for %arg1 = 0 to 1 {
    affine.for %arg2 = 0 to 64 {
      affine.for %arg3 = 0 to 112 step 16 {
        %5 = FDRA.BlockLoad %alloc_4 [0, %arg2, %arg3, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_3"}
        %6 = FDRA.BlockLoad %3 [%arg2] : memref<64xf32> -> memref<64xf32> {"forward_kernel_3"}
        %7 = FDRA.BlockLoad %4 [%arg2] : memref<64xf32> -> memref<64xf32> {"forward_kernel_3"}
        %8 = FDRA.BlockLoad %1 [%arg2] : memref<64xf32> -> memref<64xf32> {"forward_kernel_3"}
        %9 = FDRA.BlockLoad %2 [%arg2] : memref<64xf32> -> memref<64xf32> {"forward_kernel_3"}
        %10 = FDRA.BlockLoad %alloc_5 [0, %arg2, %arg3, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_3"}
        FDRA.KernelCall @forward_kernel_3(%5, %6, %7, %8, %9, %10) : (memref<1x64x112x112xf32>, memref<64xf32>, memref<64xf32>, memref<64xf32>, memref<64xf32>, memref<1x64x112x112xf32>) -> ()
        FDRA.BlockStore %10,  %alloc_5 [0, %arg2, %arg3, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_3"}
      }
    }
  }
  %alloc_6 = memref.alloc() {alignment = 64 : i64} : memref<1x64x112x112xf32>
  affine.for %arg1 = 0 to 1 {
    affine.for %arg2 = 0 to 64 {
      affine.for %arg3 = 0 to 112 step 16 {
        %5 = FDRA.BlockLoad %alloc_5 [0, %arg2, %arg3, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_4"}
        %6 = FDRA.BlockLoad %alloc_6 [0, %arg2, %arg3, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_4"}
        FDRA.KernelCall @forward_kernel_4(%5, %6) : (memref<1x64x112x112xf32>, memref<1x64x112x112xf32>) -> ()
        FDRA.BlockStore %6,  %alloc_6 [0, %arg2, %arg3, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_4"}
      }
    }
  }
  %alloc_7 = memref.alloc() {alignment = 64 : i64} : memref<1x64x114x114xf32>
  affine.for %arg1 = 0 to 1 {
    affine.for %arg2 = 0 to 64 {
      affine.for %arg3 = 0 to 114 step 6 {
        %5 = FDRA.BlockLoad %alloc_7 [0, %arg2, %arg3, 0] : memref<1x64x114x114xf32> -> memref<1x64x114x114xf32> {"forward_kernel_5"}
        FDRA.KernelCall @forward_kernel_5(%5) : (memref<1x64x114x114xf32>) -> ()
        FDRA.BlockStore %5,  %alloc_7 [0, %arg2, %arg3, 0] : memref<1x64x114x114xf32> -> memref<1x64x114x114xf32> {"forward_kernel_5"}
      }
    }
  }
  %alloc_8 = memref.alloc() {alignment = 64 : i64} : memref<1x64x114x114xf32>
  memref.copy %alloc_7, %alloc_8 : memref<1x64x114x114xf32> to memref<1x64x114x114xf32>
  %subview_9 = memref.subview %alloc_8[0, 0, 1, 1] [1, 64, 112, 112] [1, 1, 1, 1] : memref<1x64x114x114xf32> to memref<1x64x112x112xf32, strided<[831744, 12996, 114, 1], offset: 115>>
  memref.copy %alloc_6, %subview_9 : memref<1x64x112x112xf32> to memref<1x64x112x112xf32, strided<[831744, 12996, 114, 1], offset: 115>>
  %alloc_10 = memref.alloc() {alignment = 64 : i64} : memref<1x64x56x56xf32>
  affine.for %arg1 = 0 to 1 {
    affine.for %arg2 = 0 to 64 {
      affine.for %arg3 = 0 to 56 step 28 {
        %5 = FDRA.BlockLoad %alloc_10 [0, %arg2, %arg3, 0] : memref<1x64x56x56xf32> -> memref<1x64x56x56xf32> {"forward_kernel_6"}
        FDRA.KernelCall @forward_kernel_6(%5) : (memref<1x64x56x56xf32>) -> ()
        FDRA.BlockStore %5,  %alloc_10 [0, %arg2, %arg3, 0] : memref<1x64x56x56xf32> -> memref<1x64x56x56xf32> {"forward_kernel_6"}
      }
    }
  }
  %alloc_11 = memref.alloc() {alignment = 64 : i64} : memref<1x64x56x56xf32>
  memref.copy %alloc_10, %alloc_11 : memref<1x64x56x56xf32> to memref<1x64x56x56xf32>
  affine.for %arg1 = 0 to 1 {
    affine.for %arg2 = 0 to 64 {
      affine.for %arg3 = 0 to 56 step 4 {
        %5 = FDRA.BlockLoad %alloc_8 [0, %arg2, %arg3 * 2, 0] : memref<1x64x114x114xf32> -> memref<1x64x114x114xf32> {"forward_kernel_7"}
        %6 = FDRA.BlockLoad %alloc_11 [0, %arg2, %arg3, 0] : memref<1x64x56x56xf32> -> memref<1x64x56x56xf32> {"forward_kernel_7"}
        %7 = FDRA.BlockLoad %alloc_11 [0, %arg2, %arg3, 0] : memref<1x64x56x56xf32> -> memref<1x64x56x56xf32> {"forward_kernel_7"}
        FDRA.KernelCall @forward_kernel_7(%5, %6, %7) : (memref<1x64x114x114xf32>, memref<1x64x56x56xf32>, memref<1x64x56x56xf32>) -> ()
        FDRA.BlockStore %7,  %alloc_11 [0, %arg2, %arg3, 0] : memref<1x64x56x56xf32> -> memref<1x64x56x56xf32> {"forward_kernel_7"}
      }
    }
  }
  return %alloc_11 : memref<1x64x56x56xf32>
}

// -----// IR Dump After PromoteBuffersToStack (promote-buffers-to-stack) //----- //
func.func @forward_kernel_7(%arg0: memref<1x64x114x114xf32>, %arg1: memref<1x64x56x56xf32>, %arg2: memref<1x64x56x56xf32>) attributes {Kernel, forward_kernel_7} {
  cf.br ^bb1
^bb1:  // pred: ^bb0
  affine.for %arg3 = 0 to 4 {
    affine.for %arg4 = 0 to 56 {
      affine.for %arg5 = 0 to 3 {
        affine.for %arg6 = 0 to 3 {
          %0 = affine.load %arg0[0, 0, %arg3 * 2 + %arg5, %arg4 * 2 + %arg6] : memref<1x64x114x114xf32>
          %1 = affine.load %arg1[0, 0, %arg3, %arg4] : memref<1x64x56x56xf32>
          %2 = arith.cmpf ugt, %1, %0 : f32
          %3 = arith.select %2, %1, %0 : f32
          %4 = arith.cmpf uno, %0, %0 : f32
          %5 = arith.select %4, %0, %3 : f32
          affine.store %5, %arg2[0, 0, %arg3, %arg4] : memref<1x64x56x56xf32>
        }
      }
    }
  }
  return
}

// -----// IR Dump After PromoteBuffersToStack (promote-buffers-to-stack) //----- //
func.func @forward_kernel_1(%arg0: memref<1x64x112x112xf32>) attributes {Kernel, forward_kernel_1} {
  cf.br ^bb1
^bb1:  // pred: ^bb0
  %cst = arith.constant 0.000000e+00 : f32
  affine.for %arg1 = 0 to 16 {
    affine.for %arg2 = 0 to 112 {
      affine.store %cst, %arg0[0, 0, %arg1, %arg2] : memref<1x64x112x112xf32>
    }
  }
  return
}

// -----// IR Dump After PromoteBuffersToStack (promote-buffers-to-stack) //----- //
func.func @forward_kernel_6(%arg0: memref<1x64x56x56xf32>) attributes {Kernel, forward_kernel_6} {
  cf.br ^bb1
^bb1:  // pred: ^bb0
  %cst = arith.constant 0xFF800000 : f32
  affine.for %arg1 = 0 to 28 {
    affine.for %arg2 = 0 to 56 {
      affine.store %cst, %arg0[0, 0, %arg1, %arg2] : memref<1x64x56x56xf32>
    }
  }
  return
}

// -----// IR Dump After PromoteBuffersToStack (promote-buffers-to-stack) //----- //
func.func @forward_kernel_3(%arg0: memref<1x64x112x112xf32>, %arg1: memref<64xf32>, %arg2: memref<64xf32>, %arg3: memref<64xf32>, %arg4: memref<64xf32>, %arg5: memref<1x64x112x112xf32>) attributes {Kernel, forward_kernel_3} {
  cf.br ^bb1
^bb1:  // pred: ^bb0
  %cst = arith.constant 1.000000e-05 : f64
  affine.for %arg6 = 0 to 16 {
    affine.for %arg7 = 0 to 112 {
      %0 = affine.load %arg0[0, 0, %arg6, %arg7] : memref<1x64x112x112xf32>
      %1 = affine.load %arg1[0] : memref<64xf32>
      %2 = affine.load %arg2[0] : memref<64xf32>
      %3 = affine.load %arg3[0] : memref<64xf32>
      %4 = affine.load %arg4[0] : memref<64xf32>
      %5 = arith.truncf %cst : f64 to f32
      %6 = arith.addf %4, %5 : f32
      %cst_0 = arith.constant 5.000000e-01 : f32
      %7 = arith.mulf %6, %cst_0 : f32
      %8 = arith.bitcast %6 : f32 to i32
      %c1_i32 = arith.constant 1 : i32
      %9 = arith.shrui %8, %c1_i32 : i32
      %c1597463007_i32 = arith.constant 1597463007 : i32
      %10 = arith.subi %c1597463007_i32, %9 : i32
      %11 = arith.bitcast %10 : i32 to f32
      %cst_1 = arith.constant 1.500000e+00 : f32
      %12 = arith.mulf %11, %11 : f32
      %13 = arith.mulf %12, %7 : f32
      %14 = arith.subf %cst_1, %13 : f32
      %15 = arith.mulf %14, %12 : f32
      %16 = arith.subf %0, %3 : f32
      %17 = arith.mulf %16, %15 : f32
      %18 = arith.mulf %17, %1 : f32
      %19 = arith.addf %18, %2 : f32
      affine.store %19, %arg5[0, 0, %arg6, %arg7] : memref<1x64x112x112xf32>
    }
  }
  return
}

// -----// IR Dump After PromoteBuffersToStack (promote-buffers-to-stack) //----- //
func.func @forward_kernel_4(%arg0: memref<1x64x112x112xf32>, %arg1: memref<1x64x112x112xf32>) attributes {Kernel, forward_kernel_4} {
  cf.br ^bb1
^bb1:  // pred: ^bb0
  %cst = arith.constant 0.000000e+00 : f32
  affine.for %arg2 = 0 to 16 {
    affine.for %arg3 = 0 to 112 {
      %0 = affine.load %arg0[0, 0, %arg2, %arg3] : memref<1x64x112x112xf32>
      %1 = arith.cmpf ugt, %0, %cst : f32
      %2 = arith.select %1, %0, %cst : f32
      affine.store %2, %arg1[0, 0, %arg2, %arg3] : memref<1x64x112x112xf32>
    }
  }
  return
}

// -----// IR Dump After PromoteBuffersToStack (promote-buffers-to-stack) //----- //
func.func @forward_kernel_5(%arg0: memref<1x64x114x114xf32>) attributes {Kernel, forward_kernel_5} {
  cf.br ^bb1
^bb1:  // pred: ^bb0
  %cst = arith.constant 0xFF800000 : f32
  affine.for %arg1 = 0 to 6 {
    affine.for %arg2 = 0 to 114 {
      affine.store %cst, %arg0[0, 0, %arg1, %arg2] : memref<1x64x114x114xf32>
    }
  }
  return
}

// -----// IR Dump After ArithExpandOps (arith-expand) //----- //
module attributes {torch.debug_module_name = "ResNet"} {
  memref.global "private" constant @__constant_64xf32_2 : memref<64xf32> = dense<[0.230717152, 0.253822476, -1.05429808E-6, -0.664388895, -1.65705547E-8, 0.161521927, 0.454503953, -4.301950e-07, 0.300513744, -8.005240e-06, 0.349418074, 0.311480612, -0.249529764, -3.474890e-05, 0.107726313, 0.218970656, 0.381412596, -0.529882133, -0.628644109, 0.571398079, 0.299846917, 0.584303737, 0.48202154, 0.328526348, 0.196717009, 0.194961801, 0.152145416, 0.085522361, 0.513142824, 0.0152367353, 0.166441768, 0.332394391, 0.249211237, 0.443366677, -0.280169278, -0.0203848016, -2.45068748E-7, 0.321340501, -4.9151744E-8, 0.237767309, 0.232907727, 0.315274626, 0.427762389, 0.293127537, 0.263794243, 0.675975859, 0.429100394, 0.345662743, -8.69090186E-8, 0.247294366, 0.303160846, 0.615772783, 0.39834857, 0.332067341, -0.412187815, 0.378069043, 0.178953409, 0.25747788, -0.449079722, 0.213058949, 0.569339037, 5.727430e-01, -0.402383476, 0.23406373]>
  memref.global "private" constant @__constant_64xf32_1 : memref<64xf32> = dense<[0.234872743, 0.266257942, -5.10959595E-8, 0.518699706, 3.44040196E-9, 0.222385287, 0.422887057, 1.31532403E-7, 0.25093165, 1.5152026E-6, 0.316871643, 0.250491828, 0.378926098, 1.08618351E-5, 2.752640e-01, 0.236741036, 0.242021769, 0.395314813, 0.469346285, 0.2908957, 0.272684187, 0.27802828, 0.290692091, 0.206927493, 0.258990377, 0.278710574, 0.291149527, 0.316013753, 0.388891488, 0.304111898, 0.267757207, 0.210925162, 0.287084132, 0.332426429, 0.42672804, 0.373260558, 7.48037578E-8, 0.19067812, 1.47401256E-8, 0.223029822, 0.179079413, 0.248600766, 0.27399528, 0.259228647, 0.294202209, 0.299236417, 0.223688841, 0.262799472, 2.20011476E-8, 0.266098082, 0.220890298, 0.284285516, 0.330723315, 0.226809531, 0.365380913, 0.21229881, 0.239653021, 0.24949576, 0.525830686, 0.248247579, 0.295652747, 0.258776665, 0.4832564, 0.26670444]>
  memref.global "private" constant @__constant_64xf32_0 : memref<64xf32> = dense<[1.01694489, 3.71674347, 5.81334356E-11, 3.28254271, 1.71074404E-13, 0.658226967, 4.37006235, 6.60045282E-12, 0.915522992, 1.93175254E-9, 4.12558556, 2.74399233, 2.8390913, 4.79658588E-8, 11.0722713, 0.500745952, 2.23128176, 4.82570696, 2.69861364, 9.36995506, 3.73391747, 5.48429585, 5.7126689, 0.445444882, 0.436275303, 7.15633583, 13.7179089, 5.25117493, 6.81737518, 1.67235756, 1.65343034, 1.23245978, 4.90762854, 3.07305121, 4.23838568, 4.99363518, 1.44646307E-12, 1.52116203, 1.03519833E-13, 0.351344079, 0.17024748, 1.42054474, 1.90848303, 2.15124035, 2.66084933, 4.84443378, 1.92971194, 1.49994361, 2.94806145E-13, 1.53064024, 0.365027189, 2.93755412, 5.46641159, 0.707924544, 3.33150721, 0.771802961, 2.40678358, 6.5213666, 4.12625027, 1.05063522, 2.95303202, 11.3656216, 4.76904678, 1.65587807]>
  memref.global "private" constant @__constant_64xf32 : memref<64xf32> = dense<[0.00276811025, -0.0257689245, 2.12544663E-7, -0.0846051499, 2.11205915E-8, 4.96906461E-4, -0.0224083271, -1.15818956E-7, -4.823850e-03, 2.75073347E-7, 3.958230e-02, 0.0319936387, -0.0374896601, -1.37163477E-6, 0.00660019321, 4.378190e-03, 0.0647971481, 0.11175999, 0.0360015705, -0.0750752166, -0.03824009, 0.0843578502, -5.228700e-02, -0.0117988894, 0.00130188058, 0.0321722962, -0.0177843049, -0.0910085887, 0.113187239, -0.0416320041, 0.00873024761, 0.0296931695, -0.0705021694, -0.00348469778, 0.109771468, -0.00173411821, -5.94229412E-8, 0.0293303896, -7.85527287E-9, 0.00673204474, -0.00370999542, 0.0160279572, -0.0278826058, 0.0265925378, 0.0284745526, -0.12734659, 0.0446168408, 0.0263288375, 2.14538591E-8, -1.704500e-02, -0.00356168114, -0.0458412617, 0.0638761446, 0.0152198272, -0.0385114551, -0.0164278317, -0.016568929, 0.0560574941, -0.0803062319, -0.00266457512, -0.0417176671, 0.126112729, -0.0492369682, -0.0132609205]>
  memref.global "private" constant @__constant_64x3x7x7xf32 : memref<64x3x7x7xf32> = dense<"
  ml_program.global private mutable @global_seed(dense<0> : tensor<i64>) : tensor<i64>
  func.func @forward(%arg0: memref<1x3x224x224xf32>) -> memref<1x64x56x56xf32> {
    %cst = arith.constant 1.000000e-05 : f64
    %cst_0 = arith.constant 0xFF800000 : f32
    %cst_1 = arith.constant 0.000000e+00 : f32
    %0 = memref.get_global @__constant_64x3x7x7xf32 : memref<64x3x7x7xf32>
    %1 = memref.get_global @__constant_64xf32 : memref<64xf32>
    %2 = memref.get_global @__constant_64xf32_0 : memref<64xf32>
    %3 = memref.get_global @__constant_64xf32_1 : memref<64xf32>
    %4 = memref.get_global @__constant_64xf32_2 : memref<64xf32>
    %alloc = memref.alloc() {alignment = 64 : i64} : memref<1x3x230x230xf32>
    affine.for %arg1 = 0 to 1 {
      affine.for %arg2 = 0 to 3 {
        affine.for %arg3 = 0 to 230 step 5 {
          %5 = FDRA.BlockLoad %alloc [0, %arg2, %arg3, 0] : memref<1x3x230x230xf32> -> memref<1x3x230x230xf32> {"forward_kernel_0"}
          FDRA.KernelCall @forward_kernel_0(%5) : (memref<1x3x230x230xf32>) -> ()
          FDRA.BlockStore %5,  %alloc [0, %arg2, %arg3, 0] : memref<1x3x230x230xf32> -> memref<1x3x230x230xf32> {"forward_kernel_0"}
        }
      }
    }
    %alloc_2 = memref.alloc() {alignment = 64 : i64} : memref<1x3x230x230xf32>
    memref.copy %alloc, %alloc_2 : memref<1x3x230x230xf32> to memref<1x3x230x230xf32>
    %subview = memref.subview %alloc_2[0, 0, 3, 3] [1, 3, 224, 224] [1, 1, 1, 1] : memref<1x3x230x230xf32> to memref<1x3x224x224xf32, strided<[158700, 52900, 230, 1], offset: 693>>
    memref.copy %arg0, %subview : memref<1x3x224x224xf32> to memref<1x3x224x224xf32, strided<[158700, 52900, 230, 1], offset: 693>>
    %alloc_3 = memref.alloc() {alignment = 64 : i64} : memref<1x64x112x112xf32>
    affine.for %arg1 = 0 to 1 {
      affine.for %arg2 = 0 to 64 {
        affine.for %arg3 = 0 to 112 step 16 {
          %5 = FDRA.BlockLoad %alloc_3 [0, %arg2, %arg3, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_1"}
          FDRA.KernelCall @forward_kernel_1(%5) : (memref<1x64x112x112xf32>) -> ()
          FDRA.BlockStore %5,  %alloc_3 [0, %arg2, %arg3, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_1"}
        }
      }
    }
    %alloc_4 = memref.alloc() {alignment = 64 : i64} : memref<1x64x112x112xf32>
    memref.copy %alloc_3, %alloc_4 : memref<1x64x112x112xf32> to memref<1x64x112x112xf32>
    affine.for %arg1 = 0 to 1 {
      affine.for %arg2 = 0 to 64 {
        affine.for %arg3 = 0 to 112 {
          affine.for %arg4 = 0 to 112 step 8 {
            %5 = FDRA.BlockLoad %alloc_2 [0, 0, %arg3 * 2, %arg4 * 2] : memref<1x3x230x230xf32> -> memref<1x3x230x230xf32> {"forward_kernel_2"}
            %6 = FDRA.BlockLoad %0 [%arg2, 0, 0, 0] : memref<64x3x7x7xf32> -> memref<64x3x7x7xf32> {"forward_kernel_2"}
            %7 = FDRA.BlockLoad %alloc_4 [0, %arg2, %arg3, %arg4] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_2"}
            %8 = FDRA.BlockLoad %alloc_4 [0, %arg2, %arg3, %arg4] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_2"}
            FDRA.KernelCall @forward_kernel_2(%5, %6, %7, %8) : (memref<1x3x230x230xf32>, memref<64x3x7x7xf32>, memref<1x64x112x112xf32>, memref<1x64x112x112xf32>) -> ()
            FDRA.BlockStore %8,  %alloc_4 [0, %arg2, %arg3, %arg4] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_2"}
          }
        }
      }
    }
    %alloc_5 = memref.alloc() {alignment = 64 : i64} : memref<1x64x112x112xf32>
    affine.for %arg1 = 0 to 1 {
      affine.for %arg2 = 0 to 64 {
        affine.for %arg3 = 0 to 112 step 16 {
          %5 = FDRA.BlockLoad %alloc_4 [0, %arg2, %arg3, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_3"}
          %6 = FDRA.BlockLoad %3 [%arg2] : memref<64xf32> -> memref<64xf32> {"forward_kernel_3"}
          %7 = FDRA.BlockLoad %4 [%arg2] : memref<64xf32> -> memref<64xf32> {"forward_kernel_3"}
          %8 = FDRA.BlockLoad %1 [%arg2] : memref<64xf32> -> memref<64xf32> {"forward_kernel_3"}
          %9 = FDRA.BlockLoad %2 [%arg2] : memref<64xf32> -> memref<64xf32> {"forward_kernel_3"}
          %10 = FDRA.BlockLoad %alloc_5 [0, %arg2, %arg3, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_3"}
          FDRA.KernelCall @forward_kernel_3(%5, %6, %7, %8, %9, %10) : (memref<1x64x112x112xf32>, memref<64xf32>, memref<64xf32>, memref<64xf32>, memref<64xf32>, memref<1x64x112x112xf32>) -> ()
          FDRA.BlockStore %10,  %alloc_5 [0, %arg2, %arg3, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_3"}
        }
      }
    }
    %alloc_6 = memref.alloc() {alignment = 64 : i64} : memref<1x64x112x112xf32>
    affine.for %arg1 = 0 to 1 {
      affine.for %arg2 = 0 to 64 {
        affine.for %arg3 = 0 to 112 step 16 {
          %5 = FDRA.BlockLoad %alloc_5 [0, %arg2, %arg3, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_4"}
          %6 = FDRA.BlockLoad %alloc_6 [0, %arg2, %arg3, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_4"}
          FDRA.KernelCall @forward_kernel_4(%5, %6) : (memref<1x64x112x112xf32>, memref<1x64x112x112xf32>) -> ()
          FDRA.BlockStore %6,  %alloc_6 [0, %arg2, %arg3, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_4"}
        }
      }
    }
    %alloc_7 = memref.alloc() {alignment = 64 : i64} : memref<1x64x114x114xf32>
    affine.for %arg1 = 0 to 1 {
      affine.for %arg2 = 0 to 64 {
        affine.for %arg3 = 0 to 114 step 6 {
          %5 = FDRA.BlockLoad %alloc_7 [0, %arg2, %arg3, 0] : memref<1x64x114x114xf32> -> memref<1x64x114x114xf32> {"forward_kernel_5"}
          FDRA.KernelCall @forward_kernel_5(%5) : (memref<1x64x114x114xf32>) -> ()
          FDRA.BlockStore %5,  %alloc_7 [0, %arg2, %arg3, 0] : memref<1x64x114x114xf32> -> memref<1x64x114x114xf32> {"forward_kernel_5"}
        }
      }
    }
    %alloc_8 = memref.alloc() {alignment = 64 : i64} : memref<1x64x114x114xf32>
    memref.copy %alloc_7, %alloc_8 : memref<1x64x114x114xf32> to memref<1x64x114x114xf32>
    %subview_9 = memref.subview %alloc_8[0, 0, 1, 1] [1, 64, 112, 112] [1, 1, 1, 1] : memref<1x64x114x114xf32> to memref<1x64x112x112xf32, strided<[831744, 12996, 114, 1], offset: 115>>
    memref.copy %alloc_6, %subview_9 : memref<1x64x112x112xf32> to memref<1x64x112x112xf32, strided<[831744, 12996, 114, 1], offset: 115>>
    %alloc_10 = memref.alloc() {alignment = 64 : i64} : memref<1x64x56x56xf32>
    affine.for %arg1 = 0 to 1 {
      affine.for %arg2 = 0 to 64 {
        affine.for %arg3 = 0 to 56 step 28 {
          %5 = FDRA.BlockLoad %alloc_10 [0, %arg2, %arg3, 0] : memref<1x64x56x56xf32> -> memref<1x64x56x56xf32> {"forward_kernel_6"}
          FDRA.KernelCall @forward_kernel_6(%5) : (memref<1x64x56x56xf32>) -> ()
          FDRA.BlockStore %5,  %alloc_10 [0, %arg2, %arg3, 0] : memref<1x64x56x56xf32> -> memref<1x64x56x56xf32> {"forward_kernel_6"}
        }
      }
    }
    %alloc_11 = memref.alloc() {alignment = 64 : i64} : memref<1x64x56x56xf32>
    memref.copy %alloc_10, %alloc_11 : memref<1x64x56x56xf32> to memref<1x64x56x56xf32>
    affine.for %arg1 = 0 to 1 {
      affine.for %arg2 = 0 to 64 {
        affine.for %arg3 = 0 to 56 step 4 {
          %5 = FDRA.BlockLoad %alloc_8 [0, %arg2, %arg3 * 2, 0] : memref<1x64x114x114xf32> -> memref<1x64x114x114xf32> {"forward_kernel_7"}
          %6 = FDRA.BlockLoad %alloc_11 [0, %arg2, %arg3, 0] : memref<1x64x56x56xf32> -> memref<1x64x56x56xf32> {"forward_kernel_7"}
          %7 = FDRA.BlockLoad %alloc_11 [0, %arg2, %arg3, 0] : memref<1x64x56x56xf32> -> memref<1x64x56x56xf32> {"forward_kernel_7"}
          FDRA.KernelCall @forward_kernel_7(%5, %6, %7) : (memref<1x64x114x114xf32>, memref<1x64x56x56xf32>, memref<1x64x56x56xf32>) -> ()
          FDRA.BlockStore %7,  %alloc_11 [0, %arg2, %arg3, 0] : memref<1x64x56x56xf32> -> memref<1x64x56x56xf32> {"forward_kernel_7"}
        }
      }
    }
    return %alloc_11 : memref<1x64x56x56xf32>
  }
  func.func @forward_kernel_0(%arg0: memref<1x3x230x230xf32>) attributes {Kernel, forward_kernel_0} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 0.000000e+00 : f32
    affine.for %arg1 = 0 to 5 {
      affine.for %arg2 = 0 to 230 {
        affine.store %cst, %arg0[0, 0, %arg1, %arg2] : memref<1x3x230x230xf32>
      }
    }
    return
  }
  func.func @forward_kernel_1(%arg0: memref<1x64x112x112xf32>) attributes {Kernel, forward_kernel_1} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 0.000000e+00 : f32
    affine.for %arg1 = 0 to 16 {
      affine.for %arg2 = 0 to 112 {
        affine.store %cst, %arg0[0, 0, %arg1, %arg2] : memref<1x64x112x112xf32>
      }
    }
    return
  }
  func.func @forward_kernel_2(%arg0: memref<1x3x230x230xf32>, %arg1: memref<64x3x7x7xf32>, %arg2: memref<1x64x112x112xf32>, %arg3: memref<1x64x112x112xf32>) attributes {Kernel, forward_kernel_2} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    affine.for %arg4 = 0 to 8 {
      affine.for %arg5 = 0 to 3 {
        affine.for %arg6 = 0 to 7 {
          affine.for %arg7 = 0 to 7 {
            %0 = affine.load %arg0[0, %arg5, %arg6, %arg4 * 2 + %arg7] : memref<1x3x230x230xf32>
            %1 = affine.load %arg1[0, %arg5, %arg6, %arg7] : memref<64x3x7x7xf32>
            %2 = affine.load %arg2[0, 0, 0, %arg4] : memref<1x64x112x112xf32>
            %3 = arith.mulf %0, %1 : f32
            %4 = arith.addf %2, %3 : f32
            affine.store %4, %arg3[0, 0, 0, %arg4] : memref<1x64x112x112xf32>
          }
        }
      }
    }
    return
  }
  func.func @forward_kernel_3(%arg0: memref<1x64x112x112xf32>, %arg1: memref<64xf32>, %arg2: memref<64xf32>, %arg3: memref<64xf32>, %arg4: memref<64xf32>, %arg5: memref<1x64x112x112xf32>) attributes {Kernel, forward_kernel_3} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 1.000000e-05 : f64
    affine.for %arg6 = 0 to 16 {
      affine.for %arg7 = 0 to 112 {
        %0 = affine.load %arg0[0, 0, %arg6, %arg7] : memref<1x64x112x112xf32>
        %1 = affine.load %arg1[0] : memref<64xf32>
        %2 = affine.load %arg2[0] : memref<64xf32>
        %3 = affine.load %arg3[0] : memref<64xf32>
        %4 = affine.load %arg4[0] : memref<64xf32>
        %5 = arith.truncf %cst : f64 to f32
        %6 = arith.addf %4, %5 : f32
        %cst_0 = arith.constant 5.000000e-01 : f32
        %7 = arith.mulf %6, %cst_0 : f32
        %8 = arith.bitcast %6 : f32 to i32
        %c1_i32 = arith.constant 1 : i32
        %9 = arith.shrui %8, %c1_i32 : i32
        %c1597463007_i32 = arith.constant 1597463007 : i32
        %10 = arith.subi %c1597463007_i32, %9 : i32
        %11 = arith.bitcast %10 : i32 to f32
        %cst_1 = arith.constant 1.500000e+00 : f32
        %12 = arith.mulf %11, %11 : f32
        %13 = arith.mulf %12, %7 : f32
        %14 = arith.subf %cst_1, %13 : f32
        %15 = arith.mulf %14, %12 : f32
        %16 = arith.subf %0, %3 : f32
        %17 = arith.mulf %16, %15 : f32
        %18 = arith.mulf %17, %1 : f32
        %19 = arith.addf %18, %2 : f32
        affine.store %19, %arg5[0, 0, %arg6, %arg7] : memref<1x64x112x112xf32>
      }
    }
    return
  }
  func.func @forward_kernel_4(%arg0: memref<1x64x112x112xf32>, %arg1: memref<1x64x112x112xf32>) attributes {Kernel, forward_kernel_4} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 0.000000e+00 : f32
    affine.for %arg2 = 0 to 16 {
      affine.for %arg3 = 0 to 112 {
        %0 = affine.load %arg0[0, 0, %arg2, %arg3] : memref<1x64x112x112xf32>
        %1 = arith.cmpf ugt, %0, %cst : f32
        %2 = arith.select %1, %0, %cst : f32
        affine.store %2, %arg1[0, 0, %arg2, %arg3] : memref<1x64x112x112xf32>
      }
    }
    return
  }
  func.func @forward_kernel_5(%arg0: memref<1x64x114x114xf32>) attributes {Kernel, forward_kernel_5} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 0xFF800000 : f32
    affine.for %arg1 = 0 to 6 {
      affine.for %arg2 = 0 to 114 {
        affine.store %cst, %arg0[0, 0, %arg1, %arg2] : memref<1x64x114x114xf32>
      }
    }
    return
  }
  func.func @forward_kernel_6(%arg0: memref<1x64x56x56xf32>) attributes {Kernel, forward_kernel_6} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 0xFF800000 : f32
    affine.for %arg1 = 0 to 28 {
      affine.for %arg2 = 0 to 56 {
        affine.store %cst, %arg0[0, 0, %arg1, %arg2] : memref<1x64x56x56xf32>
      }
    }
    return
  }
  func.func @forward_kernel_7(%arg0: memref<1x64x114x114xf32>, %arg1: memref<1x64x56x56xf32>, %arg2: memref<1x64x56x56xf32>) attributes {Kernel, forward_kernel_7} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    affine.for %arg3 = 0 to 4 {
      affine.for %arg4 = 0 to 56 {
        affine.for %arg5 = 0 to 3 {
          affine.for %arg6 = 0 to 3 {
            %0 = affine.load %arg0[0, 0, %arg3 * 2 + %arg5, %arg4 * 2 + %arg6] : memref<1x64x114x114xf32>
            %1 = affine.load %arg1[0, 0, %arg3, %arg4] : memref<1x64x56x56xf32>
            %2 = arith.cmpf ugt, %1, %0 : f32
            %3 = arith.select %2, %1, %0 : f32
            %4 = arith.cmpf uno, %0, %0 : f32
            %5 = arith.select %4, %0, %3 : f32
            affine.store %5, %arg2[0, 0, %arg3, %arg4] : memref<1x64x56x56xf32>
          }
        }
      }
    }
    return
  }
}


// -----// IR Dump After ExpandOps (memref-expand) //----- //
module attributes {torch.debug_module_name = "ResNet"} {
  memref.global "private" constant @__constant_64xf32_2 : memref<64xf32> = dense<[0.230717152, 0.253822476, -1.05429808E-6, -0.664388895, -1.65705547E-8, 0.161521927, 0.454503953, -4.301950e-07, 0.300513744, -8.005240e-06, 0.349418074, 0.311480612, -0.249529764, -3.474890e-05, 0.107726313, 0.218970656, 0.381412596, -0.529882133, -0.628644109, 0.571398079, 0.299846917, 0.584303737, 0.48202154, 0.328526348, 0.196717009, 0.194961801, 0.152145416, 0.085522361, 0.513142824, 0.0152367353, 0.166441768, 0.332394391, 0.249211237, 0.443366677, -0.280169278, -0.0203848016, -2.45068748E-7, 0.321340501, -4.9151744E-8, 0.237767309, 0.232907727, 0.315274626, 0.427762389, 0.293127537, 0.263794243, 0.675975859, 0.429100394, 0.345662743, -8.69090186E-8, 0.247294366, 0.303160846, 0.615772783, 0.39834857, 0.332067341, -0.412187815, 0.378069043, 0.178953409, 0.25747788, -0.449079722, 0.213058949, 0.569339037, 5.727430e-01, -0.402383476, 0.23406373]>
  memref.global "private" constant @__constant_64xf32_1 : memref<64xf32> = dense<[0.234872743, 0.266257942, -5.10959595E-8, 0.518699706, 3.44040196E-9, 0.222385287, 0.422887057, 1.31532403E-7, 0.25093165, 1.5152026E-6, 0.316871643, 0.250491828, 0.378926098, 1.08618351E-5, 2.752640e-01, 0.236741036, 0.242021769, 0.395314813, 0.469346285, 0.2908957, 0.272684187, 0.27802828, 0.290692091, 0.206927493, 0.258990377, 0.278710574, 0.291149527, 0.316013753, 0.388891488, 0.304111898, 0.267757207, 0.210925162, 0.287084132, 0.332426429, 0.42672804, 0.373260558, 7.48037578E-8, 0.19067812, 1.47401256E-8, 0.223029822, 0.179079413, 0.248600766, 0.27399528, 0.259228647, 0.294202209, 0.299236417, 0.223688841, 0.262799472, 2.20011476E-8, 0.266098082, 0.220890298, 0.284285516, 0.330723315, 0.226809531, 0.365380913, 0.21229881, 0.239653021, 0.24949576, 0.525830686, 0.248247579, 0.295652747, 0.258776665, 0.4832564, 0.26670444]>
  memref.global "private" constant @__constant_64xf32_0 : memref<64xf32> = dense<[1.01694489, 3.71674347, 5.81334356E-11, 3.28254271, 1.71074404E-13, 0.658226967, 4.37006235, 6.60045282E-12, 0.915522992, 1.93175254E-9, 4.12558556, 2.74399233, 2.8390913, 4.79658588E-8, 11.0722713, 0.500745952, 2.23128176, 4.82570696, 2.69861364, 9.36995506, 3.73391747, 5.48429585, 5.7126689, 0.445444882, 0.436275303, 7.15633583, 13.7179089, 5.25117493, 6.81737518, 1.67235756, 1.65343034, 1.23245978, 4.90762854, 3.07305121, 4.23838568, 4.99363518, 1.44646307E-12, 1.52116203, 1.03519833E-13, 0.351344079, 0.17024748, 1.42054474, 1.90848303, 2.15124035, 2.66084933, 4.84443378, 1.92971194, 1.49994361, 2.94806145E-13, 1.53064024, 0.365027189, 2.93755412, 5.46641159, 0.707924544, 3.33150721, 0.771802961, 2.40678358, 6.5213666, 4.12625027, 1.05063522, 2.95303202, 11.3656216, 4.76904678, 1.65587807]>
  memref.global "private" constant @__constant_64xf32 : memref<64xf32> = dense<[0.00276811025, -0.0257689245, 2.12544663E-7, -0.0846051499, 2.11205915E-8, 4.96906461E-4, -0.0224083271, -1.15818956E-7, -4.823850e-03, 2.75073347E-7, 3.958230e-02, 0.0319936387, -0.0374896601, -1.37163477E-6, 0.00660019321, 4.378190e-03, 0.0647971481, 0.11175999, 0.0360015705, -0.0750752166, -0.03824009, 0.0843578502, -5.228700e-02, -0.0117988894, 0.00130188058, 0.0321722962, -0.0177843049, -0.0910085887, 0.113187239, -0.0416320041, 0.00873024761, 0.0296931695, -0.0705021694, -0.00348469778, 0.109771468, -0.00173411821, -5.94229412E-8, 0.0293303896, -7.85527287E-9, 0.00673204474, -0.00370999542, 0.0160279572, -0.0278826058, 0.0265925378, 0.0284745526, -0.12734659, 0.0446168408, 0.0263288375, 2.14538591E-8, -1.704500e-02, -0.00356168114, -0.0458412617, 0.0638761446, 0.0152198272, -0.0385114551, -0.0164278317, -0.016568929, 0.0560574941, -0.0803062319, -0.00266457512, -0.0417176671, 0.126112729, -0.0492369682, -0.0132609205]>
  memref.global "private" constant @__constant_64x3x7x7xf32 : memref<64x3x7x7xf32> = dense<"
  ml_program.global private mutable @global_seed(dense<0> : tensor<i64>) : tensor<i64>
  func.func @forward(%arg0: memref<1x3x224x224xf32>) -> memref<1x64x56x56xf32> {
    %cst = arith.constant 1.000000e-05 : f64
    %cst_0 = arith.constant 0xFF800000 : f32
    %cst_1 = arith.constant 0.000000e+00 : f32
    %0 = memref.get_global @__constant_64x3x7x7xf32 : memref<64x3x7x7xf32>
    %1 = memref.get_global @__constant_64xf32 : memref<64xf32>
    %2 = memref.get_global @__constant_64xf32_0 : memref<64xf32>
    %3 = memref.get_global @__constant_64xf32_1 : memref<64xf32>
    %4 = memref.get_global @__constant_64xf32_2 : memref<64xf32>
    %alloc = memref.alloc() {alignment = 64 : i64} : memref<1x3x230x230xf32>
    affine.for %arg1 = 0 to 1 {
      affine.for %arg2 = 0 to 3 {
        affine.for %arg3 = 0 to 230 step 5 {
          %5 = FDRA.BlockLoad %alloc [0, %arg2, %arg3, 0] : memref<1x3x230x230xf32> -> memref<1x3x230x230xf32> {"forward_kernel_0"}
          FDRA.KernelCall @forward_kernel_0(%5) : (memref<1x3x230x230xf32>) -> ()
          FDRA.BlockStore %5,  %alloc [0, %arg2, %arg3, 0] : memref<1x3x230x230xf32> -> memref<1x3x230x230xf32> {"forward_kernel_0"}
        }
      }
    }
    %alloc_2 = memref.alloc() {alignment = 64 : i64} : memref<1x3x230x230xf32>
    memref.copy %alloc, %alloc_2 : memref<1x3x230x230xf32> to memref<1x3x230x230xf32>
    %subview = memref.subview %alloc_2[0, 0, 3, 3] [1, 3, 224, 224] [1, 1, 1, 1] : memref<1x3x230x230xf32> to memref<1x3x224x224xf32, strided<[158700, 52900, 230, 1], offset: 693>>
    memref.copy %arg0, %subview : memref<1x3x224x224xf32> to memref<1x3x224x224xf32, strided<[158700, 52900, 230, 1], offset: 693>>
    %alloc_3 = memref.alloc() {alignment = 64 : i64} : memref<1x64x112x112xf32>
    affine.for %arg1 = 0 to 1 {
      affine.for %arg2 = 0 to 64 {
        affine.for %arg3 = 0 to 112 step 16 {
          %5 = FDRA.BlockLoad %alloc_3 [0, %arg2, %arg3, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_1"}
          FDRA.KernelCall @forward_kernel_1(%5) : (memref<1x64x112x112xf32>) -> ()
          FDRA.BlockStore %5,  %alloc_3 [0, %arg2, %arg3, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_1"}
        }
      }
    }
    %alloc_4 = memref.alloc() {alignment = 64 : i64} : memref<1x64x112x112xf32>
    memref.copy %alloc_3, %alloc_4 : memref<1x64x112x112xf32> to memref<1x64x112x112xf32>
    affine.for %arg1 = 0 to 1 {
      affine.for %arg2 = 0 to 64 {
        affine.for %arg3 = 0 to 112 {
          affine.for %arg4 = 0 to 112 step 8 {
            %5 = FDRA.BlockLoad %alloc_2 [0, 0, %arg3 * 2, %arg4 * 2] : memref<1x3x230x230xf32> -> memref<1x3x230x230xf32> {"forward_kernel_2"}
            %6 = FDRA.BlockLoad %0 [%arg2, 0, 0, 0] : memref<64x3x7x7xf32> -> memref<64x3x7x7xf32> {"forward_kernel_2"}
            %7 = FDRA.BlockLoad %alloc_4 [0, %arg2, %arg3, %arg4] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_2"}
            %8 = FDRA.BlockLoad %alloc_4 [0, %arg2, %arg3, %arg4] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_2"}
            FDRA.KernelCall @forward_kernel_2(%5, %6, %7, %8) : (memref<1x3x230x230xf32>, memref<64x3x7x7xf32>, memref<1x64x112x112xf32>, memref<1x64x112x112xf32>) -> ()
            FDRA.BlockStore %8,  %alloc_4 [0, %arg2, %arg3, %arg4] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_2"}
          }
        }
      }
    }
    %alloc_5 = memref.alloc() {alignment = 64 : i64} : memref<1x64x112x112xf32>
    affine.for %arg1 = 0 to 1 {
      affine.for %arg2 = 0 to 64 {
        affine.for %arg3 = 0 to 112 step 16 {
          %5 = FDRA.BlockLoad %alloc_4 [0, %arg2, %arg3, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_3"}
          %6 = FDRA.BlockLoad %3 [%arg2] : memref<64xf32> -> memref<64xf32> {"forward_kernel_3"}
          %7 = FDRA.BlockLoad %4 [%arg2] : memref<64xf32> -> memref<64xf32> {"forward_kernel_3"}
          %8 = FDRA.BlockLoad %1 [%arg2] : memref<64xf32> -> memref<64xf32> {"forward_kernel_3"}
          %9 = FDRA.BlockLoad %2 [%arg2] : memref<64xf32> -> memref<64xf32> {"forward_kernel_3"}
          %10 = FDRA.BlockLoad %alloc_5 [0, %arg2, %arg3, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_3"}
          FDRA.KernelCall @forward_kernel_3(%5, %6, %7, %8, %9, %10) : (memref<1x64x112x112xf32>, memref<64xf32>, memref<64xf32>, memref<64xf32>, memref<64xf32>, memref<1x64x112x112xf32>) -> ()
          FDRA.BlockStore %10,  %alloc_5 [0, %arg2, %arg3, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_3"}
        }
      }
    }
    %alloc_6 = memref.alloc() {alignment = 64 : i64} : memref<1x64x112x112xf32>
    affine.for %arg1 = 0 to 1 {
      affine.for %arg2 = 0 to 64 {
        affine.for %arg3 = 0 to 112 step 16 {
          %5 = FDRA.BlockLoad %alloc_5 [0, %arg2, %arg3, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_4"}
          %6 = FDRA.BlockLoad %alloc_6 [0, %arg2, %arg3, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_4"}
          FDRA.KernelCall @forward_kernel_4(%5, %6) : (memref<1x64x112x112xf32>, memref<1x64x112x112xf32>) -> ()
          FDRA.BlockStore %6,  %alloc_6 [0, %arg2, %arg3, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_4"}
        }
      }
    }
    %alloc_7 = memref.alloc() {alignment = 64 : i64} : memref<1x64x114x114xf32>
    affine.for %arg1 = 0 to 1 {
      affine.for %arg2 = 0 to 64 {
        affine.for %arg3 = 0 to 114 step 6 {
          %5 = FDRA.BlockLoad %alloc_7 [0, %arg2, %arg3, 0] : memref<1x64x114x114xf32> -> memref<1x64x114x114xf32> {"forward_kernel_5"}
          FDRA.KernelCall @forward_kernel_5(%5) : (memref<1x64x114x114xf32>) -> ()
          FDRA.BlockStore %5,  %alloc_7 [0, %arg2, %arg3, 0] : memref<1x64x114x114xf32> -> memref<1x64x114x114xf32> {"forward_kernel_5"}
        }
      }
    }
    %alloc_8 = memref.alloc() {alignment = 64 : i64} : memref<1x64x114x114xf32>
    memref.copy %alloc_7, %alloc_8 : memref<1x64x114x114xf32> to memref<1x64x114x114xf32>
    %subview_9 = memref.subview %alloc_8[0, 0, 1, 1] [1, 64, 112, 112] [1, 1, 1, 1] : memref<1x64x114x114xf32> to memref<1x64x112x112xf32, strided<[831744, 12996, 114, 1], offset: 115>>
    memref.copy %alloc_6, %subview_9 : memref<1x64x112x112xf32> to memref<1x64x112x112xf32, strided<[831744, 12996, 114, 1], offset: 115>>
    %alloc_10 = memref.alloc() {alignment = 64 : i64} : memref<1x64x56x56xf32>
    affine.for %arg1 = 0 to 1 {
      affine.for %arg2 = 0 to 64 {
        affine.for %arg3 = 0 to 56 step 28 {
          %5 = FDRA.BlockLoad %alloc_10 [0, %arg2, %arg3, 0] : memref<1x64x56x56xf32> -> memref<1x64x56x56xf32> {"forward_kernel_6"}
          FDRA.KernelCall @forward_kernel_6(%5) : (memref<1x64x56x56xf32>) -> ()
          FDRA.BlockStore %5,  %alloc_10 [0, %arg2, %arg3, 0] : memref<1x64x56x56xf32> -> memref<1x64x56x56xf32> {"forward_kernel_6"}
        }
      }
    }
    %alloc_11 = memref.alloc() {alignment = 64 : i64} : memref<1x64x56x56xf32>
    memref.copy %alloc_10, %alloc_11 : memref<1x64x56x56xf32> to memref<1x64x56x56xf32>
    affine.for %arg1 = 0 to 1 {
      affine.for %arg2 = 0 to 64 {
        affine.for %arg3 = 0 to 56 step 4 {
          %5 = FDRA.BlockLoad %alloc_8 [0, %arg2, %arg3 * 2, 0] : memref<1x64x114x114xf32> -> memref<1x64x114x114xf32> {"forward_kernel_7"}
          %6 = FDRA.BlockLoad %alloc_11 [0, %arg2, %arg3, 0] : memref<1x64x56x56xf32> -> memref<1x64x56x56xf32> {"forward_kernel_7"}
          %7 = FDRA.BlockLoad %alloc_11 [0, %arg2, %arg3, 0] : memref<1x64x56x56xf32> -> memref<1x64x56x56xf32> {"forward_kernel_7"}
          FDRA.KernelCall @forward_kernel_7(%5, %6, %7) : (memref<1x64x114x114xf32>, memref<1x64x56x56xf32>, memref<1x64x56x56xf32>) -> ()
          FDRA.BlockStore %7,  %alloc_11 [0, %arg2, %arg3, 0] : memref<1x64x56x56xf32> -> memref<1x64x56x56xf32> {"forward_kernel_7"}
        }
      }
    }
    return %alloc_11 : memref<1x64x56x56xf32>
  }
  func.func @forward_kernel_0(%arg0: memref<1x3x230x230xf32>) attributes {Kernel, forward_kernel_0} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 0.000000e+00 : f32
    affine.for %arg1 = 0 to 5 {
      affine.for %arg2 = 0 to 230 {
        affine.store %cst, %arg0[0, 0, %arg1, %arg2] : memref<1x3x230x230xf32>
      }
    }
    return
  }
  func.func @forward_kernel_1(%arg0: memref<1x64x112x112xf32>) attributes {Kernel, forward_kernel_1} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 0.000000e+00 : f32
    affine.for %arg1 = 0 to 16 {
      affine.for %arg2 = 0 to 112 {
        affine.store %cst, %arg0[0, 0, %arg1, %arg2] : memref<1x64x112x112xf32>
      }
    }
    return
  }
  func.func @forward_kernel_2(%arg0: memref<1x3x230x230xf32>, %arg1: memref<64x3x7x7xf32>, %arg2: memref<1x64x112x112xf32>, %arg3: memref<1x64x112x112xf32>) attributes {Kernel, forward_kernel_2} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    affine.for %arg4 = 0 to 8 {
      affine.for %arg5 = 0 to 3 {
        affine.for %arg6 = 0 to 7 {
          affine.for %arg7 = 0 to 7 {
            %0 = affine.load %arg0[0, %arg5, %arg6, %arg4 * 2 + %arg7] : memref<1x3x230x230xf32>
            %1 = affine.load %arg1[0, %arg5, %arg6, %arg7] : memref<64x3x7x7xf32>
            %2 = affine.load %arg2[0, 0, 0, %arg4] : memref<1x64x112x112xf32>
            %3 = arith.mulf %0, %1 : f32
            %4 = arith.addf %2, %3 : f32
            affine.store %4, %arg3[0, 0, 0, %arg4] : memref<1x64x112x112xf32>
          }
        }
      }
    }
    return
  }
  func.func @forward_kernel_3(%arg0: memref<1x64x112x112xf32>, %arg1: memref<64xf32>, %arg2: memref<64xf32>, %arg3: memref<64xf32>, %arg4: memref<64xf32>, %arg5: memref<1x64x112x112xf32>) attributes {Kernel, forward_kernel_3} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 1.000000e-05 : f64
    affine.for %arg6 = 0 to 16 {
      affine.for %arg7 = 0 to 112 {
        %0 = affine.load %arg0[0, 0, %arg6, %arg7] : memref<1x64x112x112xf32>
        %1 = affine.load %arg1[0] : memref<64xf32>
        %2 = affine.load %arg2[0] : memref<64xf32>
        %3 = affine.load %arg3[0] : memref<64xf32>
        %4 = affine.load %arg4[0] : memref<64xf32>
        %5 = arith.truncf %cst : f64 to f32
        %6 = arith.addf %4, %5 : f32
        %cst_0 = arith.constant 5.000000e-01 : f32
        %7 = arith.mulf %6, %cst_0 : f32
        %8 = arith.bitcast %6 : f32 to i32
        %c1_i32 = arith.constant 1 : i32
        %9 = arith.shrui %8, %c1_i32 : i32
        %c1597463007_i32 = arith.constant 1597463007 : i32
        %10 = arith.subi %c1597463007_i32, %9 : i32
        %11 = arith.bitcast %10 : i32 to f32
        %cst_1 = arith.constant 1.500000e+00 : f32
        %12 = arith.mulf %11, %11 : f32
        %13 = arith.mulf %12, %7 : f32
        %14 = arith.subf %cst_1, %13 : f32
        %15 = arith.mulf %14, %12 : f32
        %16 = arith.subf %0, %3 : f32
        %17 = arith.mulf %16, %15 : f32
        %18 = arith.mulf %17, %1 : f32
        %19 = arith.addf %18, %2 : f32
        affine.store %19, %arg5[0, 0, %arg6, %arg7] : memref<1x64x112x112xf32>
      }
    }
    return
  }
  func.func @forward_kernel_4(%arg0: memref<1x64x112x112xf32>, %arg1: memref<1x64x112x112xf32>) attributes {Kernel, forward_kernel_4} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 0.000000e+00 : f32
    affine.for %arg2 = 0 to 16 {
      affine.for %arg3 = 0 to 112 {
        %0 = affine.load %arg0[0, 0, %arg2, %arg3] : memref<1x64x112x112xf32>
        %1 = arith.cmpf ugt, %0, %cst : f32
        %2 = arith.select %1, %0, %cst : f32
        affine.store %2, %arg1[0, 0, %arg2, %arg3] : memref<1x64x112x112xf32>
      }
    }
    return
  }
  func.func @forward_kernel_5(%arg0: memref<1x64x114x114xf32>) attributes {Kernel, forward_kernel_5} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 0xFF800000 : f32
    affine.for %arg1 = 0 to 6 {
      affine.for %arg2 = 0 to 114 {
        affine.store %cst, %arg0[0, 0, %arg1, %arg2] : memref<1x64x114x114xf32>
      }
    }
    return
  }
  func.func @forward_kernel_6(%arg0: memref<1x64x56x56xf32>) attributes {Kernel, forward_kernel_6} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 0xFF800000 : f32
    affine.for %arg1 = 0 to 28 {
      affine.for %arg2 = 0 to 56 {
        affine.store %cst, %arg0[0, 0, %arg1, %arg2] : memref<1x64x56x56xf32>
      }
    }
    return
  }
  func.func @forward_kernel_7(%arg0: memref<1x64x114x114xf32>, %arg1: memref<1x64x56x56xf32>, %arg2: memref<1x64x56x56xf32>) attributes {Kernel, forward_kernel_7} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    affine.for %arg3 = 0 to 4 {
      affine.for %arg4 = 0 to 56 {
        affine.for %arg5 = 0 to 3 {
          affine.for %arg6 = 0 to 3 {
            %0 = affine.load %arg0[0, 0, %arg3 * 2 + %arg5, %arg4 * 2 + %arg6] : memref<1x64x114x114xf32>
            %1 = affine.load %arg1[0, 0, %arg3, %arg4] : memref<1x64x56x56xf32>
            %2 = arith.cmpf ugt, %1, %0 : f32
            %3 = arith.select %2, %1, %0 : f32
            %4 = arith.cmpf uno, %0, %0 : f32
            %5 = arith.select %4, %0, %3 : f32
            affine.store %5, %arg2[0, 0, %arg3, %arg4] : memref<1x64x56x56xf32>
          }
        }
      }
    }
    return
  }
}


// -----// IR Dump After NormalizeMemRefs (normalize-memrefs) //----- //
module attributes {torch.debug_module_name = "ResNet"} {
  memref.global "private" constant @__constant_64xf32_2 : memref<64xf32> = dense<[0.230717152, 0.253822476, -1.05429808E-6, -0.664388895, -1.65705547E-8, 0.161521927, 0.454503953, -4.301950e-07, 0.300513744, -8.005240e-06, 0.349418074, 0.311480612, -0.249529764, -3.474890e-05, 0.107726313, 0.218970656, 0.381412596, -0.529882133, -0.628644109, 0.571398079, 0.299846917, 0.584303737, 0.48202154, 0.328526348, 0.196717009, 0.194961801, 0.152145416, 0.085522361, 0.513142824, 0.0152367353, 0.166441768, 0.332394391, 0.249211237, 0.443366677, -0.280169278, -0.0203848016, -2.45068748E-7, 0.321340501, -4.9151744E-8, 0.237767309, 0.232907727, 0.315274626, 0.427762389, 0.293127537, 0.263794243, 0.675975859, 0.429100394, 0.345662743, -8.69090186E-8, 0.247294366, 0.303160846, 0.615772783, 0.39834857, 0.332067341, -0.412187815, 0.378069043, 0.178953409, 0.25747788, -0.449079722, 0.213058949, 0.569339037, 5.727430e-01, -0.402383476, 0.23406373]>
  memref.global "private" constant @__constant_64xf32_1 : memref<64xf32> = dense<[0.234872743, 0.266257942, -5.10959595E-8, 0.518699706, 3.44040196E-9, 0.222385287, 0.422887057, 1.31532403E-7, 0.25093165, 1.5152026E-6, 0.316871643, 0.250491828, 0.378926098, 1.08618351E-5, 2.752640e-01, 0.236741036, 0.242021769, 0.395314813, 0.469346285, 0.2908957, 0.272684187, 0.27802828, 0.290692091, 0.206927493, 0.258990377, 0.278710574, 0.291149527, 0.316013753, 0.388891488, 0.304111898, 0.267757207, 0.210925162, 0.287084132, 0.332426429, 0.42672804, 0.373260558, 7.48037578E-8, 0.19067812, 1.47401256E-8, 0.223029822, 0.179079413, 0.248600766, 0.27399528, 0.259228647, 0.294202209, 0.299236417, 0.223688841, 0.262799472, 2.20011476E-8, 0.266098082, 0.220890298, 0.284285516, 0.330723315, 0.226809531, 0.365380913, 0.21229881, 0.239653021, 0.24949576, 0.525830686, 0.248247579, 0.295652747, 0.258776665, 0.4832564, 0.26670444]>
  memref.global "private" constant @__constant_64xf32_0 : memref<64xf32> = dense<[1.01694489, 3.71674347, 5.81334356E-11, 3.28254271, 1.71074404E-13, 0.658226967, 4.37006235, 6.60045282E-12, 0.915522992, 1.93175254E-9, 4.12558556, 2.74399233, 2.8390913, 4.79658588E-8, 11.0722713, 0.500745952, 2.23128176, 4.82570696, 2.69861364, 9.36995506, 3.73391747, 5.48429585, 5.7126689, 0.445444882, 0.436275303, 7.15633583, 13.7179089, 5.25117493, 6.81737518, 1.67235756, 1.65343034, 1.23245978, 4.90762854, 3.07305121, 4.23838568, 4.99363518, 1.44646307E-12, 1.52116203, 1.03519833E-13, 0.351344079, 0.17024748, 1.42054474, 1.90848303, 2.15124035, 2.66084933, 4.84443378, 1.92971194, 1.49994361, 2.94806145E-13, 1.53064024, 0.365027189, 2.93755412, 5.46641159, 0.707924544, 3.33150721, 0.771802961, 2.40678358, 6.5213666, 4.12625027, 1.05063522, 2.95303202, 11.3656216, 4.76904678, 1.65587807]>
  memref.global "private" constant @__constant_64xf32 : memref<64xf32> = dense<[0.00276811025, -0.0257689245, 2.12544663E-7, -0.0846051499, 2.11205915E-8, 4.96906461E-4, -0.0224083271, -1.15818956E-7, -4.823850e-03, 2.75073347E-7, 3.958230e-02, 0.0319936387, -0.0374896601, -1.37163477E-6, 0.00660019321, 4.378190e-03, 0.0647971481, 0.11175999, 0.0360015705, -0.0750752166, -0.03824009, 0.0843578502, -5.228700e-02, -0.0117988894, 0.00130188058, 0.0321722962, -0.0177843049, -0.0910085887, 0.113187239, -0.0416320041, 0.00873024761, 0.0296931695, -0.0705021694, -0.00348469778, 0.109771468, -0.00173411821, -5.94229412E-8, 0.0293303896, -7.85527287E-9, 0.00673204474, -0.00370999542, 0.0160279572, -0.0278826058, 0.0265925378, 0.0284745526, -0.12734659, 0.0446168408, 0.0263288375, 2.14538591E-8, -1.704500e-02, -0.00356168114, -0.0458412617, 0.0638761446, 0.0152198272, -0.0385114551, -0.0164278317, -0.016568929, 0.0560574941, -0.0803062319, -0.00266457512, -0.0417176671, 0.126112729, -0.0492369682, -0.0132609205]>
  memref.global "private" constant @__constant_64x3x7x7xf32 : memref<64x3x7x7xf32> = dense<"
  ml_program.global private mutable @global_seed(dense<0> : tensor<i64>) : tensor<i64>
  func.func @forward(%arg0: memref<1x3x224x224xf32>) -> memref<1x64x56x56xf32> {
    %cst = arith.constant 1.000000e-05 : f64
    %cst_0 = arith.constant 0xFF800000 : f32
    %cst_1 = arith.constant 0.000000e+00 : f32
    %0 = memref.get_global @__constant_64x3x7x7xf32 : memref<64x3x7x7xf32>
    %1 = memref.get_global @__constant_64xf32 : memref<64xf32>
    %2 = memref.get_global @__constant_64xf32_0 : memref<64xf32>
    %3 = memref.get_global @__constant_64xf32_1 : memref<64xf32>
    %4 = memref.get_global @__constant_64xf32_2 : memref<64xf32>
    %alloc = memref.alloc() {alignment = 64 : i64} : memref<1x3x230x230xf32>
    affine.for %arg1 = 0 to 1 {
      affine.for %arg2 = 0 to 3 {
        affine.for %arg3 = 0 to 230 step 5 {
          %5 = FDRA.BlockLoad %alloc [0, %arg2, %arg3, 0] : memref<1x3x230x230xf32> -> memref<1x3x230x230xf32> {"forward_kernel_0"}
          FDRA.KernelCall @forward_kernel_0(%5) : (memref<1x3x230x230xf32>) -> ()
          FDRA.BlockStore %5,  %alloc [0, %arg2, %arg3, 0] : memref<1x3x230x230xf32> -> memref<1x3x230x230xf32> {"forward_kernel_0"}
        }
      }
    }
    %alloc_2 = memref.alloc() {alignment = 64 : i64} : memref<1x3x230x230xf32>
    memref.copy %alloc, %alloc_2 : memref<1x3x230x230xf32> to memref<1x3x230x230xf32>
    %subview = memref.subview %alloc_2[0, 0, 3, 3] [1, 3, 224, 224] [1, 1, 1, 1] : memref<1x3x230x230xf32> to memref<1x3x224x224xf32, strided<[158700, 52900, 230, 1], offset: 693>>
    memref.copy %arg0, %subview : memref<1x3x224x224xf32> to memref<1x3x224x224xf32, strided<[158700, 52900, 230, 1], offset: 693>>
    %alloc_3 = memref.alloc() {alignment = 64 : i64} : memref<1x64x112x112xf32>
    affine.for %arg1 = 0 to 1 {
      affine.for %arg2 = 0 to 64 {
        affine.for %arg3 = 0 to 112 step 16 {
          %5 = FDRA.BlockLoad %alloc_3 [0, %arg2, %arg3, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_1"}
          FDRA.KernelCall @forward_kernel_1(%5) : (memref<1x64x112x112xf32>) -> ()
          FDRA.BlockStore %5,  %alloc_3 [0, %arg2, %arg3, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_1"}
        }
      }
    }
    %alloc_4 = memref.alloc() {alignment = 64 : i64} : memref<1x64x112x112xf32>
    memref.copy %alloc_3, %alloc_4 : memref<1x64x112x112xf32> to memref<1x64x112x112xf32>
    affine.for %arg1 = 0 to 1 {
      affine.for %arg2 = 0 to 64 {
        affine.for %arg3 = 0 to 112 {
          affine.for %arg4 = 0 to 112 step 8 {
            %5 = FDRA.BlockLoad %alloc_2 [0, 0, %arg3 * 2, %arg4 * 2] : memref<1x3x230x230xf32> -> memref<1x3x230x230xf32> {"forward_kernel_2"}
            %6 = FDRA.BlockLoad %0 [%arg2, 0, 0, 0] : memref<64x3x7x7xf32> -> memref<64x3x7x7xf32> {"forward_kernel_2"}
            %7 = FDRA.BlockLoad %alloc_4 [0, %arg2, %arg3, %arg4] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_2"}
            %8 = FDRA.BlockLoad %alloc_4 [0, %arg2, %arg3, %arg4] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_2"}
            FDRA.KernelCall @forward_kernel_2(%5, %6, %7, %8) : (memref<1x3x230x230xf32>, memref<64x3x7x7xf32>, memref<1x64x112x112xf32>, memref<1x64x112x112xf32>) -> ()
            FDRA.BlockStore %8,  %alloc_4 [0, %arg2, %arg3, %arg4] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_2"}
          }
        }
      }
    }
    %alloc_5 = memref.alloc() {alignment = 64 : i64} : memref<1x64x112x112xf32>
    affine.for %arg1 = 0 to 1 {
      affine.for %arg2 = 0 to 64 {
        affine.for %arg3 = 0 to 112 step 16 {
          %5 = FDRA.BlockLoad %alloc_4 [0, %arg2, %arg3, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_3"}
          %6 = FDRA.BlockLoad %3 [%arg2] : memref<64xf32> -> memref<64xf32> {"forward_kernel_3"}
          %7 = FDRA.BlockLoad %4 [%arg2] : memref<64xf32> -> memref<64xf32> {"forward_kernel_3"}
          %8 = FDRA.BlockLoad %1 [%arg2] : memref<64xf32> -> memref<64xf32> {"forward_kernel_3"}
          %9 = FDRA.BlockLoad %2 [%arg2] : memref<64xf32> -> memref<64xf32> {"forward_kernel_3"}
          %10 = FDRA.BlockLoad %alloc_5 [0, %arg2, %arg3, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_3"}
          FDRA.KernelCall @forward_kernel_3(%5, %6, %7, %8, %9, %10) : (memref<1x64x112x112xf32>, memref<64xf32>, memref<64xf32>, memref<64xf32>, memref<64xf32>, memref<1x64x112x112xf32>) -> ()
          FDRA.BlockStore %10,  %alloc_5 [0, %arg2, %arg3, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_3"}
        }
      }
    }
    %alloc_6 = memref.alloc() {alignment = 64 : i64} : memref<1x64x112x112xf32>
    affine.for %arg1 = 0 to 1 {
      affine.for %arg2 = 0 to 64 {
        affine.for %arg3 = 0 to 112 step 16 {
          %5 = FDRA.BlockLoad %alloc_5 [0, %arg2, %arg3, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_4"}
          %6 = FDRA.BlockLoad %alloc_6 [0, %arg2, %arg3, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_4"}
          FDRA.KernelCall @forward_kernel_4(%5, %6) : (memref<1x64x112x112xf32>, memref<1x64x112x112xf32>) -> ()
          FDRA.BlockStore %6,  %alloc_6 [0, %arg2, %arg3, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_4"}
        }
      }
    }
    %alloc_7 = memref.alloc() {alignment = 64 : i64} : memref<1x64x114x114xf32>
    affine.for %arg1 = 0 to 1 {
      affine.for %arg2 = 0 to 64 {
        affine.for %arg3 = 0 to 114 step 6 {
          %5 = FDRA.BlockLoad %alloc_7 [0, %arg2, %arg3, 0] : memref<1x64x114x114xf32> -> memref<1x64x114x114xf32> {"forward_kernel_5"}
          FDRA.KernelCall @forward_kernel_5(%5) : (memref<1x64x114x114xf32>) -> ()
          FDRA.BlockStore %5,  %alloc_7 [0, %arg2, %arg3, 0] : memref<1x64x114x114xf32> -> memref<1x64x114x114xf32> {"forward_kernel_5"}
        }
      }
    }
    %alloc_8 = memref.alloc() {alignment = 64 : i64} : memref<1x64x114x114xf32>
    memref.copy %alloc_7, %alloc_8 : memref<1x64x114x114xf32> to memref<1x64x114x114xf32>
    %subview_9 = memref.subview %alloc_8[0, 0, 1, 1] [1, 64, 112, 112] [1, 1, 1, 1] : memref<1x64x114x114xf32> to memref<1x64x112x112xf32, strided<[831744, 12996, 114, 1], offset: 115>>
    memref.copy %alloc_6, %subview_9 : memref<1x64x112x112xf32> to memref<1x64x112x112xf32, strided<[831744, 12996, 114, 1], offset: 115>>
    %alloc_10 = memref.alloc() {alignment = 64 : i64} : memref<1x64x56x56xf32>
    affine.for %arg1 = 0 to 1 {
      affine.for %arg2 = 0 to 64 {
        affine.for %arg3 = 0 to 56 step 28 {
          %5 = FDRA.BlockLoad %alloc_10 [0, %arg2, %arg3, 0] : memref<1x64x56x56xf32> -> memref<1x64x56x56xf32> {"forward_kernel_6"}
          FDRA.KernelCall @forward_kernel_6(%5) : (memref<1x64x56x56xf32>) -> ()
          FDRA.BlockStore %5,  %alloc_10 [0, %arg2, %arg3, 0] : memref<1x64x56x56xf32> -> memref<1x64x56x56xf32> {"forward_kernel_6"}
        }
      }
    }
    %alloc_11 = memref.alloc() {alignment = 64 : i64} : memref<1x64x56x56xf32>
    memref.copy %alloc_10, %alloc_11 : memref<1x64x56x56xf32> to memref<1x64x56x56xf32>
    affine.for %arg1 = 0 to 1 {
      affine.for %arg2 = 0 to 64 {
        affine.for %arg3 = 0 to 56 step 4 {
          %5 = FDRA.BlockLoad %alloc_8 [0, %arg2, %arg3 * 2, 0] : memref<1x64x114x114xf32> -> memref<1x64x114x114xf32> {"forward_kernel_7"}
          %6 = FDRA.BlockLoad %alloc_11 [0, %arg2, %arg3, 0] : memref<1x64x56x56xf32> -> memref<1x64x56x56xf32> {"forward_kernel_7"}
          %7 = FDRA.BlockLoad %alloc_11 [0, %arg2, %arg3, 0] : memref<1x64x56x56xf32> -> memref<1x64x56x56xf32> {"forward_kernel_7"}
          FDRA.KernelCall @forward_kernel_7(%5, %6, %7) : (memref<1x64x114x114xf32>, memref<1x64x56x56xf32>, memref<1x64x56x56xf32>) -> ()
          FDRA.BlockStore %7,  %alloc_11 [0, %arg2, %arg3, 0] : memref<1x64x56x56xf32> -> memref<1x64x56x56xf32> {"forward_kernel_7"}
        }
      }
    }
    return %alloc_11 : memref<1x64x56x56xf32>
  }
  func.func @forward_kernel_0(%arg0: memref<1x3x230x230xf32>) attributes {Kernel, forward_kernel_0} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 0.000000e+00 : f32
    affine.for %arg1 = 0 to 5 {
      affine.for %arg2 = 0 to 230 {
        affine.store %cst, %arg0[0, 0, %arg1, %arg2] : memref<1x3x230x230xf32>
      }
    }
    return
  }
  func.func @forward_kernel_1(%arg0: memref<1x64x112x112xf32>) attributes {Kernel, forward_kernel_1} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 0.000000e+00 : f32
    affine.for %arg1 = 0 to 16 {
      affine.for %arg2 = 0 to 112 {
        affine.store %cst, %arg0[0, 0, %arg1, %arg2] : memref<1x64x112x112xf32>
      }
    }
    return
  }
  func.func @forward_kernel_2(%arg0: memref<1x3x230x230xf32>, %arg1: memref<64x3x7x7xf32>, %arg2: memref<1x64x112x112xf32>, %arg3: memref<1x64x112x112xf32>) attributes {Kernel, forward_kernel_2} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    affine.for %arg4 = 0 to 8 {
      affine.for %arg5 = 0 to 3 {
        affine.for %arg6 = 0 to 7 {
          affine.for %arg7 = 0 to 7 {
            %0 = affine.load %arg0[0, %arg5, %arg6, %arg4 * 2 + %arg7] : memref<1x3x230x230xf32>
            %1 = affine.load %arg1[0, %arg5, %arg6, %arg7] : memref<64x3x7x7xf32>
            %2 = affine.load %arg2[0, 0, 0, %arg4] : memref<1x64x112x112xf32>
            %3 = arith.mulf %0, %1 : f32
            %4 = arith.addf %2, %3 : f32
            affine.store %4, %arg3[0, 0, 0, %arg4] : memref<1x64x112x112xf32>
          }
        }
      }
    }
    return
  }
  func.func @forward_kernel_3(%arg0: memref<1x64x112x112xf32>, %arg1: memref<64xf32>, %arg2: memref<64xf32>, %arg3: memref<64xf32>, %arg4: memref<64xf32>, %arg5: memref<1x64x112x112xf32>) attributes {Kernel, forward_kernel_3} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 1.000000e-05 : f64
    affine.for %arg6 = 0 to 16 {
      affine.for %arg7 = 0 to 112 {
        %0 = affine.load %arg0[0, 0, %arg6, %arg7] : memref<1x64x112x112xf32>
        %1 = affine.load %arg1[0] : memref<64xf32>
        %2 = affine.load %arg2[0] : memref<64xf32>
        %3 = affine.load %arg3[0] : memref<64xf32>
        %4 = affine.load %arg4[0] : memref<64xf32>
        %5 = arith.truncf %cst : f64 to f32
        %6 = arith.addf %4, %5 : f32
        %cst_0 = arith.constant 5.000000e-01 : f32
        %7 = arith.mulf %6, %cst_0 : f32
        %8 = arith.bitcast %6 : f32 to i32
        %c1_i32 = arith.constant 1 : i32
        %9 = arith.shrui %8, %c1_i32 : i32
        %c1597463007_i32 = arith.constant 1597463007 : i32
        %10 = arith.subi %c1597463007_i32, %9 : i32
        %11 = arith.bitcast %10 : i32 to f32
        %cst_1 = arith.constant 1.500000e+00 : f32
        %12 = arith.mulf %11, %11 : f32
        %13 = arith.mulf %12, %7 : f32
        %14 = arith.subf %cst_1, %13 : f32
        %15 = arith.mulf %14, %12 : f32
        %16 = arith.subf %0, %3 : f32
        %17 = arith.mulf %16, %15 : f32
        %18 = arith.mulf %17, %1 : f32
        %19 = arith.addf %18, %2 : f32
        affine.store %19, %arg5[0, 0, %arg6, %arg7] : memref<1x64x112x112xf32>
      }
    }
    return
  }
  func.func @forward_kernel_4(%arg0: memref<1x64x112x112xf32>, %arg1: memref<1x64x112x112xf32>) attributes {Kernel, forward_kernel_4} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 0.000000e+00 : f32
    affine.for %arg2 = 0 to 16 {
      affine.for %arg3 = 0 to 112 {
        %0 = affine.load %arg0[0, 0, %arg2, %arg3] : memref<1x64x112x112xf32>
        %1 = arith.cmpf ugt, %0, %cst : f32
        %2 = arith.select %1, %0, %cst : f32
        affine.store %2, %arg1[0, 0, %arg2, %arg3] : memref<1x64x112x112xf32>
      }
    }
    return
  }
  func.func @forward_kernel_5(%arg0: memref<1x64x114x114xf32>) attributes {Kernel, forward_kernel_5} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 0xFF800000 : f32
    affine.for %arg1 = 0 to 6 {
      affine.for %arg2 = 0 to 114 {
        affine.store %cst, %arg0[0, 0, %arg1, %arg2] : memref<1x64x114x114xf32>
      }
    }
    return
  }
  func.func @forward_kernel_6(%arg0: memref<1x64x56x56xf32>) attributes {Kernel, forward_kernel_6} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 0xFF800000 : f32
    affine.for %arg1 = 0 to 28 {
      affine.for %arg2 = 0 to 56 {
        affine.store %cst, %arg0[0, 0, %arg1, %arg2] : memref<1x64x56x56xf32>
      }
    }
    return
  }
  func.func @forward_kernel_7(%arg0: memref<1x64x114x114xf32>, %arg1: memref<1x64x56x56xf32>, %arg2: memref<1x64x56x56xf32>) attributes {Kernel, forward_kernel_7} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    affine.for %arg3 = 0 to 4 {
      affine.for %arg4 = 0 to 56 {
        affine.for %arg5 = 0 to 3 {
          affine.for %arg6 = 0 to 3 {
            %0 = affine.load %arg0[0, 0, %arg3 * 2 + %arg5, %arg4 * 2 + %arg6] : memref<1x64x114x114xf32>
            %1 = affine.load %arg1[0, 0, %arg3, %arg4] : memref<1x64x56x56xf32>
            %2 = arith.cmpf ugt, %1, %0 : f32
            %3 = arith.select %2, %1, %0 : f32
            %4 = arith.cmpf uno, %0, %0 : f32
            %5 = arith.select %4, %0, %3 : f32
            affine.store %5, %arg2[0, 0, %arg3, %arg4] : memref<1x64x56x56xf32>
          }
        }
      }
    }
    return
  }
}


// -----// IR Dump After ExpandStridedMetadata (expand-strided-metadata) //----- //
module attributes {torch.debug_module_name = "ResNet"} {
  memref.global "private" constant @__constant_64xf32_2 : memref<64xf32> = dense<[0.230717152, 0.253822476, -1.05429808E-6, -0.664388895, -1.65705547E-8, 0.161521927, 0.454503953, -4.301950e-07, 0.300513744, -8.005240e-06, 0.349418074, 0.311480612, -0.249529764, -3.474890e-05, 0.107726313, 0.218970656, 0.381412596, -0.529882133, -0.628644109, 0.571398079, 0.299846917, 0.584303737, 0.48202154, 0.328526348, 0.196717009, 0.194961801, 0.152145416, 0.085522361, 0.513142824, 0.0152367353, 0.166441768, 0.332394391, 0.249211237, 0.443366677, -0.280169278, -0.0203848016, -2.45068748E-7, 0.321340501, -4.9151744E-8, 0.237767309, 0.232907727, 0.315274626, 0.427762389, 0.293127537, 0.263794243, 0.675975859, 0.429100394, 0.345662743, -8.69090186E-8, 0.247294366, 0.303160846, 0.615772783, 0.39834857, 0.332067341, -0.412187815, 0.378069043, 0.178953409, 0.25747788, -0.449079722, 0.213058949, 0.569339037, 5.727430e-01, -0.402383476, 0.23406373]>
  memref.global "private" constant @__constant_64xf32_1 : memref<64xf32> = dense<[0.234872743, 0.266257942, -5.10959595E-8, 0.518699706, 3.44040196E-9, 0.222385287, 0.422887057, 1.31532403E-7, 0.25093165, 1.5152026E-6, 0.316871643, 0.250491828, 0.378926098, 1.08618351E-5, 2.752640e-01, 0.236741036, 0.242021769, 0.395314813, 0.469346285, 0.2908957, 0.272684187, 0.27802828, 0.290692091, 0.206927493, 0.258990377, 0.278710574, 0.291149527, 0.316013753, 0.388891488, 0.304111898, 0.267757207, 0.210925162, 0.287084132, 0.332426429, 0.42672804, 0.373260558, 7.48037578E-8, 0.19067812, 1.47401256E-8, 0.223029822, 0.179079413, 0.248600766, 0.27399528, 0.259228647, 0.294202209, 0.299236417, 0.223688841, 0.262799472, 2.20011476E-8, 0.266098082, 0.220890298, 0.284285516, 0.330723315, 0.226809531, 0.365380913, 0.21229881, 0.239653021, 0.24949576, 0.525830686, 0.248247579, 0.295652747, 0.258776665, 0.4832564, 0.26670444]>
  memref.global "private" constant @__constant_64xf32_0 : memref<64xf32> = dense<[1.01694489, 3.71674347, 5.81334356E-11, 3.28254271, 1.71074404E-13, 0.658226967, 4.37006235, 6.60045282E-12, 0.915522992, 1.93175254E-9, 4.12558556, 2.74399233, 2.8390913, 4.79658588E-8, 11.0722713, 0.500745952, 2.23128176, 4.82570696, 2.69861364, 9.36995506, 3.73391747, 5.48429585, 5.7126689, 0.445444882, 0.436275303, 7.15633583, 13.7179089, 5.25117493, 6.81737518, 1.67235756, 1.65343034, 1.23245978, 4.90762854, 3.07305121, 4.23838568, 4.99363518, 1.44646307E-12, 1.52116203, 1.03519833E-13, 0.351344079, 0.17024748, 1.42054474, 1.90848303, 2.15124035, 2.66084933, 4.84443378, 1.92971194, 1.49994361, 2.94806145E-13, 1.53064024, 0.365027189, 2.93755412, 5.46641159, 0.707924544, 3.33150721, 0.771802961, 2.40678358, 6.5213666, 4.12625027, 1.05063522, 2.95303202, 11.3656216, 4.76904678, 1.65587807]>
  memref.global "private" constant @__constant_64xf32 : memref<64xf32> = dense<[0.00276811025, -0.0257689245, 2.12544663E-7, -0.0846051499, 2.11205915E-8, 4.96906461E-4, -0.0224083271, -1.15818956E-7, -4.823850e-03, 2.75073347E-7, 3.958230e-02, 0.0319936387, -0.0374896601, -1.37163477E-6, 0.00660019321, 4.378190e-03, 0.0647971481, 0.11175999, 0.0360015705, -0.0750752166, -0.03824009, 0.0843578502, -5.228700e-02, -0.0117988894, 0.00130188058, 0.0321722962, -0.0177843049, -0.0910085887, 0.113187239, -0.0416320041, 0.00873024761, 0.0296931695, -0.0705021694, -0.00348469778, 0.109771468, -0.00173411821, -5.94229412E-8, 0.0293303896, -7.85527287E-9, 0.00673204474, -0.00370999542, 0.0160279572, -0.0278826058, 0.0265925378, 0.0284745526, -0.12734659, 0.0446168408, 0.0263288375, 2.14538591E-8, -1.704500e-02, -0.00356168114, -0.0458412617, 0.0638761446, 0.0152198272, -0.0385114551, -0.0164278317, -0.016568929, 0.0560574941, -0.0803062319, -0.00266457512, -0.0417176671, 0.126112729, -0.0492369682, -0.0132609205]>
  memref.global "private" constant @__constant_64x3x7x7xf32 : memref<64x3x7x7xf32> = dense<"
  ml_program.global private mutable @global_seed(dense<0> : tensor<i64>) : tensor<i64>
  func.func @forward(%arg0: memref<1x3x224x224xf32>) -> memref<1x64x56x56xf32> {
    %0 = memref.get_global @__constant_64x3x7x7xf32 : memref<64x3x7x7xf32>
    %1 = memref.get_global @__constant_64xf32 : memref<64xf32>
    %2 = memref.get_global @__constant_64xf32_0 : memref<64xf32>
    %3 = memref.get_global @__constant_64xf32_1 : memref<64xf32>
    %4 = memref.get_global @__constant_64xf32_2 : memref<64xf32>
    %alloc = memref.alloc() {alignment = 64 : i64} : memref<1x3x230x230xf32>
    affine.for %arg1 = 0 to 1 {
      affine.for %arg2 = 0 to 3 {
        affine.for %arg3 = 0 to 230 step 5 {
          %5 = FDRA.BlockLoad %alloc [0, %arg2, %arg3, 0] : memref<1x3x230x230xf32> -> memref<1x3x230x230xf32> {"forward_kernel_0"}
          FDRA.KernelCall @forward_kernel_0(%5) : (memref<1x3x230x230xf32>) -> ()
          FDRA.BlockStore %5,  %alloc [0, %arg2, %arg3, 0] : memref<1x3x230x230xf32> -> memref<1x3x230x230xf32> {"forward_kernel_0"}
        }
      }
    }
    %alloc_0 = memref.alloc() {alignment = 64 : i64} : memref<1x3x230x230xf32>
    memref.copy %alloc, %alloc_0 : memref<1x3x230x230xf32> to memref<1x3x230x230xf32>
    %reinterpret_cast = memref.reinterpret_cast %alloc_0 to offset: [693], sizes: [1, 3, 224, 224], strides: [158700, 52900, 230, 1] : memref<1x3x230x230xf32> to memref<1x3x224x224xf32, strided<[158700, 52900, 230, 1], offset: 693>>
    memref.copy %arg0, %reinterpret_cast : memref<1x3x224x224xf32> to memref<1x3x224x224xf32, strided<[158700, 52900, 230, 1], offset: 693>>
    %alloc_1 = memref.alloc() {alignment = 64 : i64} : memref<1x64x112x112xf32>
    affine.for %arg1 = 0 to 1 {
      affine.for %arg2 = 0 to 64 {
        affine.for %arg3 = 0 to 112 step 16 {
          %5 = FDRA.BlockLoad %alloc_1 [0, %arg2, %arg3, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_1"}
          FDRA.KernelCall @forward_kernel_1(%5) : (memref<1x64x112x112xf32>) -> ()
          FDRA.BlockStore %5,  %alloc_1 [0, %arg2, %arg3, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_1"}
        }
      }
    }
    %alloc_2 = memref.alloc() {alignment = 64 : i64} : memref<1x64x112x112xf32>
    memref.copy %alloc_1, %alloc_2 : memref<1x64x112x112xf32> to memref<1x64x112x112xf32>
    affine.for %arg1 = 0 to 1 {
      affine.for %arg2 = 0 to 64 {
        affine.for %arg3 = 0 to 112 {
          affine.for %arg4 = 0 to 112 step 8 {
            %5 = FDRA.BlockLoad %alloc_0 [0, 0, %arg3 * 2, %arg4 * 2] : memref<1x3x230x230xf32> -> memref<1x3x230x230xf32> {"forward_kernel_2"}
            %6 = FDRA.BlockLoad %0 [%arg2, 0, 0, 0] : memref<64x3x7x7xf32> -> memref<64x3x7x7xf32> {"forward_kernel_2"}
            %7 = FDRA.BlockLoad %alloc_2 [0, %arg2, %arg3, %arg4] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_2"}
            %8 = FDRA.BlockLoad %alloc_2 [0, %arg2, %arg3, %arg4] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_2"}
            FDRA.KernelCall @forward_kernel_2(%5, %6, %7, %8) : (memref<1x3x230x230xf32>, memref<64x3x7x7xf32>, memref<1x64x112x112xf32>, memref<1x64x112x112xf32>) -> ()
            FDRA.BlockStore %8,  %alloc_2 [0, %arg2, %arg3, %arg4] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_2"}
          }
        }
      }
    }
    %alloc_3 = memref.alloc() {alignment = 64 : i64} : memref<1x64x112x112xf32>
    affine.for %arg1 = 0 to 1 {
      affine.for %arg2 = 0 to 64 {
        affine.for %arg3 = 0 to 112 step 16 {
          %5 = FDRA.BlockLoad %alloc_2 [0, %arg2, %arg3, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_3"}
          %6 = FDRA.BlockLoad %3 [%arg2] : memref<64xf32> -> memref<64xf32> {"forward_kernel_3"}
          %7 = FDRA.BlockLoad %4 [%arg2] : memref<64xf32> -> memref<64xf32> {"forward_kernel_3"}
          %8 = FDRA.BlockLoad %1 [%arg2] : memref<64xf32> -> memref<64xf32> {"forward_kernel_3"}
          %9 = FDRA.BlockLoad %2 [%arg2] : memref<64xf32> -> memref<64xf32> {"forward_kernel_3"}
          %10 = FDRA.BlockLoad %alloc_3 [0, %arg2, %arg3, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_3"}
          FDRA.KernelCall @forward_kernel_3(%5, %6, %7, %8, %9, %10) : (memref<1x64x112x112xf32>, memref<64xf32>, memref<64xf32>, memref<64xf32>, memref<64xf32>, memref<1x64x112x112xf32>) -> ()
          FDRA.BlockStore %10,  %alloc_3 [0, %arg2, %arg3, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_3"}
        }
      }
    }
    %alloc_4 = memref.alloc() {alignment = 64 : i64} : memref<1x64x112x112xf32>
    affine.for %arg1 = 0 to 1 {
      affine.for %arg2 = 0 to 64 {
        affine.for %arg3 = 0 to 112 step 16 {
          %5 = FDRA.BlockLoad %alloc_3 [0, %arg2, %arg3, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_4"}
          %6 = FDRA.BlockLoad %alloc_4 [0, %arg2, %arg3, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_4"}
          FDRA.KernelCall @forward_kernel_4(%5, %6) : (memref<1x64x112x112xf32>, memref<1x64x112x112xf32>) -> ()
          FDRA.BlockStore %6,  %alloc_4 [0, %arg2, %arg3, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_4"}
        }
      }
    }
    %alloc_5 = memref.alloc() {alignment = 64 : i64} : memref<1x64x114x114xf32>
    affine.for %arg1 = 0 to 1 {
      affine.for %arg2 = 0 to 64 {
        affine.for %arg3 = 0 to 114 step 6 {
          %5 = FDRA.BlockLoad %alloc_5 [0, %arg2, %arg3, 0] : memref<1x64x114x114xf32> -> memref<1x64x114x114xf32> {"forward_kernel_5"}
          FDRA.KernelCall @forward_kernel_5(%5) : (memref<1x64x114x114xf32>) -> ()
          FDRA.BlockStore %5,  %alloc_5 [0, %arg2, %arg3, 0] : memref<1x64x114x114xf32> -> memref<1x64x114x114xf32> {"forward_kernel_5"}
        }
      }
    }
    %alloc_6 = memref.alloc() {alignment = 64 : i64} : memref<1x64x114x114xf32>
    memref.copy %alloc_5, %alloc_6 : memref<1x64x114x114xf32> to memref<1x64x114x114xf32>
    %reinterpret_cast_7 = memref.reinterpret_cast %alloc_6 to offset: [115], sizes: [1, 64, 112, 112], strides: [831744, 12996, 114, 1] : memref<1x64x114x114xf32> to memref<1x64x112x112xf32, strided<[831744, 12996, 114, 1], offset: 115>>
    memref.copy %alloc_4, %reinterpret_cast_7 : memref<1x64x112x112xf32> to memref<1x64x112x112xf32, strided<[831744, 12996, 114, 1], offset: 115>>
    %alloc_8 = memref.alloc() {alignment = 64 : i64} : memref<1x64x56x56xf32>
    affine.for %arg1 = 0 to 1 {
      affine.for %arg2 = 0 to 64 {
        affine.for %arg3 = 0 to 56 step 28 {
          %5 = FDRA.BlockLoad %alloc_8 [0, %arg2, %arg3, 0] : memref<1x64x56x56xf32> -> memref<1x64x56x56xf32> {"forward_kernel_6"}
          FDRA.KernelCall @forward_kernel_6(%5) : (memref<1x64x56x56xf32>) -> ()
          FDRA.BlockStore %5,  %alloc_8 [0, %arg2, %arg3, 0] : memref<1x64x56x56xf32> -> memref<1x64x56x56xf32> {"forward_kernel_6"}
        }
      }
    }
    %alloc_9 = memref.alloc() {alignment = 64 : i64} : memref<1x64x56x56xf32>
    memref.copy %alloc_8, %alloc_9 : memref<1x64x56x56xf32> to memref<1x64x56x56xf32>
    affine.for %arg1 = 0 to 1 {
      affine.for %arg2 = 0 to 64 {
        affine.for %arg3 = 0 to 56 step 4 {
          %5 = FDRA.BlockLoad %alloc_6 [0, %arg2, %arg3 * 2, 0] : memref<1x64x114x114xf32> -> memref<1x64x114x114xf32> {"forward_kernel_7"}
          %6 = FDRA.BlockLoad %alloc_9 [0, %arg2, %arg3, 0] : memref<1x64x56x56xf32> -> memref<1x64x56x56xf32> {"forward_kernel_7"}
          %7 = FDRA.BlockLoad %alloc_9 [0, %arg2, %arg3, 0] : memref<1x64x56x56xf32> -> memref<1x64x56x56xf32> {"forward_kernel_7"}
          FDRA.KernelCall @forward_kernel_7(%5, %6, %7) : (memref<1x64x114x114xf32>, memref<1x64x56x56xf32>, memref<1x64x56x56xf32>) -> ()
          FDRA.BlockStore %7,  %alloc_9 [0, %arg2, %arg3, 0] : memref<1x64x56x56xf32> -> memref<1x64x56x56xf32> {"forward_kernel_7"}
        }
      }
    }
    return %alloc_9 : memref<1x64x56x56xf32>
  }
  func.func @forward_kernel_0(%arg0: memref<1x3x230x230xf32>) attributes {Kernel, forward_kernel_0} {
    %cst = arith.constant 0.000000e+00 : f32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    affine.for %arg1 = 0 to 5 {
      affine.for %arg2 = 0 to 230 {
        affine.store %cst, %arg0[0, 0, %arg1, %arg2] : memref<1x3x230x230xf32>
      }
    }
    return
  }
  func.func @forward_kernel_1(%arg0: memref<1x64x112x112xf32>) attributes {Kernel, forward_kernel_1} {
    %cst = arith.constant 0.000000e+00 : f32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    affine.for %arg1 = 0 to 16 {
      affine.for %arg2 = 0 to 112 {
        affine.store %cst, %arg0[0, 0, %arg1, %arg2] : memref<1x64x112x112xf32>
      }
    }
    return
  }
  func.func @forward_kernel_2(%arg0: memref<1x3x230x230xf32>, %arg1: memref<64x3x7x7xf32>, %arg2: memref<1x64x112x112xf32>, %arg3: memref<1x64x112x112xf32>) attributes {Kernel, forward_kernel_2} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    affine.for %arg4 = 0 to 8 {
      affine.for %arg5 = 0 to 3 {
        affine.for %arg6 = 0 to 7 {
          affine.for %arg7 = 0 to 7 {
            %0 = affine.load %arg0[0, %arg5, %arg6, %arg4 * 2 + %arg7] : memref<1x3x230x230xf32>
            %1 = affine.load %arg1[0, %arg5, %arg6, %arg7] : memref<64x3x7x7xf32>
            %2 = affine.load %arg2[0, 0, 0, %arg4] : memref<1x64x112x112xf32>
            %3 = arith.mulf %0, %1 : f32
            %4 = arith.addf %2, %3 : f32
            affine.store %4, %arg3[0, 0, 0, %arg4] : memref<1x64x112x112xf32>
          }
        }
      }
    }
    return
  }
  func.func @forward_kernel_3(%arg0: memref<1x64x112x112xf32>, %arg1: memref<64xf32>, %arg2: memref<64xf32>, %arg3: memref<64xf32>, %arg4: memref<64xf32>, %arg5: memref<1x64x112x112xf32>) attributes {Kernel, forward_kernel_3} {
    %cst = arith.constant 1.500000e+00 : f32
    %c1597463007_i32 = arith.constant 1597463007 : i32
    %c1_i32 = arith.constant 1 : i32
    %cst_0 = arith.constant 5.000000e-01 : f32
    %cst_1 = arith.constant 1.000000e-05 : f64
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    affine.for %arg6 = 0 to 16 {
      affine.for %arg7 = 0 to 112 {
        %0 = affine.load %arg0[0, 0, %arg6, %arg7] : memref<1x64x112x112xf32>
        %1 = affine.load %arg1[0] : memref<64xf32>
        %2 = affine.load %arg2[0] : memref<64xf32>
        %3 = affine.load %arg3[0] : memref<64xf32>
        %4 = affine.load %arg4[0] : memref<64xf32>
        %5 = arith.truncf %cst_1 : f64 to f32
        %6 = arith.addf %4, %5 : f32
        %7 = arith.mulf %6, %cst_0 : f32
        %8 = arith.bitcast %6 : f32 to i32
        %9 = arith.shrui %8, %c1_i32 : i32
        %10 = arith.subi %c1597463007_i32, %9 : i32
        %11 = arith.bitcast %10 : i32 to f32
        %12 = arith.mulf %11, %11 : f32
        %13 = arith.mulf %12, %7 : f32
        %14 = arith.subf %cst, %13 : f32
        %15 = arith.mulf %14, %12 : f32
        %16 = arith.subf %0, %3 : f32
        %17 = arith.mulf %16, %15 : f32
        %18 = arith.mulf %17, %1 : f32
        %19 = arith.addf %18, %2 : f32
        affine.store %19, %arg5[0, 0, %arg6, %arg7] : memref<1x64x112x112xf32>
      }
    }
    return
  }
  func.func @forward_kernel_4(%arg0: memref<1x64x112x112xf32>, %arg1: memref<1x64x112x112xf32>) attributes {Kernel, forward_kernel_4} {
    %cst = arith.constant 0.000000e+00 : f32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    affine.for %arg2 = 0 to 16 {
      affine.for %arg3 = 0 to 112 {
        %0 = affine.load %arg0[0, 0, %arg2, %arg3] : memref<1x64x112x112xf32>
        %1 = arith.cmpf ugt, %0, %cst : f32
        %2 = arith.select %1, %0, %cst : f32
        affine.store %2, %arg1[0, 0, %arg2, %arg3] : memref<1x64x112x112xf32>
      }
    }
    return
  }
  func.func @forward_kernel_5(%arg0: memref<1x64x114x114xf32>) attributes {Kernel, forward_kernel_5} {
    %cst = arith.constant 0xFF800000 : f32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    affine.for %arg1 = 0 to 6 {
      affine.for %arg2 = 0 to 114 {
        affine.store %cst, %arg0[0, 0, %arg1, %arg2] : memref<1x64x114x114xf32>
      }
    }
    return
  }
  func.func @forward_kernel_6(%arg0: memref<1x64x56x56xf32>) attributes {Kernel, forward_kernel_6} {
    %cst = arith.constant 0xFF800000 : f32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    affine.for %arg1 = 0 to 28 {
      affine.for %arg2 = 0 to 56 {
        affine.store %cst, %arg0[0, 0, %arg1, %arg2] : memref<1x64x56x56xf32>
      }
    }
    return
  }
  func.func @forward_kernel_7(%arg0: memref<1x64x114x114xf32>, %arg1: memref<1x64x56x56xf32>, %arg2: memref<1x64x56x56xf32>) attributes {Kernel, forward_kernel_7} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    affine.for %arg3 = 0 to 4 {
      affine.for %arg4 = 0 to 56 {
        affine.for %arg5 = 0 to 3 {
          affine.for %arg6 = 0 to 3 {
            %0 = affine.load %arg0[0, 0, %arg3 * 2 + %arg5, %arg4 * 2 + %arg6] : memref<1x64x114x114xf32>
            %1 = affine.load %arg1[0, 0, %arg3, %arg4] : memref<1x64x56x56xf32>
            %2 = arith.cmpf ugt, %1, %0 : f32
            %3 = arith.select %2, %1, %0 : f32
            %4 = arith.cmpf uno, %0, %0 : f32
            %5 = arith.select %4, %0, %3 : f32
            affine.store %5, %arg2[0, 0, %arg3, %arg4] : memref<1x64x56x56xf32>
          }
        }
      }
    }
    return
  }
}


// -----// IR Dump After SimplifyAffineStructures (affine-simplify-structures) //----- //
func.func @forward_kernel_0(%arg0: memref<1x3x230x230xf32>) attributes {Kernel, forward_kernel_0} {
  %cst = arith.constant 0.000000e+00 : f32
  cf.br ^bb1
^bb1:  // pred: ^bb0
  affine.for %arg1 = 0 to 5 {
    affine.for %arg2 = 0 to 230 {
      affine.store %cst, %arg0[0, 0, %arg1, %arg2] : memref<1x3x230x230xf32>
    }
  }
  return
}

// -----// IR Dump After SimplifyAffineStructures (affine-simplify-structures) //----- //
func.func @forward_kernel_1(%arg0: memref<1x64x112x112xf32>) attributes {Kernel, forward_kernel_1} {
  %cst = arith.constant 0.000000e+00 : f32
  cf.br ^bb1
^bb1:  // pred: ^bb0
  affine.for %arg1 = 0 to 16 {
    affine.for %arg2 = 0 to 112 {
      affine.store %cst, %arg0[0, 0, %arg1, %arg2] : memref<1x64x112x112xf32>
    }
  }
  return
}

// -----// IR Dump After SimplifyAffineStructures (affine-simplify-structures) //----- //
func.func @forward(%arg0: memref<1x3x224x224xf32>) -> memref<1x64x56x56xf32> {
  %0 = memref.get_global @__constant_64x3x7x7xf32 : memref<64x3x7x7xf32>
  %1 = memref.get_global @__constant_64xf32 : memref<64xf32>
  %2 = memref.get_global @__constant_64xf32_0 : memref<64xf32>
  %3 = memref.get_global @__constant_64xf32_1 : memref<64xf32>
  %4 = memref.get_global @__constant_64xf32_2 : memref<64xf32>
  %alloc = memref.alloc() {alignment = 64 : i64} : memref<1x3x230x230xf32>
  affine.for %arg1 = 0 to 1 {
    affine.for %arg2 = 0 to 3 {
      affine.for %arg3 = 0 to 230 step 5 {
        %5 = FDRA.BlockLoad %alloc [0, %arg2, %arg3, 0] : memref<1x3x230x230xf32> -> memref<1x3x230x230xf32> {"forward_kernel_0"}
        FDRA.KernelCall @forward_kernel_0(%5) : (memref<1x3x230x230xf32>) -> ()
        FDRA.BlockStore %5,  %alloc [0, %arg2, %arg3, 0] : memref<1x3x230x230xf32> -> memref<1x3x230x230xf32> {"forward_kernel_0"}
      }
    }
  }
  %alloc_0 = memref.alloc() {alignment = 64 : i64} : memref<1x3x230x230xf32>
  memref.copy %alloc, %alloc_0 : memref<1x3x230x230xf32> to memref<1x3x230x230xf32>
  %reinterpret_cast = memref.reinterpret_cast %alloc_0 to offset: [693], sizes: [1, 3, 224, 224], strides: [158700, 52900, 230, 1] : memref<1x3x230x230xf32> to memref<1x3x224x224xf32, strided<[158700, 52900, 230, 1], offset: 693>>
  memref.copy %arg0, %reinterpret_cast : memref<1x3x224x224xf32> to memref<1x3x224x224xf32, strided<[158700, 52900, 230, 1], offset: 693>>
  %alloc_1 = memref.alloc() {alignment = 64 : i64} : memref<1x64x112x112xf32>
  affine.for %arg1 = 0 to 1 {
    affine.for %arg2 = 0 to 64 {
      affine.for %arg3 = 0 to 112 step 16 {
        %5 = FDRA.BlockLoad %alloc_1 [0, %arg2, %arg3, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_1"}
        FDRA.KernelCall @forward_kernel_1(%5) : (memref<1x64x112x112xf32>) -> ()
        FDRA.BlockStore %5,  %alloc_1 [0, %arg2, %arg3, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_1"}
      }
    }
  }
  %alloc_2 = memref.alloc() {alignment = 64 : i64} : memref<1x64x112x112xf32>
  memref.copy %alloc_1, %alloc_2 : memref<1x64x112x112xf32> to memref<1x64x112x112xf32>
  affine.for %arg1 = 0 to 1 {
    affine.for %arg2 = 0 to 64 {
      affine.for %arg3 = 0 to 112 {
        affine.for %arg4 = 0 to 112 step 8 {
          %5 = FDRA.BlockLoad %alloc_0 [0, 0, %arg3 * 2, %arg4 * 2] : memref<1x3x230x230xf32> -> memref<1x3x230x230xf32> {"forward_kernel_2"}
          %6 = FDRA.BlockLoad %0 [%arg2, 0, 0, 0] : memref<64x3x7x7xf32> -> memref<64x3x7x7xf32> {"forward_kernel_2"}
          %7 = FDRA.BlockLoad %alloc_2 [0, %arg2, %arg3, %arg4] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_2"}
          %8 = FDRA.BlockLoad %alloc_2 [0, %arg2, %arg3, %arg4] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_2"}
          FDRA.KernelCall @forward_kernel_2(%5, %6, %7, %8) : (memref<1x3x230x230xf32>, memref<64x3x7x7xf32>, memref<1x64x112x112xf32>, memref<1x64x112x112xf32>) -> ()
          FDRA.BlockStore %8,  %alloc_2 [0, %arg2, %arg3, %arg4] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_2"}
        }
      }
    }
  }
  %alloc_3 = memref.alloc() {alignment = 64 : i64} : memref<1x64x112x112xf32>
  affine.for %arg1 = 0 to 1 {
    affine.for %arg2 = 0 to 64 {
      affine.for %arg3 = 0 to 112 step 16 {
        %5 = FDRA.BlockLoad %alloc_2 [0, %arg2, %arg3, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_3"}
        %6 = FDRA.BlockLoad %3 [%arg2] : memref<64xf32> -> memref<64xf32> {"forward_kernel_3"}
        %7 = FDRA.BlockLoad %4 [%arg2] : memref<64xf32> -> memref<64xf32> {"forward_kernel_3"}
        %8 = FDRA.BlockLoad %1 [%arg2] : memref<64xf32> -> memref<64xf32> {"forward_kernel_3"}
        %9 = FDRA.BlockLoad %2 [%arg2] : memref<64xf32> -> memref<64xf32> {"forward_kernel_3"}
        %10 = FDRA.BlockLoad %alloc_3 [0, %arg2, %arg3, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_3"}
        FDRA.KernelCall @forward_kernel_3(%5, %6, %7, %8, %9, %10) : (memref<1x64x112x112xf32>, memref<64xf32>, memref<64xf32>, memref<64xf32>, memref<64xf32>, memref<1x64x112x112xf32>) -> ()
        FDRA.BlockStore %10,  %alloc_3 [0, %arg2, %arg3, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_3"}
      }
    }
  }
  %alloc_4 = memref.alloc() {alignment = 64 : i64} : memref<1x64x112x112xf32>
  affine.for %arg1 = 0 to 1 {
    affine.for %arg2 = 0 to 64 {
      affine.for %arg3 = 0 to 112 step 16 {
        %5 = FDRA.BlockLoad %alloc_3 [0, %arg2, %arg3, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_4"}
        %6 = FDRA.BlockLoad %alloc_4 [0, %arg2, %arg3, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_4"}
        FDRA.KernelCall @forward_kernel_4(%5, %6) : (memref<1x64x112x112xf32>, memref<1x64x112x112xf32>) -> ()
        FDRA.BlockStore %6,  %alloc_4 [0, %arg2, %arg3, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_4"}
      }
    }
  }
  %alloc_5 = memref.alloc() {alignment = 64 : i64} : memref<1x64x114x114xf32>
  affine.for %arg1 = 0 to 1 {
    affine.for %arg2 = 0 to 64 {
      affine.for %arg3 = 0 to 114 step 6 {
        %5 = FDRA.BlockLoad %alloc_5 [0, %arg2, %arg3, 0] : memref<1x64x114x114xf32> -> memref<1x64x114x114xf32> {"forward_kernel_5"}
        FDRA.KernelCall @forward_kernel_5(%5) : (memref<1x64x114x114xf32>) -> ()
        FDRA.BlockStore %5,  %alloc_5 [0, %arg2, %arg3, 0] : memref<1x64x114x114xf32> -> memref<1x64x114x114xf32> {"forward_kernel_5"}
      }
    }
  }
  %alloc_6 = memref.alloc() {alignment = 64 : i64} : memref<1x64x114x114xf32>
  memref.copy %alloc_5, %alloc_6 : memref<1x64x114x114xf32> to memref<1x64x114x114xf32>
  %reinterpret_cast_7 = memref.reinterpret_cast %alloc_6 to offset: [115], sizes: [1, 64, 112, 112], strides: [831744, 12996, 114, 1] : memref<1x64x114x114xf32> to memref<1x64x112x112xf32, strided<[831744, 12996, 114, 1], offset: 115>>
  memref.copy %alloc_4, %reinterpret_cast_7 : memref<1x64x112x112xf32> to memref<1x64x112x112xf32, strided<[831744, 12996, 114, 1], offset: 115>>
  %alloc_8 = memref.alloc() {alignment = 64 : i64} : memref<1x64x56x56xf32>
  affine.for %arg1 = 0 to 1 {
    affine.for %arg2 = 0 to 64 {
      affine.for %arg3 = 0 to 56 step 28 {
        %5 = FDRA.BlockLoad %alloc_8 [0, %arg2, %arg3, 0] : memref<1x64x56x56xf32> -> memref<1x64x56x56xf32> {"forward_kernel_6"}
        FDRA.KernelCall @forward_kernel_6(%5) : (memref<1x64x56x56xf32>) -> ()
        FDRA.BlockStore %5,  %alloc_8 [0, %arg2, %arg3, 0] : memref<1x64x56x56xf32> -> memref<1x64x56x56xf32> {"forward_kernel_6"}
      }
    }
  }
  %alloc_9 = memref.alloc() {alignment = 64 : i64} : memref<1x64x56x56xf32>
  memref.copy %alloc_8, %alloc_9 : memref<1x64x56x56xf32> to memref<1x64x56x56xf32>
  affine.for %arg1 = 0 to 1 {
    affine.for %arg2 = 0 to 64 {
      affine.for %arg3 = 0 to 56 step 4 {
        %5 = FDRA.BlockLoad %alloc_6 [0, %arg2, %arg3 * 2, 0] : memref<1x64x114x114xf32> -> memref<1x64x114x114xf32> {"forward_kernel_7"}
        %6 = FDRA.BlockLoad %alloc_9 [0, %arg2, %arg3, 0] : memref<1x64x56x56xf32> -> memref<1x64x56x56xf32> {"forward_kernel_7"}
        %7 = FDRA.BlockLoad %alloc_9 [0, %arg2, %arg3, 0] : memref<1x64x56x56xf32> -> memref<1x64x56x56xf32> {"forward_kernel_7"}
        FDRA.KernelCall @forward_kernel_7(%5, %6, %7) : (memref<1x64x114x114xf32>, memref<1x64x56x56xf32>, memref<1x64x56x56xf32>) -> ()
        FDRA.BlockStore %7,  %alloc_9 [0, %arg2, %arg3, 0] : memref<1x64x56x56xf32> -> memref<1x64x56x56xf32> {"forward_kernel_7"}
      }
    }
  }
  return %alloc_9 : memref<1x64x56x56xf32>
}

// -----// IR Dump After SimplifyAffineStructures (affine-simplify-structures) //----- //
func.func @forward_kernel_2(%arg0: memref<1x3x230x230xf32>, %arg1: memref<64x3x7x7xf32>, %arg2: memref<1x64x112x112xf32>, %arg3: memref<1x64x112x112xf32>) attributes {Kernel, forward_kernel_2} {
  cf.br ^bb1
^bb1:  // pred: ^bb0
  affine.for %arg4 = 0 to 8 {
    affine.for %arg5 = 0 to 3 {
      affine.for %arg6 = 0 to 7 {
        affine.for %arg7 = 0 to 7 {
          %0 = affine.load %arg0[0, %arg5, %arg6, %arg4 * 2 + %arg7] : memref<1x3x230x230xf32>
          %1 = affine.load %arg1[0, %arg5, %arg6, %arg7] : memref<64x3x7x7xf32>
          %2 = affine.load %arg2[0, 0, 0, %arg4] : memref<1x64x112x112xf32>
          %3 = arith.mulf %0, %1 : f32
          %4 = arith.addf %2, %3 : f32
          affine.store %4, %arg3[0, 0, 0, %arg4] : memref<1x64x112x112xf32>
        }
      }
    }
  }
  return
}

// -----// IR Dump After SimplifyAffineStructures (affine-simplify-structures) //----- //
func.func @forward_kernel_3(%arg0: memref<1x64x112x112xf32>, %arg1: memref<64xf32>, %arg2: memref<64xf32>, %arg3: memref<64xf32>, %arg4: memref<64xf32>, %arg5: memref<1x64x112x112xf32>) attributes {Kernel, forward_kernel_3} {
  %cst = arith.constant 1.500000e+00 : f32
  %c1597463007_i32 = arith.constant 1597463007 : i32
  %c1_i32 = arith.constant 1 : i32
  %cst_0 = arith.constant 5.000000e-01 : f32
  %cst_1 = arith.constant 1.000000e-05 : f64
  cf.br ^bb1
^bb1:  // pred: ^bb0
  affine.for %arg6 = 0 to 16 {
    affine.for %arg7 = 0 to 112 {
      %0 = affine.load %arg0[0, 0, %arg6, %arg7] : memref<1x64x112x112xf32>
      %1 = affine.load %arg1[0] : memref<64xf32>
      %2 = affine.load %arg2[0] : memref<64xf32>
      %3 = affine.load %arg3[0] : memref<64xf32>
      %4 = affine.load %arg4[0] : memref<64xf32>
      %5 = arith.truncf %cst_1 : f64 to f32
      %6 = arith.addf %4, %5 : f32
      %7 = arith.mulf %6, %cst_0 : f32
      %8 = arith.bitcast %6 : f32 to i32
      %9 = arith.shrui %8, %c1_i32 : i32
      %10 = arith.subi %c1597463007_i32, %9 : i32
      %11 = arith.bitcast %10 : i32 to f32
      %12 = arith.mulf %11, %11 : f32
      %13 = arith.mulf %12, %7 : f32
      %14 = arith.subf %cst, %13 : f32
      %15 = arith.mulf %14, %12 : f32
      %16 = arith.subf %0, %3 : f32
      %17 = arith.mulf %16, %15 : f32
      %18 = arith.mulf %17, %1 : f32
      %19 = arith.addf %18, %2 : f32
      affine.store %19, %arg5[0, 0, %arg6, %arg7] : memref<1x64x112x112xf32>
    }
  }
  return
}

// -----// IR Dump After SimplifyAffineStructures (affine-simplify-structures) //----- //
func.func @forward_kernel_4(%arg0: memref<1x64x112x112xf32>, %arg1: memref<1x64x112x112xf32>) attributes {Kernel, forward_kernel_4} {
  %cst = arith.constant 0.000000e+00 : f32
  cf.br ^bb1
^bb1:  // pred: ^bb0
  affine.for %arg2 = 0 to 16 {
    affine.for %arg3 = 0 to 112 {
      %0 = affine.load %arg0[0, 0, %arg2, %arg3] : memref<1x64x112x112xf32>
      %1 = arith.cmpf ugt, %0, %cst : f32
      %2 = arith.select %1, %0, %cst : f32
      affine.store %2, %arg1[0, 0, %arg2, %arg3] : memref<1x64x112x112xf32>
    }
  }
  return
}

// -----// IR Dump After SimplifyAffineStructures (affine-simplify-structures) //----- //
func.func @forward_kernel_5(%arg0: memref<1x64x114x114xf32>) attributes {Kernel, forward_kernel_5} {
  %cst = arith.constant 0xFF800000 : f32
  cf.br ^bb1
^bb1:  // pred: ^bb0
  affine.for %arg1 = 0 to 6 {
    affine.for %arg2 = 0 to 114 {
      affine.store %cst, %arg0[0, 0, %arg1, %arg2] : memref<1x64x114x114xf32>
    }
  }
  return
}

// -----// IR Dump After SimplifyAffineStructures (affine-simplify-structures) //----- //
func.func @forward_kernel_7(%arg0: memref<1x64x114x114xf32>, %arg1: memref<1x64x56x56xf32>, %arg2: memref<1x64x56x56xf32>) attributes {Kernel, forward_kernel_7} {
  cf.br ^bb1
^bb1:  // pred: ^bb0
  affine.for %arg3 = 0 to 4 {
    affine.for %arg4 = 0 to 56 {
      affine.for %arg5 = 0 to 3 {
        affine.for %arg6 = 0 to 3 {
          %0 = affine.load %arg0[0, 0, %arg3 * 2 + %arg5, %arg4 * 2 + %arg6] : memref<1x64x114x114xf32>
          %1 = affine.load %arg1[0, 0, %arg3, %arg4] : memref<1x64x56x56xf32>
          %2 = arith.cmpf ugt, %1, %0 : f32
          %3 = arith.select %2, %1, %0 : f32
          %4 = arith.cmpf uno, %0, %0 : f32
          %5 = arith.select %4, %0, %3 : f32
          affine.store %5, %arg2[0, 0, %arg3, %arg4] : memref<1x64x56x56xf32>
        }
      }
    }
  }
  return
}

// -----// IR Dump After SimplifyAffineStructures (affine-simplify-structures) //----- //
func.func @forward_kernel_6(%arg0: memref<1x64x56x56xf32>) attributes {Kernel, forward_kernel_6} {
  %cst = arith.constant 0xFF800000 : f32
  cf.br ^bb1
^bb1:  // pred: ^bb0
  affine.for %arg1 = 0 to 28 {
    affine.for %arg2 = 0 to 56 {
      affine.store %cst, %arg0[0, 0, %arg1, %arg2] : memref<1x64x56x56xf32>
    }
  }
  return
}

// -----// IR Dump After ConvertAffineToStandard (lower-affine) //----- //
module attributes {torch.debug_module_name = "ResNet"} {
  memref.global "private" constant @__constant_64xf32_2 : memref<64xf32> = dense<[0.230717152, 0.253822476, -1.05429808E-6, -0.664388895, -1.65705547E-8, 0.161521927, 0.454503953, -4.301950e-07, 0.300513744, -8.005240e-06, 0.349418074, 0.311480612, -0.249529764, -3.474890e-05, 0.107726313, 0.218970656, 0.381412596, -0.529882133, -0.628644109, 0.571398079, 0.299846917, 0.584303737, 0.48202154, 0.328526348, 0.196717009, 0.194961801, 0.152145416, 0.085522361, 0.513142824, 0.0152367353, 0.166441768, 0.332394391, 0.249211237, 0.443366677, -0.280169278, -0.0203848016, -2.45068748E-7, 0.321340501, -4.9151744E-8, 0.237767309, 0.232907727, 0.315274626, 0.427762389, 0.293127537, 0.263794243, 0.675975859, 0.429100394, 0.345662743, -8.69090186E-8, 0.247294366, 0.303160846, 0.615772783, 0.39834857, 0.332067341, -0.412187815, 0.378069043, 0.178953409, 0.25747788, -0.449079722, 0.213058949, 0.569339037, 5.727430e-01, -0.402383476, 0.23406373]>
  memref.global "private" constant @__constant_64xf32_1 : memref<64xf32> = dense<[0.234872743, 0.266257942, -5.10959595E-8, 0.518699706, 3.44040196E-9, 0.222385287, 0.422887057, 1.31532403E-7, 0.25093165, 1.5152026E-6, 0.316871643, 0.250491828, 0.378926098, 1.08618351E-5, 2.752640e-01, 0.236741036, 0.242021769, 0.395314813, 0.469346285, 0.2908957, 0.272684187, 0.27802828, 0.290692091, 0.206927493, 0.258990377, 0.278710574, 0.291149527, 0.316013753, 0.388891488, 0.304111898, 0.267757207, 0.210925162, 0.287084132, 0.332426429, 0.42672804, 0.373260558, 7.48037578E-8, 0.19067812, 1.47401256E-8, 0.223029822, 0.179079413, 0.248600766, 0.27399528, 0.259228647, 0.294202209, 0.299236417, 0.223688841, 0.262799472, 2.20011476E-8, 0.266098082, 0.220890298, 0.284285516, 0.330723315, 0.226809531, 0.365380913, 0.21229881, 0.239653021, 0.24949576, 0.525830686, 0.248247579, 0.295652747, 0.258776665, 0.4832564, 0.26670444]>
  memref.global "private" constant @__constant_64xf32_0 : memref<64xf32> = dense<[1.01694489, 3.71674347, 5.81334356E-11, 3.28254271, 1.71074404E-13, 0.658226967, 4.37006235, 6.60045282E-12, 0.915522992, 1.93175254E-9, 4.12558556, 2.74399233, 2.8390913, 4.79658588E-8, 11.0722713, 0.500745952, 2.23128176, 4.82570696, 2.69861364, 9.36995506, 3.73391747, 5.48429585, 5.7126689, 0.445444882, 0.436275303, 7.15633583, 13.7179089, 5.25117493, 6.81737518, 1.67235756, 1.65343034, 1.23245978, 4.90762854, 3.07305121, 4.23838568, 4.99363518, 1.44646307E-12, 1.52116203, 1.03519833E-13, 0.351344079, 0.17024748, 1.42054474, 1.90848303, 2.15124035, 2.66084933, 4.84443378, 1.92971194, 1.49994361, 2.94806145E-13, 1.53064024, 0.365027189, 2.93755412, 5.46641159, 0.707924544, 3.33150721, 0.771802961, 2.40678358, 6.5213666, 4.12625027, 1.05063522, 2.95303202, 11.3656216, 4.76904678, 1.65587807]>
  memref.global "private" constant @__constant_64xf32 : memref<64xf32> = dense<[0.00276811025, -0.0257689245, 2.12544663E-7, -0.0846051499, 2.11205915E-8, 4.96906461E-4, -0.0224083271, -1.15818956E-7, -4.823850e-03, 2.75073347E-7, 3.958230e-02, 0.0319936387, -0.0374896601, -1.37163477E-6, 0.00660019321, 4.378190e-03, 0.0647971481, 0.11175999, 0.0360015705, -0.0750752166, -0.03824009, 0.0843578502, -5.228700e-02, -0.0117988894, 0.00130188058, 0.0321722962, -0.0177843049, -0.0910085887, 0.113187239, -0.0416320041, 0.00873024761, 0.0296931695, -0.0705021694, -0.00348469778, 0.109771468, -0.00173411821, -5.94229412E-8, 0.0293303896, -7.85527287E-9, 0.00673204474, -0.00370999542, 0.0160279572, -0.0278826058, 0.0265925378, 0.0284745526, -0.12734659, 0.0446168408, 0.0263288375, 2.14538591E-8, -1.704500e-02, -0.00356168114, -0.0458412617, 0.0638761446, 0.0152198272, -0.0385114551, -0.0164278317, -0.016568929, 0.0560574941, -0.0803062319, -0.00266457512, -0.0417176671, 0.126112729, -0.0492369682, -0.0132609205]>
  memref.global "private" constant @__constant_64x3x7x7xf32 : memref<64x3x7x7xf32> = dense<"
  ml_program.global private mutable @global_seed(dense<0> : tensor<i64>) : tensor<i64>
  func.func @forward(%arg0: memref<1x3x224x224xf32>) -> memref<1x64x56x56xf32> {
    %0 = memref.get_global @__constant_64x3x7x7xf32 : memref<64x3x7x7xf32>
    %1 = memref.get_global @__constant_64xf32 : memref<64xf32>
    %2 = memref.get_global @__constant_64xf32_0 : memref<64xf32>
    %3 = memref.get_global @__constant_64xf32_1 : memref<64xf32>
    %4 = memref.get_global @__constant_64xf32_2 : memref<64xf32>
    %alloc = memref.alloc() {alignment = 64 : i64} : memref<1x3x230x230xf32>
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c1_0 = arith.constant 1 : index
    scf.for %arg1 = %c0 to %c1 step %c1_0 {
      %c0_32 = arith.constant 0 : index
      %c3 = arith.constant 3 : index
      %c1_33 = arith.constant 1 : index
      scf.for %arg2 = %c0_32 to %c3 step %c1_33 {
        %c0_34 = arith.constant 0 : index
        %c230 = arith.constant 230 : index
        %c5 = arith.constant 5 : index
        scf.for %arg3 = %c0_34 to %c230 step %c5 {
          %5 = FDRA.BlockLoad %alloc [0, %arg2, %arg3, 0] : memref<1x3x230x230xf32> -> memref<1x3x230x230xf32> {"forward_kernel_0"}
          FDRA.KernelCall @forward_kernel_0(%5) : (memref<1x3x230x230xf32>) -> ()
          FDRA.BlockStore %5,  %alloc [0, %arg2, %arg3, 0] : memref<1x3x230x230xf32> -> memref<1x3x230x230xf32> {"forward_kernel_0"}
        }
      }
    }
    %alloc_1 = memref.alloc() {alignment = 64 : i64} : memref<1x3x230x230xf32>
    memref.copy %alloc, %alloc_1 : memref<1x3x230x230xf32> to memref<1x3x230x230xf32>
    %reinterpret_cast = memref.reinterpret_cast %alloc_1 to offset: [693], sizes: [1, 3, 224, 224], strides: [158700, 52900, 230, 1] : memref<1x3x230x230xf32> to memref<1x3x224x224xf32, strided<[158700, 52900, 230, 1], offset: 693>>
    memref.copy %arg0, %reinterpret_cast : memref<1x3x224x224xf32> to memref<1x3x224x224xf32, strided<[158700, 52900, 230, 1], offset: 693>>
    %alloc_2 = memref.alloc() {alignment = 64 : i64} : memref<1x64x112x112xf32>
    %c0_3 = arith.constant 0 : index
    %c1_4 = arith.constant 1 : index
    %c1_5 = arith.constant 1 : index
    scf.for %arg1 = %c0_3 to %c1_4 step %c1_5 {
      %c0_32 = arith.constant 0 : index
      %c64 = arith.constant 64 : index
      %c1_33 = arith.constant 1 : index
      scf.for %arg2 = %c0_32 to %c64 step %c1_33 {
        %c0_34 = arith.constant 0 : index
        %c112 = arith.constant 112 : index
        %c16 = arith.constant 16 : index
        scf.for %arg3 = %c0_34 to %c112 step %c16 {
          %5 = FDRA.BlockLoad %alloc_2 [0, %arg2, %arg3, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_1"}
          FDRA.KernelCall @forward_kernel_1(%5) : (memref<1x64x112x112xf32>) -> ()
          FDRA.BlockStore %5,  %alloc_2 [0, %arg2, %arg3, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_1"}
        }
      }
    }
    %alloc_6 = memref.alloc() {alignment = 64 : i64} : memref<1x64x112x112xf32>
    memref.copy %alloc_2, %alloc_6 : memref<1x64x112x112xf32> to memref<1x64x112x112xf32>
    %c0_7 = arith.constant 0 : index
    %c1_8 = arith.constant 1 : index
    %c1_9 = arith.constant 1 : index
    scf.for %arg1 = %c0_7 to %c1_8 step %c1_9 {
      %c0_32 = arith.constant 0 : index
      %c64 = arith.constant 64 : index
      %c1_33 = arith.constant 1 : index
      scf.for %arg2 = %c0_32 to %c64 step %c1_33 {
        %c0_34 = arith.constant 0 : index
        %c112 = arith.constant 112 : index
        %c1_35 = arith.constant 1 : index
        scf.for %arg3 = %c0_34 to %c112 step %c1_35 {
          %c0_36 = arith.constant 0 : index
          %c112_37 = arith.constant 112 : index
          %c8 = arith.constant 8 : index
          scf.for %arg4 = %c0_36 to %c112_37 step %c8 {
            %5 = FDRA.BlockLoad %alloc_1 [0, 0, %arg3 * 2, %arg4 * 2] : memref<1x3x230x230xf32> -> memref<1x3x230x230xf32> {"forward_kernel_2"}
            %6 = FDRA.BlockLoad %0 [%arg2, 0, 0, 0] : memref<64x3x7x7xf32> -> memref<64x3x7x7xf32> {"forward_kernel_2"}
            %7 = FDRA.BlockLoad %alloc_6 [0, %arg2, %arg3, %arg4] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_2"}
            %8 = FDRA.BlockLoad %alloc_6 [0, %arg2, %arg3, %arg4] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_2"}
            FDRA.KernelCall @forward_kernel_2(%5, %6, %7, %8) : (memref<1x3x230x230xf32>, memref<64x3x7x7xf32>, memref<1x64x112x112xf32>, memref<1x64x112x112xf32>) -> ()
            FDRA.BlockStore %8,  %alloc_6 [0, %arg2, %arg3, %arg4] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_2"}
          }
        }
      }
    }
    %alloc_10 = memref.alloc() {alignment = 64 : i64} : memref<1x64x112x112xf32>
    %c0_11 = arith.constant 0 : index
    %c1_12 = arith.constant 1 : index
    %c1_13 = arith.constant 1 : index
    scf.for %arg1 = %c0_11 to %c1_12 step %c1_13 {
      %c0_32 = arith.constant 0 : index
      %c64 = arith.constant 64 : index
      %c1_33 = arith.constant 1 : index
      scf.for %arg2 = %c0_32 to %c64 step %c1_33 {
        %c0_34 = arith.constant 0 : index
        %c112 = arith.constant 112 : index
        %c16 = arith.constant 16 : index
        scf.for %arg3 = %c0_34 to %c112 step %c16 {
          %5 = FDRA.BlockLoad %alloc_6 [0, %arg2, %arg3, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_3"}
          %6 = FDRA.BlockLoad %3 [%arg2] : memref<64xf32> -> memref<64xf32> {"forward_kernel_3"}
          %7 = FDRA.BlockLoad %4 [%arg2] : memref<64xf32> -> memref<64xf32> {"forward_kernel_3"}
          %8 = FDRA.BlockLoad %1 [%arg2] : memref<64xf32> -> memref<64xf32> {"forward_kernel_3"}
          %9 = FDRA.BlockLoad %2 [%arg2] : memref<64xf32> -> memref<64xf32> {"forward_kernel_3"}
          %10 = FDRA.BlockLoad %alloc_10 [0, %arg2, %arg3, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_3"}
          FDRA.KernelCall @forward_kernel_3(%5, %6, %7, %8, %9, %10) : (memref<1x64x112x112xf32>, memref<64xf32>, memref<64xf32>, memref<64xf32>, memref<64xf32>, memref<1x64x112x112xf32>) -> ()
          FDRA.BlockStore %10,  %alloc_10 [0, %arg2, %arg3, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_3"}
        }
      }
    }
    %alloc_14 = memref.alloc() {alignment = 64 : i64} : memref<1x64x112x112xf32>
    %c0_15 = arith.constant 0 : index
    %c1_16 = arith.constant 1 : index
    %c1_17 = arith.constant 1 : index
    scf.for %arg1 = %c0_15 to %c1_16 step %c1_17 {
      %c0_32 = arith.constant 0 : index
      %c64 = arith.constant 64 : index
      %c1_33 = arith.constant 1 : index
      scf.for %arg2 = %c0_32 to %c64 step %c1_33 {
        %c0_34 = arith.constant 0 : index
        %c112 = arith.constant 112 : index
        %c16 = arith.constant 16 : index
        scf.for %arg3 = %c0_34 to %c112 step %c16 {
          %5 = FDRA.BlockLoad %alloc_10 [0, %arg2, %arg3, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_4"}
          %6 = FDRA.BlockLoad %alloc_14 [0, %arg2, %arg3, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_4"}
          FDRA.KernelCall @forward_kernel_4(%5, %6) : (memref<1x64x112x112xf32>, memref<1x64x112x112xf32>) -> ()
          FDRA.BlockStore %6,  %alloc_14 [0, %arg2, %arg3, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_4"}
        }
      }
    }
    %alloc_18 = memref.alloc() {alignment = 64 : i64} : memref<1x64x114x114xf32>
    %c0_19 = arith.constant 0 : index
    %c1_20 = arith.constant 1 : index
    %c1_21 = arith.constant 1 : index
    scf.for %arg1 = %c0_19 to %c1_20 step %c1_21 {
      %c0_32 = arith.constant 0 : index
      %c64 = arith.constant 64 : index
      %c1_33 = arith.constant 1 : index
      scf.for %arg2 = %c0_32 to %c64 step %c1_33 {
        %c0_34 = arith.constant 0 : index
        %c114 = arith.constant 114 : index
        %c6 = arith.constant 6 : index
        scf.for %arg3 = %c0_34 to %c114 step %c6 {
          %5 = FDRA.BlockLoad %alloc_18 [0, %arg2, %arg3, 0] : memref<1x64x114x114xf32> -> memref<1x64x114x114xf32> {"forward_kernel_5"}
          FDRA.KernelCall @forward_kernel_5(%5) : (memref<1x64x114x114xf32>) -> ()
          FDRA.BlockStore %5,  %alloc_18 [0, %arg2, %arg3, 0] : memref<1x64x114x114xf32> -> memref<1x64x114x114xf32> {"forward_kernel_5"}
        }
      }
    }
    %alloc_22 = memref.alloc() {alignment = 64 : i64} : memref<1x64x114x114xf32>
    memref.copy %alloc_18, %alloc_22 : memref<1x64x114x114xf32> to memref<1x64x114x114xf32>
    %reinterpret_cast_23 = memref.reinterpret_cast %alloc_22 to offset: [115], sizes: [1, 64, 112, 112], strides: [831744, 12996, 114, 1] : memref<1x64x114x114xf32> to memref<1x64x112x112xf32, strided<[831744, 12996, 114, 1], offset: 115>>
    memref.copy %alloc_14, %reinterpret_cast_23 : memref<1x64x112x112xf32> to memref<1x64x112x112xf32, strided<[831744, 12996, 114, 1], offset: 115>>
    %alloc_24 = memref.alloc() {alignment = 64 : i64} : memref<1x64x56x56xf32>
    %c0_25 = arith.constant 0 : index
    %c1_26 = arith.constant 1 : index
    %c1_27 = arith.constant 1 : index
    scf.for %arg1 = %c0_25 to %c1_26 step %c1_27 {
      %c0_32 = arith.constant 0 : index
      %c64 = arith.constant 64 : index
      %c1_33 = arith.constant 1 : index
      scf.for %arg2 = %c0_32 to %c64 step %c1_33 {
        %c0_34 = arith.constant 0 : index
        %c56 = arith.constant 56 : index
        %c28 = arith.constant 28 : index
        scf.for %arg3 = %c0_34 to %c56 step %c28 {
          %5 = FDRA.BlockLoad %alloc_24 [0, %arg2, %arg3, 0] : memref<1x64x56x56xf32> -> memref<1x64x56x56xf32> {"forward_kernel_6"}
          FDRA.KernelCall @forward_kernel_6(%5) : (memref<1x64x56x56xf32>) -> ()
          FDRA.BlockStore %5,  %alloc_24 [0, %arg2, %arg3, 0] : memref<1x64x56x56xf32> -> memref<1x64x56x56xf32> {"forward_kernel_6"}
        }
      }
    }
    %alloc_28 = memref.alloc() {alignment = 64 : i64} : memref<1x64x56x56xf32>
    memref.copy %alloc_24, %alloc_28 : memref<1x64x56x56xf32> to memref<1x64x56x56xf32>
    %c0_29 = arith.constant 0 : index
    %c1_30 = arith.constant 1 : index
    %c1_31 = arith.constant 1 : index
    scf.for %arg1 = %c0_29 to %c1_30 step %c1_31 {
      %c0_32 = arith.constant 0 : index
      %c64 = arith.constant 64 : index
      %c1_33 = arith.constant 1 : index
      scf.for %arg2 = %c0_32 to %c64 step %c1_33 {
        %c0_34 = arith.constant 0 : index
        %c56 = arith.constant 56 : index
        %c4 = arith.constant 4 : index
        scf.for %arg3 = %c0_34 to %c56 step %c4 {
          %5 = FDRA.BlockLoad %alloc_22 [0, %arg2, %arg3 * 2, 0] : memref<1x64x114x114xf32> -> memref<1x64x114x114xf32> {"forward_kernel_7"}
          %6 = FDRA.BlockLoad %alloc_28 [0, %arg2, %arg3, 0] : memref<1x64x56x56xf32> -> memref<1x64x56x56xf32> {"forward_kernel_7"}
          %7 = FDRA.BlockLoad %alloc_28 [0, %arg2, %arg3, 0] : memref<1x64x56x56xf32> -> memref<1x64x56x56xf32> {"forward_kernel_7"}
          FDRA.KernelCall @forward_kernel_7(%5, %6, %7) : (memref<1x64x114x114xf32>, memref<1x64x56x56xf32>, memref<1x64x56x56xf32>) -> ()
          FDRA.BlockStore %7,  %alloc_28 [0, %arg2, %arg3, 0] : memref<1x64x56x56xf32> -> memref<1x64x56x56xf32> {"forward_kernel_7"}
        }
      }
    }
    return %alloc_28 : memref<1x64x56x56xf32>
  }
  func.func @forward_kernel_0(%arg0: memref<1x3x230x230xf32>) attributes {Kernel, forward_kernel_0} {
    %cst = arith.constant 0.000000e+00 : f32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0 = arith.constant 0 : index
    %c5 = arith.constant 5 : index
    %c1 = arith.constant 1 : index
    scf.for %arg1 = %c0 to %c5 step %c1 {
      %c0_0 = arith.constant 0 : index
      %c230 = arith.constant 230 : index
      %c1_1 = arith.constant 1 : index
      scf.for %arg2 = %c0_0 to %c230 step %c1_1 {
        %c0_2 = arith.constant 0 : index
        %c0_3 = arith.constant 0 : index
        memref.store %cst, %arg0[%c0_2, %c0_3, %arg1, %arg2] : memref<1x3x230x230xf32>
      }
    }
    return
  }
  func.func @forward_kernel_1(%arg0: memref<1x64x112x112xf32>) attributes {Kernel, forward_kernel_1} {
    %cst = arith.constant 0.000000e+00 : f32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0 = arith.constant 0 : index
    %c16 = arith.constant 16 : index
    %c1 = arith.constant 1 : index
    scf.for %arg1 = %c0 to %c16 step %c1 {
      %c0_0 = arith.constant 0 : index
      %c112 = arith.constant 112 : index
      %c1_1 = arith.constant 1 : index
      scf.for %arg2 = %c0_0 to %c112 step %c1_1 {
        %c0_2 = arith.constant 0 : index
        %c0_3 = arith.constant 0 : index
        memref.store %cst, %arg0[%c0_2, %c0_3, %arg1, %arg2] : memref<1x64x112x112xf32>
      }
    }
    return
  }
  func.func @forward_kernel_2(%arg0: memref<1x3x230x230xf32>, %arg1: memref<64x3x7x7xf32>, %arg2: memref<1x64x112x112xf32>, %arg3: memref<1x64x112x112xf32>) attributes {Kernel, forward_kernel_2} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0 = arith.constant 0 : index
    %c8 = arith.constant 8 : index
    %c1 = arith.constant 1 : index
    scf.for %arg4 = %c0 to %c8 step %c1 {
      %c0_0 = arith.constant 0 : index
      %c3 = arith.constant 3 : index
      %c1_1 = arith.constant 1 : index
      scf.for %arg5 = %c0_0 to %c3 step %c1_1 {
        %c0_2 = arith.constant 0 : index
        %c7 = arith.constant 7 : index
        %c1_3 = arith.constant 1 : index
        scf.for %arg6 = %c0_2 to %c7 step %c1_3 {
          %c0_4 = arith.constant 0 : index
          %c7_5 = arith.constant 7 : index
          %c1_6 = arith.constant 1 : index
          scf.for %arg7 = %c0_4 to %c7_5 step %c1_6 {
            %c0_7 = arith.constant 0 : index
            %c2 = arith.constant 2 : index
            %0 = arith.muli %arg4, %c2 : index
            %1 = arith.addi %0, %arg7 : index
            %2 = memref.load %arg0[%c0_7, %arg5, %arg6, %1] : memref<1x3x230x230xf32>
            %c0_8 = arith.constant 0 : index
            %3 = memref.load %arg1[%c0_8, %arg5, %arg6, %arg7] : memref<64x3x7x7xf32>
            %c0_9 = arith.constant 0 : index
            %c0_10 = arith.constant 0 : index
            %c0_11 = arith.constant 0 : index
            %4 = memref.load %arg2[%c0_9, %c0_10, %c0_11, %arg4] : memref<1x64x112x112xf32>
            %5 = arith.mulf %2, %3 : f32
            %6 = arith.addf %4, %5 : f32
            %c0_12 = arith.constant 0 : index
            %c0_13 = arith.constant 0 : index
            %c0_14 = arith.constant 0 : index
            memref.store %6, %arg3[%c0_12, %c0_13, %c0_14, %arg4] : memref<1x64x112x112xf32>
          }
        }
      }
    }
    return
  }
  func.func @forward_kernel_3(%arg0: memref<1x64x112x112xf32>, %arg1: memref<64xf32>, %arg2: memref<64xf32>, %arg3: memref<64xf32>, %arg4: memref<64xf32>, %arg5: memref<1x64x112x112xf32>) attributes {Kernel, forward_kernel_3} {
    %cst = arith.constant 1.500000e+00 : f32
    %c1597463007_i32 = arith.constant 1597463007 : i32
    %c1_i32 = arith.constant 1 : i32
    %cst_0 = arith.constant 5.000000e-01 : f32
    %cst_1 = arith.constant 1.000000e-05 : f64
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0 = arith.constant 0 : index
    %c16 = arith.constant 16 : index
    %c1 = arith.constant 1 : index
    scf.for %arg6 = %c0 to %c16 step %c1 {
      %c0_2 = arith.constant 0 : index
      %c112 = arith.constant 112 : index
      %c1_3 = arith.constant 1 : index
      scf.for %arg7 = %c0_2 to %c112 step %c1_3 {
        %c0_4 = arith.constant 0 : index
        %c0_5 = arith.constant 0 : index
        %0 = memref.load %arg0[%c0_4, %c0_5, %arg6, %arg7] : memref<1x64x112x112xf32>
        %c0_6 = arith.constant 0 : index
        %1 = memref.load %arg1[%c0_6] : memref<64xf32>
        %c0_7 = arith.constant 0 : index
        %2 = memref.load %arg2[%c0_7] : memref<64xf32>
        %c0_8 = arith.constant 0 : index
        %3 = memref.load %arg3[%c0_8] : memref<64xf32>
        %c0_9 = arith.constant 0 : index
        %4 = memref.load %arg4[%c0_9] : memref<64xf32>
        %5 = arith.truncf %cst_1 : f64 to f32
        %6 = arith.addf %4, %5 : f32
        %7 = arith.mulf %6, %cst_0 : f32
        %8 = arith.bitcast %6 : f32 to i32
        %9 = arith.shrui %8, %c1_i32 : i32
        %10 = arith.subi %c1597463007_i32, %9 : i32
        %11 = arith.bitcast %10 : i32 to f32
        %12 = arith.mulf %11, %11 : f32
        %13 = arith.mulf %12, %7 : f32
        %14 = arith.subf %cst, %13 : f32
        %15 = arith.mulf %14, %12 : f32
        %16 = arith.subf %0, %3 : f32
        %17 = arith.mulf %16, %15 : f32
        %18 = arith.mulf %17, %1 : f32
        %19 = arith.addf %18, %2 : f32
        %c0_10 = arith.constant 0 : index
        %c0_11 = arith.constant 0 : index
        memref.store %19, %arg5[%c0_10, %c0_11, %arg6, %arg7] : memref<1x64x112x112xf32>
      }
    }
    return
  }
  func.func @forward_kernel_4(%arg0: memref<1x64x112x112xf32>, %arg1: memref<1x64x112x112xf32>) attributes {Kernel, forward_kernel_4} {
    %cst = arith.constant 0.000000e+00 : f32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0 = arith.constant 0 : index
    %c16 = arith.constant 16 : index
    %c1 = arith.constant 1 : index
    scf.for %arg2 = %c0 to %c16 step %c1 {
      %c0_0 = arith.constant 0 : index
      %c112 = arith.constant 112 : index
      %c1_1 = arith.constant 1 : index
      scf.for %arg3 = %c0_0 to %c112 step %c1_1 {
        %c0_2 = arith.constant 0 : index
        %c0_3 = arith.constant 0 : index
        %0 = memref.load %arg0[%c0_2, %c0_3, %arg2, %arg3] : memref<1x64x112x112xf32>
        %1 = arith.cmpf ugt, %0, %cst : f32
        %2 = arith.select %1, %0, %cst : f32
        %c0_4 = arith.constant 0 : index
        %c0_5 = arith.constant 0 : index
        memref.store %2, %arg1[%c0_4, %c0_5, %arg2, %arg3] : memref<1x64x112x112xf32>
      }
    }
    return
  }
  func.func @forward_kernel_5(%arg0: memref<1x64x114x114xf32>) attributes {Kernel, forward_kernel_5} {
    %cst = arith.constant 0xFF800000 : f32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0 = arith.constant 0 : index
    %c6 = arith.constant 6 : index
    %c1 = arith.constant 1 : index
    scf.for %arg1 = %c0 to %c6 step %c1 {
      %c0_0 = arith.constant 0 : index
      %c114 = arith.constant 114 : index
      %c1_1 = arith.constant 1 : index
      scf.for %arg2 = %c0_0 to %c114 step %c1_1 {
        %c0_2 = arith.constant 0 : index
        %c0_3 = arith.constant 0 : index
        memref.store %cst, %arg0[%c0_2, %c0_3, %arg1, %arg2] : memref<1x64x114x114xf32>
      }
    }
    return
  }
  func.func @forward_kernel_6(%arg0: memref<1x64x56x56xf32>) attributes {Kernel, forward_kernel_6} {
    %cst = arith.constant 0xFF800000 : f32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0 = arith.constant 0 : index
    %c28 = arith.constant 28 : index
    %c1 = arith.constant 1 : index
    scf.for %arg1 = %c0 to %c28 step %c1 {
      %c0_0 = arith.constant 0 : index
      %c56 = arith.constant 56 : index
      %c1_1 = arith.constant 1 : index
      scf.for %arg2 = %c0_0 to %c56 step %c1_1 {
        %c0_2 = arith.constant 0 : index
        %c0_3 = arith.constant 0 : index
        memref.store %cst, %arg0[%c0_2, %c0_3, %arg1, %arg2] : memref<1x64x56x56xf32>
      }
    }
    return
  }
  func.func @forward_kernel_7(%arg0: memref<1x64x114x114xf32>, %arg1: memref<1x64x56x56xf32>, %arg2: memref<1x64x56x56xf32>) attributes {Kernel, forward_kernel_7} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0 = arith.constant 0 : index
    %c4 = arith.constant 4 : index
    %c1 = arith.constant 1 : index
    scf.for %arg3 = %c0 to %c4 step %c1 {
      %c0_0 = arith.constant 0 : index
      %c56 = arith.constant 56 : index
      %c1_1 = arith.constant 1 : index
      scf.for %arg4 = %c0_0 to %c56 step %c1_1 {
        %c0_2 = arith.constant 0 : index
        %c3 = arith.constant 3 : index
        %c1_3 = arith.constant 1 : index
        scf.for %arg5 = %c0_2 to %c3 step %c1_3 {
          %c0_4 = arith.constant 0 : index
          %c3_5 = arith.constant 3 : index
          %c1_6 = arith.constant 1 : index
          scf.for %arg6 = %c0_4 to %c3_5 step %c1_6 {
            %c0_7 = arith.constant 0 : index
            %c0_8 = arith.constant 0 : index
            %c2 = arith.constant 2 : index
            %0 = arith.muli %arg3, %c2 : index
            %1 = arith.addi %0, %arg5 : index
            %c2_9 = arith.constant 2 : index
            %2 = arith.muli %arg4, %c2_9 : index
            %3 = arith.addi %2, %arg6 : index
            %4 = memref.load %arg0[%c0_7, %c0_8, %1, %3] : memref<1x64x114x114xf32>
            %c0_10 = arith.constant 0 : index
            %c0_11 = arith.constant 0 : index
            %5 = memref.load %arg1[%c0_10, %c0_11, %arg3, %arg4] : memref<1x64x56x56xf32>
            %6 = arith.cmpf ugt, %5, %4 : f32
            %7 = arith.select %6, %5, %4 : f32
            %8 = arith.cmpf uno, %4, %4 : f32
            %9 = arith.select %8, %4, %7 : f32
            %c0_12 = arith.constant 0 : index
            %c0_13 = arith.constant 0 : index
            memref.store %9, %arg2[%c0_12, %c0_13, %arg3, %arg4] : memref<1x64x56x56xf32>
          }
        }
      }
    }
    return
  }
}


// -----// IR Dump After SCFForLoopCanonicalization (scf-for-loop-canonicalization) //----- //
module attributes {torch.debug_module_name = "ResNet"} {
  memref.global "private" constant @__constant_64xf32_2 : memref<64xf32> = dense<[0.230717152, 0.253822476, -1.05429808E-6, -0.664388895, -1.65705547E-8, 0.161521927, 0.454503953, -4.301950e-07, 0.300513744, -8.005240e-06, 0.349418074, 0.311480612, -0.249529764, -3.474890e-05, 0.107726313, 0.218970656, 0.381412596, -0.529882133, -0.628644109, 0.571398079, 0.299846917, 0.584303737, 0.48202154, 0.328526348, 0.196717009, 0.194961801, 0.152145416, 0.085522361, 0.513142824, 0.0152367353, 0.166441768, 0.332394391, 0.249211237, 0.443366677, -0.280169278, -0.0203848016, -2.45068748E-7, 0.321340501, -4.9151744E-8, 0.237767309, 0.232907727, 0.315274626, 0.427762389, 0.293127537, 0.263794243, 0.675975859, 0.429100394, 0.345662743, -8.69090186E-8, 0.247294366, 0.303160846, 0.615772783, 0.39834857, 0.332067341, -0.412187815, 0.378069043, 0.178953409, 0.25747788, -0.449079722, 0.213058949, 0.569339037, 5.727430e-01, -0.402383476, 0.23406373]>
  memref.global "private" constant @__constant_64xf32_1 : memref<64xf32> = dense<[0.234872743, 0.266257942, -5.10959595E-8, 0.518699706, 3.44040196E-9, 0.222385287, 0.422887057, 1.31532403E-7, 0.25093165, 1.5152026E-6, 0.316871643, 0.250491828, 0.378926098, 1.08618351E-5, 2.752640e-01, 0.236741036, 0.242021769, 0.395314813, 0.469346285, 0.2908957, 0.272684187, 0.27802828, 0.290692091, 0.206927493, 0.258990377, 0.278710574, 0.291149527, 0.316013753, 0.388891488, 0.304111898, 0.267757207, 0.210925162, 0.287084132, 0.332426429, 0.42672804, 0.373260558, 7.48037578E-8, 0.19067812, 1.47401256E-8, 0.223029822, 0.179079413, 0.248600766, 0.27399528, 0.259228647, 0.294202209, 0.299236417, 0.223688841, 0.262799472, 2.20011476E-8, 0.266098082, 0.220890298, 0.284285516, 0.330723315, 0.226809531, 0.365380913, 0.21229881, 0.239653021, 0.24949576, 0.525830686, 0.248247579, 0.295652747, 0.258776665, 0.4832564, 0.26670444]>
  memref.global "private" constant @__constant_64xf32_0 : memref<64xf32> = dense<[1.01694489, 3.71674347, 5.81334356E-11, 3.28254271, 1.71074404E-13, 0.658226967, 4.37006235, 6.60045282E-12, 0.915522992, 1.93175254E-9, 4.12558556, 2.74399233, 2.8390913, 4.79658588E-8, 11.0722713, 0.500745952, 2.23128176, 4.82570696, 2.69861364, 9.36995506, 3.73391747, 5.48429585, 5.7126689, 0.445444882, 0.436275303, 7.15633583, 13.7179089, 5.25117493, 6.81737518, 1.67235756, 1.65343034, 1.23245978, 4.90762854, 3.07305121, 4.23838568, 4.99363518, 1.44646307E-12, 1.52116203, 1.03519833E-13, 0.351344079, 0.17024748, 1.42054474, 1.90848303, 2.15124035, 2.66084933, 4.84443378, 1.92971194, 1.49994361, 2.94806145E-13, 1.53064024, 0.365027189, 2.93755412, 5.46641159, 0.707924544, 3.33150721, 0.771802961, 2.40678358, 6.5213666, 4.12625027, 1.05063522, 2.95303202, 11.3656216, 4.76904678, 1.65587807]>
  memref.global "private" constant @__constant_64xf32 : memref<64xf32> = dense<[0.00276811025, -0.0257689245, 2.12544663E-7, -0.0846051499, 2.11205915E-8, 4.96906461E-4, -0.0224083271, -1.15818956E-7, -4.823850e-03, 2.75073347E-7, 3.958230e-02, 0.0319936387, -0.0374896601, -1.37163477E-6, 0.00660019321, 4.378190e-03, 0.0647971481, 0.11175999, 0.0360015705, -0.0750752166, -0.03824009, 0.0843578502, -5.228700e-02, -0.0117988894, 0.00130188058, 0.0321722962, -0.0177843049, -0.0910085887, 0.113187239, -0.0416320041, 0.00873024761, 0.0296931695, -0.0705021694, -0.00348469778, 0.109771468, -0.00173411821, -5.94229412E-8, 0.0293303896, -7.85527287E-9, 0.00673204474, -0.00370999542, 0.0160279572, -0.0278826058, 0.0265925378, 0.0284745526, -0.12734659, 0.0446168408, 0.0263288375, 2.14538591E-8, -1.704500e-02, -0.00356168114, -0.0458412617, 0.0638761446, 0.0152198272, -0.0385114551, -0.0164278317, -0.016568929, 0.0560574941, -0.0803062319, -0.00266457512, -0.0417176671, 0.126112729, -0.0492369682, -0.0132609205]>
  memref.global "private" constant @__constant_64x3x7x7xf32 : memref<64x3x7x7xf32> = dense<"
  ml_program.global private mutable @global_seed(dense<0> : tensor<i64>) : tensor<i64>
  func.func @forward(%arg0: memref<1x3x224x224xf32>) -> memref<1x64x56x56xf32> {
    %c4 = arith.constant 4 : index
    %c28 = arith.constant 28 : index
    %c56 = arith.constant 56 : index
    %c6 = arith.constant 6 : index
    %c114 = arith.constant 114 : index
    %c8 = arith.constant 8 : index
    %c16 = arith.constant 16 : index
    %c112 = arith.constant 112 : index
    %c64 = arith.constant 64 : index
    %c5 = arith.constant 5 : index
    %c230 = arith.constant 230 : index
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %0 = memref.get_global @__constant_64x3x7x7xf32 : memref<64x3x7x7xf32>
    %1 = memref.get_global @__constant_64xf32 : memref<64xf32>
    %2 = memref.get_global @__constant_64xf32_0 : memref<64xf32>
    %3 = memref.get_global @__constant_64xf32_1 : memref<64xf32>
    %4 = memref.get_global @__constant_64xf32_2 : memref<64xf32>
    %alloc = memref.alloc() {alignment = 64 : i64} : memref<1x3x230x230xf32>
    scf.for %arg1 = %c0 to %c1 step %c1 {
      scf.for %arg2 = %c0 to %c3 step %c1 {
        scf.for %arg3 = %c0 to %c230 step %c5 {
          %5 = FDRA.BlockLoad %alloc [0, %arg2, %arg3, 0] : memref<1x3x230x230xf32> -> memref<1x3x230x230xf32> {"forward_kernel_0"}
          FDRA.KernelCall @forward_kernel_0(%5) : (memref<1x3x230x230xf32>) -> ()
          FDRA.BlockStore %5,  %alloc [0, %arg2, %arg3, 0] : memref<1x3x230x230xf32> -> memref<1x3x230x230xf32> {"forward_kernel_0"}
        }
      }
    }
    %alloc_0 = memref.alloc() {alignment = 64 : i64} : memref<1x3x230x230xf32>
    memref.copy %alloc, %alloc_0 : memref<1x3x230x230xf32> to memref<1x3x230x230xf32>
    %reinterpret_cast = memref.reinterpret_cast %alloc_0 to offset: [693], sizes: [1, 3, 224, 224], strides: [158700, 52900, 230, 1] : memref<1x3x230x230xf32> to memref<1x3x224x224xf32, strided<[158700, 52900, 230, 1], offset: 693>>
    memref.copy %arg0, %reinterpret_cast : memref<1x3x224x224xf32> to memref<1x3x224x224xf32, strided<[158700, 52900, 230, 1], offset: 693>>
    %alloc_1 = memref.alloc() {alignment = 64 : i64} : memref<1x64x112x112xf32>
    scf.for %arg1 = %c0 to %c1 step %c1 {
      scf.for %arg2 = %c0 to %c64 step %c1 {
        scf.for %arg3 = %c0 to %c112 step %c16 {
          %5 = FDRA.BlockLoad %alloc_1 [0, %arg2, %arg3, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_1"}
          FDRA.KernelCall @forward_kernel_1(%5) : (memref<1x64x112x112xf32>) -> ()
          FDRA.BlockStore %5,  %alloc_1 [0, %arg2, %arg3, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_1"}
        }
      }
    }
    %alloc_2 = memref.alloc() {alignment = 64 : i64} : memref<1x64x112x112xf32>
    memref.copy %alloc_1, %alloc_2 : memref<1x64x112x112xf32> to memref<1x64x112x112xf32>
    scf.for %arg1 = %c0 to %c1 step %c1 {
      scf.for %arg2 = %c0 to %c64 step %c1 {
        scf.for %arg3 = %c0 to %c112 step %c1 {
          scf.for %arg4 = %c0 to %c112 step %c8 {
            %5 = FDRA.BlockLoad %alloc_0 [0, 0, %arg3 * 2, %arg4 * 2] : memref<1x3x230x230xf32> -> memref<1x3x230x230xf32> {"forward_kernel_2"}
            %6 = FDRA.BlockLoad %0 [%arg2, 0, 0, 0] : memref<64x3x7x7xf32> -> memref<64x3x7x7xf32> {"forward_kernel_2"}
            %7 = FDRA.BlockLoad %alloc_2 [0, %arg2, %arg3, %arg4] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_2"}
            %8 = FDRA.BlockLoad %alloc_2 [0, %arg2, %arg3, %arg4] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_2"}
            FDRA.KernelCall @forward_kernel_2(%5, %6, %7, %8) : (memref<1x3x230x230xf32>, memref<64x3x7x7xf32>, memref<1x64x112x112xf32>, memref<1x64x112x112xf32>) -> ()
            FDRA.BlockStore %8,  %alloc_2 [0, %arg2, %arg3, %arg4] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_2"}
          }
        }
      }
    }
    %alloc_3 = memref.alloc() {alignment = 64 : i64} : memref<1x64x112x112xf32>
    scf.for %arg1 = %c0 to %c1 step %c1 {
      scf.for %arg2 = %c0 to %c64 step %c1 {
        scf.for %arg3 = %c0 to %c112 step %c16 {
          %5 = FDRA.BlockLoad %alloc_2 [0, %arg2, %arg3, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_3"}
          %6 = FDRA.BlockLoad %3 [%arg2] : memref<64xf32> -> memref<64xf32> {"forward_kernel_3"}
          %7 = FDRA.BlockLoad %4 [%arg2] : memref<64xf32> -> memref<64xf32> {"forward_kernel_3"}
          %8 = FDRA.BlockLoad %1 [%arg2] : memref<64xf32> -> memref<64xf32> {"forward_kernel_3"}
          %9 = FDRA.BlockLoad %2 [%arg2] : memref<64xf32> -> memref<64xf32> {"forward_kernel_3"}
          %10 = FDRA.BlockLoad %alloc_3 [0, %arg2, %arg3, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_3"}
          FDRA.KernelCall @forward_kernel_3(%5, %6, %7, %8, %9, %10) : (memref<1x64x112x112xf32>, memref<64xf32>, memref<64xf32>, memref<64xf32>, memref<64xf32>, memref<1x64x112x112xf32>) -> ()
          FDRA.BlockStore %10,  %alloc_3 [0, %arg2, %arg3, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_3"}
        }
      }
    }
    %alloc_4 = memref.alloc() {alignment = 64 : i64} : memref<1x64x112x112xf32>
    scf.for %arg1 = %c0 to %c1 step %c1 {
      scf.for %arg2 = %c0 to %c64 step %c1 {
        scf.for %arg3 = %c0 to %c112 step %c16 {
          %5 = FDRA.BlockLoad %alloc_3 [0, %arg2, %arg3, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_4"}
          %6 = FDRA.BlockLoad %alloc_4 [0, %arg2, %arg3, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_4"}
          FDRA.KernelCall @forward_kernel_4(%5, %6) : (memref<1x64x112x112xf32>, memref<1x64x112x112xf32>) -> ()
          FDRA.BlockStore %6,  %alloc_4 [0, %arg2, %arg3, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_4"}
        }
      }
    }
    %alloc_5 = memref.alloc() {alignment = 64 : i64} : memref<1x64x114x114xf32>
    scf.for %arg1 = %c0 to %c1 step %c1 {
      scf.for %arg2 = %c0 to %c64 step %c1 {
        scf.for %arg3 = %c0 to %c114 step %c6 {
          %5 = FDRA.BlockLoad %alloc_5 [0, %arg2, %arg3, 0] : memref<1x64x114x114xf32> -> memref<1x64x114x114xf32> {"forward_kernel_5"}
          FDRA.KernelCall @forward_kernel_5(%5) : (memref<1x64x114x114xf32>) -> ()
          FDRA.BlockStore %5,  %alloc_5 [0, %arg2, %arg3, 0] : memref<1x64x114x114xf32> -> memref<1x64x114x114xf32> {"forward_kernel_5"}
        }
      }
    }
    %alloc_6 = memref.alloc() {alignment = 64 : i64} : memref<1x64x114x114xf32>
    memref.copy %alloc_5, %alloc_6 : memref<1x64x114x114xf32> to memref<1x64x114x114xf32>
    %reinterpret_cast_7 = memref.reinterpret_cast %alloc_6 to offset: [115], sizes: [1, 64, 112, 112], strides: [831744, 12996, 114, 1] : memref<1x64x114x114xf32> to memref<1x64x112x112xf32, strided<[831744, 12996, 114, 1], offset: 115>>
    memref.copy %alloc_4, %reinterpret_cast_7 : memref<1x64x112x112xf32> to memref<1x64x112x112xf32, strided<[831744, 12996, 114, 1], offset: 115>>
    %alloc_8 = memref.alloc() {alignment = 64 : i64} : memref<1x64x56x56xf32>
    scf.for %arg1 = %c0 to %c1 step %c1 {
      scf.for %arg2 = %c0 to %c64 step %c1 {
        scf.for %arg3 = %c0 to %c56 step %c28 {
          %5 = FDRA.BlockLoad %alloc_8 [0, %arg2, %arg3, 0] : memref<1x64x56x56xf32> -> memref<1x64x56x56xf32> {"forward_kernel_6"}
          FDRA.KernelCall @forward_kernel_6(%5) : (memref<1x64x56x56xf32>) -> ()
          FDRA.BlockStore %5,  %alloc_8 [0, %arg2, %arg3, 0] : memref<1x64x56x56xf32> -> memref<1x64x56x56xf32> {"forward_kernel_6"}
        }
      }
    }
    %alloc_9 = memref.alloc() {alignment = 64 : i64} : memref<1x64x56x56xf32>
    memref.copy %alloc_8, %alloc_9 : memref<1x64x56x56xf32> to memref<1x64x56x56xf32>
    scf.for %arg1 = %c0 to %c1 step %c1 {
      scf.for %arg2 = %c0 to %c64 step %c1 {
        scf.for %arg3 = %c0 to %c56 step %c4 {
          %5 = FDRA.BlockLoad %alloc_6 [0, %arg2, %arg3 * 2, 0] : memref<1x64x114x114xf32> -> memref<1x64x114x114xf32> {"forward_kernel_7"}
          %6 = FDRA.BlockLoad %alloc_9 [0, %arg2, %arg3, 0] : memref<1x64x56x56xf32> -> memref<1x64x56x56xf32> {"forward_kernel_7"}
          %7 = FDRA.BlockLoad %alloc_9 [0, %arg2, %arg3, 0] : memref<1x64x56x56xf32> -> memref<1x64x56x56xf32> {"forward_kernel_7"}
          FDRA.KernelCall @forward_kernel_7(%5, %6, %7) : (memref<1x64x114x114xf32>, memref<1x64x56x56xf32>, memref<1x64x56x56xf32>) -> ()
          FDRA.BlockStore %7,  %alloc_9 [0, %arg2, %arg3, 0] : memref<1x64x56x56xf32> -> memref<1x64x56x56xf32> {"forward_kernel_7"}
        }
      }
    }
    return %alloc_9 : memref<1x64x56x56xf32>
  }
  func.func @forward_kernel_0(%arg0: memref<1x3x230x230xf32>) attributes {Kernel, forward_kernel_0} {
    %c230 = arith.constant 230 : index
    %c1 = arith.constant 1 : index
    %c5 = arith.constant 5 : index
    %c0 = arith.constant 0 : index
    %cst = arith.constant 0.000000e+00 : f32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    scf.for %arg1 = %c0 to %c5 step %c1 {
      scf.for %arg2 = %c0 to %c230 step %c1 {
        memref.store %cst, %arg0[%c0, %c0, %arg1, %arg2] : memref<1x3x230x230xf32>
      }
    }
    return
  }
  func.func @forward_kernel_1(%arg0: memref<1x64x112x112xf32>) attributes {Kernel, forward_kernel_1} {
    %c112 = arith.constant 112 : index
    %c1 = arith.constant 1 : index
    %c16 = arith.constant 16 : index
    %c0 = arith.constant 0 : index
    %cst = arith.constant 0.000000e+00 : f32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    scf.for %arg1 = %c0 to %c16 step %c1 {
      scf.for %arg2 = %c0 to %c112 step %c1 {
        memref.store %cst, %arg0[%c0, %c0, %arg1, %arg2] : memref<1x64x112x112xf32>
      }
    }
    return
  }
  func.func @forward_kernel_2(%arg0: memref<1x3x230x230xf32>, %arg1: memref<64x3x7x7xf32>, %arg2: memref<1x64x112x112xf32>, %arg3: memref<1x64x112x112xf32>) attributes {Kernel, forward_kernel_2} {
    %c2 = arith.constant 2 : index
    %c7 = arith.constant 7 : index
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c8 = arith.constant 8 : index
    %c0 = arith.constant 0 : index
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    scf.for %arg4 = %c0 to %c8 step %c1 {
      scf.for %arg5 = %c0 to %c3 step %c1 {
        scf.for %arg6 = %c0 to %c7 step %c1 {
          scf.for %arg7 = %c0 to %c7 step %c1 {
            %0 = arith.muli %arg4, %c2 : index
            %1 = arith.addi %0, %arg7 : index
            %2 = memref.load %arg0[%c0, %arg5, %arg6, %1] : memref<1x3x230x230xf32>
            %3 = memref.load %arg1[%c0, %arg5, %arg6, %arg7] : memref<64x3x7x7xf32>
            %4 = memref.load %arg2[%c0, %c0, %c0, %arg4] : memref<1x64x112x112xf32>
            %5 = arith.mulf %2, %3 : f32
            %6 = arith.addf %4, %5 : f32
            memref.store %6, %arg3[%c0, %c0, %c0, %arg4] : memref<1x64x112x112xf32>
          }
        }
      }
    }
    return
  }
  func.func @forward_kernel_3(%arg0: memref<1x64x112x112xf32>, %arg1: memref<64xf32>, %arg2: memref<64xf32>, %arg3: memref<64xf32>, %arg4: memref<64xf32>, %arg5: memref<1x64x112x112xf32>) attributes {Kernel, forward_kernel_3} {
    %c112 = arith.constant 112 : index
    %c1 = arith.constant 1 : index
    %c16 = arith.constant 16 : index
    %c0 = arith.constant 0 : index
    %cst = arith.constant 1.500000e+00 : f32
    %c1597463007_i32 = arith.constant 1597463007 : i32
    %c1_i32 = arith.constant 1 : i32
    %cst_0 = arith.constant 5.000000e-01 : f32
    %cst_1 = arith.constant 1.000000e-05 : f64
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    scf.for %arg6 = %c0 to %c16 step %c1 {
      scf.for %arg7 = %c0 to %c112 step %c1 {
        %0 = memref.load %arg0[%c0, %c0, %arg6, %arg7] : memref<1x64x112x112xf32>
        %1 = memref.load %arg1[%c0] : memref<64xf32>
        %2 = memref.load %arg2[%c0] : memref<64xf32>
        %3 = memref.load %arg3[%c0] : memref<64xf32>
        %4 = memref.load %arg4[%c0] : memref<64xf32>
        %5 = arith.truncf %cst_1 : f64 to f32
        %6 = arith.addf %4, %5 : f32
        %7 = arith.mulf %6, %cst_0 : f32
        %8 = arith.bitcast %6 : f32 to i32
        %9 = arith.shrui %8, %c1_i32 : i32
        %10 = arith.subi %c1597463007_i32, %9 : i32
        %11 = arith.bitcast %10 : i32 to f32
        %12 = arith.mulf %11, %11 : f32
        %13 = arith.mulf %12, %7 : f32
        %14 = arith.subf %cst, %13 : f32
        %15 = arith.mulf %14, %12 : f32
        %16 = arith.subf %0, %3 : f32
        %17 = arith.mulf %16, %15 : f32
        %18 = arith.mulf %17, %1 : f32
        %19 = arith.addf %18, %2 : f32
        memref.store %19, %arg5[%c0, %c0, %arg6, %arg7] : memref<1x64x112x112xf32>
      }
    }
    return
  }
  func.func @forward_kernel_4(%arg0: memref<1x64x112x112xf32>, %arg1: memref<1x64x112x112xf32>) attributes {Kernel, forward_kernel_4} {
    %c112 = arith.constant 112 : index
    %c1 = arith.constant 1 : index
    %c16 = arith.constant 16 : index
    %c0 = arith.constant 0 : index
    %cst = arith.constant 0.000000e+00 : f32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    scf.for %arg2 = %c0 to %c16 step %c1 {
      scf.for %arg3 = %c0 to %c112 step %c1 {
        %0 = memref.load %arg0[%c0, %c0, %arg2, %arg3] : memref<1x64x112x112xf32>
        %1 = arith.cmpf ugt, %0, %cst : f32
        %2 = arith.select %1, %0, %cst : f32
        memref.store %2, %arg1[%c0, %c0, %arg2, %arg3] : memref<1x64x112x112xf32>
      }
    }
    return
  }
  func.func @forward_kernel_5(%arg0: memref<1x64x114x114xf32>) attributes {Kernel, forward_kernel_5} {
    %c114 = arith.constant 114 : index
    %c1 = arith.constant 1 : index
    %c6 = arith.constant 6 : index
    %c0 = arith.constant 0 : index
    %cst = arith.constant 0xFF800000 : f32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    scf.for %arg1 = %c0 to %c6 step %c1 {
      scf.for %arg2 = %c0 to %c114 step %c1 {
        memref.store %cst, %arg0[%c0, %c0, %arg1, %arg2] : memref<1x64x114x114xf32>
      }
    }
    return
  }
  func.func @forward_kernel_6(%arg0: memref<1x64x56x56xf32>) attributes {Kernel, forward_kernel_6} {
    %c56 = arith.constant 56 : index
    %c1 = arith.constant 1 : index
    %c28 = arith.constant 28 : index
    %c0 = arith.constant 0 : index
    %cst = arith.constant 0xFF800000 : f32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    scf.for %arg1 = %c0 to %c28 step %c1 {
      scf.for %arg2 = %c0 to %c56 step %c1 {
        memref.store %cst, %arg0[%c0, %c0, %arg1, %arg2] : memref<1x64x56x56xf32>
      }
    }
    return
  }
  func.func @forward_kernel_7(%arg0: memref<1x64x114x114xf32>, %arg1: memref<1x64x56x56xf32>, %arg2: memref<1x64x56x56xf32>) attributes {Kernel, forward_kernel_7} {
    %c2 = arith.constant 2 : index
    %c3 = arith.constant 3 : index
    %c56 = arith.constant 56 : index
    %c1 = arith.constant 1 : index
    %c4 = arith.constant 4 : index
    %c0 = arith.constant 0 : index
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    scf.for %arg3 = %c0 to %c4 step %c1 {
      scf.for %arg4 = %c0 to %c56 step %c1 {
        scf.for %arg5 = %c0 to %c3 step %c1 {
          scf.for %arg6 = %c0 to %c3 step %c1 {
            %0 = arith.muli %arg3, %c2 : index
            %1 = arith.addi %0, %arg5 : index
            %2 = arith.muli %arg4, %c2 : index
            %3 = arith.addi %2, %arg6 : index
            %4 = memref.load %arg0[%c0, %c0, %1, %3] : memref<1x64x114x114xf32>
            %5 = memref.load %arg1[%c0, %c0, %arg3, %arg4] : memref<1x64x56x56xf32>
            %6 = arith.cmpf ugt, %5, %4 : f32
            %7 = arith.select %6, %5, %4 : f32
            %8 = arith.cmpf uno, %4, %4 : f32
            %9 = arith.select %8, %4, %7 : f32
            memref.store %9, %arg2[%c0, %c0, %arg3, %arg4] : memref<1x64x56x56xf32>
          }
        }
      }
    }
    return
  }
}


// -----// IR Dump After SCFToControlFlow (convert-scf-to-cf) //----- //
module attributes {torch.debug_module_name = "ResNet"} {
  memref.global "private" constant @__constant_64xf32_2 : memref<64xf32> = dense<[0.230717152, 0.253822476, -1.05429808E-6, -0.664388895, -1.65705547E-8, 0.161521927, 0.454503953, -4.301950e-07, 0.300513744, -8.005240e-06, 0.349418074, 0.311480612, -0.249529764, -3.474890e-05, 0.107726313, 0.218970656, 0.381412596, -0.529882133, -0.628644109, 0.571398079, 0.299846917, 0.584303737, 0.48202154, 0.328526348, 0.196717009, 0.194961801, 0.152145416, 0.085522361, 0.513142824, 0.0152367353, 0.166441768, 0.332394391, 0.249211237, 0.443366677, -0.280169278, -0.0203848016, -2.45068748E-7, 0.321340501, -4.9151744E-8, 0.237767309, 0.232907727, 0.315274626, 0.427762389, 0.293127537, 0.263794243, 0.675975859, 0.429100394, 0.345662743, -8.69090186E-8, 0.247294366, 0.303160846, 0.615772783, 0.39834857, 0.332067341, -0.412187815, 0.378069043, 0.178953409, 0.25747788, -0.449079722, 0.213058949, 0.569339037, 5.727430e-01, -0.402383476, 0.23406373]>
  memref.global "private" constant @__constant_64xf32_1 : memref<64xf32> = dense<[0.234872743, 0.266257942, -5.10959595E-8, 0.518699706, 3.44040196E-9, 0.222385287, 0.422887057, 1.31532403E-7, 0.25093165, 1.5152026E-6, 0.316871643, 0.250491828, 0.378926098, 1.08618351E-5, 2.752640e-01, 0.236741036, 0.242021769, 0.395314813, 0.469346285, 0.2908957, 0.272684187, 0.27802828, 0.290692091, 0.206927493, 0.258990377, 0.278710574, 0.291149527, 0.316013753, 0.388891488, 0.304111898, 0.267757207, 0.210925162, 0.287084132, 0.332426429, 0.42672804, 0.373260558, 7.48037578E-8, 0.19067812, 1.47401256E-8, 0.223029822, 0.179079413, 0.248600766, 0.27399528, 0.259228647, 0.294202209, 0.299236417, 0.223688841, 0.262799472, 2.20011476E-8, 0.266098082, 0.220890298, 0.284285516, 0.330723315, 0.226809531, 0.365380913, 0.21229881, 0.239653021, 0.24949576, 0.525830686, 0.248247579, 0.295652747, 0.258776665, 0.4832564, 0.26670444]>
  memref.global "private" constant @__constant_64xf32_0 : memref<64xf32> = dense<[1.01694489, 3.71674347, 5.81334356E-11, 3.28254271, 1.71074404E-13, 0.658226967, 4.37006235, 6.60045282E-12, 0.915522992, 1.93175254E-9, 4.12558556, 2.74399233, 2.8390913, 4.79658588E-8, 11.0722713, 0.500745952, 2.23128176, 4.82570696, 2.69861364, 9.36995506, 3.73391747, 5.48429585, 5.7126689, 0.445444882, 0.436275303, 7.15633583, 13.7179089, 5.25117493, 6.81737518, 1.67235756, 1.65343034, 1.23245978, 4.90762854, 3.07305121, 4.23838568, 4.99363518, 1.44646307E-12, 1.52116203, 1.03519833E-13, 0.351344079, 0.17024748, 1.42054474, 1.90848303, 2.15124035, 2.66084933, 4.84443378, 1.92971194, 1.49994361, 2.94806145E-13, 1.53064024, 0.365027189, 2.93755412, 5.46641159, 0.707924544, 3.33150721, 0.771802961, 2.40678358, 6.5213666, 4.12625027, 1.05063522, 2.95303202, 11.3656216, 4.76904678, 1.65587807]>
  memref.global "private" constant @__constant_64xf32 : memref<64xf32> = dense<[0.00276811025, -0.0257689245, 2.12544663E-7, -0.0846051499, 2.11205915E-8, 4.96906461E-4, -0.0224083271, -1.15818956E-7, -4.823850e-03, 2.75073347E-7, 3.958230e-02, 0.0319936387, -0.0374896601, -1.37163477E-6, 0.00660019321, 4.378190e-03, 0.0647971481, 0.11175999, 0.0360015705, -0.0750752166, -0.03824009, 0.0843578502, -5.228700e-02, -0.0117988894, 0.00130188058, 0.0321722962, -0.0177843049, -0.0910085887, 0.113187239, -0.0416320041, 0.00873024761, 0.0296931695, -0.0705021694, -0.00348469778, 0.109771468, -0.00173411821, -5.94229412E-8, 0.0293303896, -7.85527287E-9, 0.00673204474, -0.00370999542, 0.0160279572, -0.0278826058, 0.0265925378, 0.0284745526, -0.12734659, 0.0446168408, 0.0263288375, 2.14538591E-8, -1.704500e-02, -0.00356168114, -0.0458412617, 0.0638761446, 0.0152198272, -0.0385114551, -0.0164278317, -0.016568929, 0.0560574941, -0.0803062319, -0.00266457512, -0.0417176671, 0.126112729, -0.0492369682, -0.0132609205]>
  memref.global "private" constant @__constant_64x3x7x7xf32 : memref<64x3x7x7xf32> = dense<"
  ml_program.global private mutable @global_seed(dense<0> : tensor<i64>) : tensor<i64>
  func.func @forward(%arg0: memref<1x3x224x224xf32>) -> memref<1x64x56x56xf32> {
    %c4 = arith.constant 4 : index
    %c28 = arith.constant 28 : index
    %c56 = arith.constant 56 : index
    %c6 = arith.constant 6 : index
    %c114 = arith.constant 114 : index
    %c8 = arith.constant 8 : index
    %c16 = arith.constant 16 : index
    %c112 = arith.constant 112 : index
    %c64 = arith.constant 64 : index
    %c5 = arith.constant 5 : index
    %c230 = arith.constant 230 : index
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %0 = memref.get_global @__constant_64x3x7x7xf32 : memref<64x3x7x7xf32>
    %1 = memref.get_global @__constant_64xf32 : memref<64xf32>
    %2 = memref.get_global @__constant_64xf32_0 : memref<64xf32>
    %3 = memref.get_global @__constant_64xf32_1 : memref<64xf32>
    %4 = memref.get_global @__constant_64xf32_2 : memref<64xf32>
    %alloc = memref.alloc() {alignment = 64 : i64} : memref<1x3x230x230xf32>
    cf.br ^bb1(%c0 : index)
  ^bb1(%5: index):  // 2 preds: ^bb0, ^bb8
    %6 = arith.cmpi slt, %5, %c1 : index
    cf.cond_br %6, ^bb2, ^bb9
  ^bb2:  // pred: ^bb1
    cf.br ^bb3(%c0 : index)
  ^bb3(%7: index):  // 2 preds: ^bb2, ^bb7
    %8 = arith.cmpi slt, %7, %c3 : index
    cf.cond_br %8, ^bb4, ^bb8
  ^bb4:  // pred: ^bb3
    cf.br ^bb5(%c0 : index)
  ^bb5(%9: index):  // 2 preds: ^bb4, ^bb6
    %10 = arith.cmpi slt, %9, %c230 : index
    cf.cond_br %10, ^bb6, ^bb7
  ^bb6:  // pred: ^bb5
    %11 = FDRA.BlockLoad %alloc [0, %7, %9, 0] : memref<1x3x230x230xf32> -> memref<1x3x230x230xf32> {"forward_kernel_0"}
    FDRA.KernelCall @forward_kernel_0(%11) : (memref<1x3x230x230xf32>) -> ()
    FDRA.BlockStore %11,  %alloc [0, %7, %9, 0] : memref<1x3x230x230xf32> -> memref<1x3x230x230xf32> {"forward_kernel_0"}
    %12 = arith.addi %9, %c5 : index
    cf.br ^bb5(%12 : index)
  ^bb7:  // pred: ^bb5
    %13 = arith.addi %7, %c1 : index
    cf.br ^bb3(%13 : index)
  ^bb8:  // pred: ^bb3
    %14 = arith.addi %5, %c1 : index
    cf.br ^bb1(%14 : index)
  ^bb9:  // pred: ^bb1
    %alloc_0 = memref.alloc() {alignment = 64 : i64} : memref<1x3x230x230xf32>
    memref.copy %alloc, %alloc_0 : memref<1x3x230x230xf32> to memref<1x3x230x230xf32>
    %reinterpret_cast = memref.reinterpret_cast %alloc_0 to offset: [693], sizes: [1, 3, 224, 224], strides: [158700, 52900, 230, 1] : memref<1x3x230x230xf32> to memref<1x3x224x224xf32, strided<[158700, 52900, 230, 1], offset: 693>>
    memref.copy %arg0, %reinterpret_cast : memref<1x3x224x224xf32> to memref<1x3x224x224xf32, strided<[158700, 52900, 230, 1], offset: 693>>
    %alloc_1 = memref.alloc() {alignment = 64 : i64} : memref<1x64x112x112xf32>
    cf.br ^bb10(%c0 : index)
  ^bb10(%15: index):  // 2 preds: ^bb9, ^bb17
    %16 = arith.cmpi slt, %15, %c1 : index
    cf.cond_br %16, ^bb11, ^bb18
  ^bb11:  // pred: ^bb10
    cf.br ^bb12(%c0 : index)
  ^bb12(%17: index):  // 2 preds: ^bb11, ^bb16
    %18 = arith.cmpi slt, %17, %c64 : index
    cf.cond_br %18, ^bb13, ^bb17
  ^bb13:  // pred: ^bb12
    cf.br ^bb14(%c0 : index)
  ^bb14(%19: index):  // 2 preds: ^bb13, ^bb15
    %20 = arith.cmpi slt, %19, %c112 : index
    cf.cond_br %20, ^bb15, ^bb16
  ^bb15:  // pred: ^bb14
    %21 = FDRA.BlockLoad %alloc_1 [0, %17, %19, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_1"}
    FDRA.KernelCall @forward_kernel_1(%21) : (memref<1x64x112x112xf32>) -> ()
    FDRA.BlockStore %21,  %alloc_1 [0, %17, %19, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_1"}
    %22 = arith.addi %19, %c16 : index
    cf.br ^bb14(%22 : index)
  ^bb16:  // pred: ^bb14
    %23 = arith.addi %17, %c1 : index
    cf.br ^bb12(%23 : index)
  ^bb17:  // pred: ^bb12
    %24 = arith.addi %15, %c1 : index
    cf.br ^bb10(%24 : index)
  ^bb18:  // pred: ^bb10
    %alloc_2 = memref.alloc() {alignment = 64 : i64} : memref<1x64x112x112xf32>
    memref.copy %alloc_1, %alloc_2 : memref<1x64x112x112xf32> to memref<1x64x112x112xf32>
    cf.br ^bb19(%c0 : index)
  ^bb19(%25: index):  // 2 preds: ^bb18, ^bb29
    %26 = arith.cmpi slt, %25, %c1 : index
    cf.cond_br %26, ^bb20, ^bb30
  ^bb20:  // pred: ^bb19
    cf.br ^bb21(%c0 : index)
  ^bb21(%27: index):  // 2 preds: ^bb20, ^bb28
    %28 = arith.cmpi slt, %27, %c64 : index
    cf.cond_br %28, ^bb22, ^bb29
  ^bb22:  // pred: ^bb21
    cf.br ^bb23(%c0 : index)
  ^bb23(%29: index):  // 2 preds: ^bb22, ^bb27
    %30 = arith.cmpi slt, %29, %c112 : index
    cf.cond_br %30, ^bb24, ^bb28
  ^bb24:  // pred: ^bb23
    cf.br ^bb25(%c0 : index)
  ^bb25(%31: index):  // 2 preds: ^bb24, ^bb26
    %32 = arith.cmpi slt, %31, %c112 : index
    cf.cond_br %32, ^bb26, ^bb27
  ^bb26:  // pred: ^bb25
    %33 = FDRA.BlockLoad %alloc_0 [0, 0, %29 * 2, %31 * 2] : memref<1x3x230x230xf32> -> memref<1x3x230x230xf32> {"forward_kernel_2"}
    %34 = FDRA.BlockLoad %0 [%27, 0, 0, 0] : memref<64x3x7x7xf32> -> memref<64x3x7x7xf32> {"forward_kernel_2"}
    %35 = FDRA.BlockLoad %alloc_2 [0, %27, %29, %31] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_2"}
    %36 = FDRA.BlockLoad %alloc_2 [0, %27, %29, %31] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_2"}
    FDRA.KernelCall @forward_kernel_2(%33, %34, %35, %36) : (memref<1x3x230x230xf32>, memref<64x3x7x7xf32>, memref<1x64x112x112xf32>, memref<1x64x112x112xf32>) -> ()
    FDRA.BlockStore %36,  %alloc_2 [0, %27, %29, %31] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_2"}
    %37 = arith.addi %31, %c8 : index
    cf.br ^bb25(%37 : index)
  ^bb27:  // pred: ^bb25
    %38 = arith.addi %29, %c1 : index
    cf.br ^bb23(%38 : index)
  ^bb28:  // pred: ^bb23
    %39 = arith.addi %27, %c1 : index
    cf.br ^bb21(%39 : index)
  ^bb29:  // pred: ^bb21
    %40 = arith.addi %25, %c1 : index
    cf.br ^bb19(%40 : index)
  ^bb30:  // pred: ^bb19
    %alloc_3 = memref.alloc() {alignment = 64 : i64} : memref<1x64x112x112xf32>
    cf.br ^bb31(%c0 : index)
  ^bb31(%41: index):  // 2 preds: ^bb30, ^bb38
    %42 = arith.cmpi slt, %41, %c1 : index
    cf.cond_br %42, ^bb32, ^bb39
  ^bb32:  // pred: ^bb31
    cf.br ^bb33(%c0 : index)
  ^bb33(%43: index):  // 2 preds: ^bb32, ^bb37
    %44 = arith.cmpi slt, %43, %c64 : index
    cf.cond_br %44, ^bb34, ^bb38
  ^bb34:  // pred: ^bb33
    cf.br ^bb35(%c0 : index)
  ^bb35(%45: index):  // 2 preds: ^bb34, ^bb36
    %46 = arith.cmpi slt, %45, %c112 : index
    cf.cond_br %46, ^bb36, ^bb37
  ^bb36:  // pred: ^bb35
    %47 = FDRA.BlockLoad %alloc_2 [0, %43, %45, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_3"}
    %48 = FDRA.BlockLoad %3 [%43] : memref<64xf32> -> memref<64xf32> {"forward_kernel_3"}
    %49 = FDRA.BlockLoad %4 [%43] : memref<64xf32> -> memref<64xf32> {"forward_kernel_3"}
    %50 = FDRA.BlockLoad %1 [%43] : memref<64xf32> -> memref<64xf32> {"forward_kernel_3"}
    %51 = FDRA.BlockLoad %2 [%43] : memref<64xf32> -> memref<64xf32> {"forward_kernel_3"}
    %52 = FDRA.BlockLoad %alloc_3 [0, %43, %45, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_3"}
    FDRA.KernelCall @forward_kernel_3(%47, %48, %49, %50, %51, %52) : (memref<1x64x112x112xf32>, memref<64xf32>, memref<64xf32>, memref<64xf32>, memref<64xf32>, memref<1x64x112x112xf32>) -> ()
    FDRA.BlockStore %52,  %alloc_3 [0, %43, %45, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_3"}
    %53 = arith.addi %45, %c16 : index
    cf.br ^bb35(%53 : index)
  ^bb37:  // pred: ^bb35
    %54 = arith.addi %43, %c1 : index
    cf.br ^bb33(%54 : index)
  ^bb38:  // pred: ^bb33
    %55 = arith.addi %41, %c1 : index
    cf.br ^bb31(%55 : index)
  ^bb39:  // pred: ^bb31
    %alloc_4 = memref.alloc() {alignment = 64 : i64} : memref<1x64x112x112xf32>
    cf.br ^bb40(%c0 : index)
  ^bb40(%56: index):  // 2 preds: ^bb39, ^bb47
    %57 = arith.cmpi slt, %56, %c1 : index
    cf.cond_br %57, ^bb41, ^bb48
  ^bb41:  // pred: ^bb40
    cf.br ^bb42(%c0 : index)
  ^bb42(%58: index):  // 2 preds: ^bb41, ^bb46
    %59 = arith.cmpi slt, %58, %c64 : index
    cf.cond_br %59, ^bb43, ^bb47
  ^bb43:  // pred: ^bb42
    cf.br ^bb44(%c0 : index)
  ^bb44(%60: index):  // 2 preds: ^bb43, ^bb45
    %61 = arith.cmpi slt, %60, %c112 : index
    cf.cond_br %61, ^bb45, ^bb46
  ^bb45:  // pred: ^bb44
    %62 = FDRA.BlockLoad %alloc_3 [0, %58, %60, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_4"}
    %63 = FDRA.BlockLoad %alloc_4 [0, %58, %60, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_4"}
    FDRA.KernelCall @forward_kernel_4(%62, %63) : (memref<1x64x112x112xf32>, memref<1x64x112x112xf32>) -> ()
    FDRA.BlockStore %63,  %alloc_4 [0, %58, %60, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_4"}
    %64 = arith.addi %60, %c16 : index
    cf.br ^bb44(%64 : index)
  ^bb46:  // pred: ^bb44
    %65 = arith.addi %58, %c1 : index
    cf.br ^bb42(%65 : index)
  ^bb47:  // pred: ^bb42
    %66 = arith.addi %56, %c1 : index
    cf.br ^bb40(%66 : index)
  ^bb48:  // pred: ^bb40
    %alloc_5 = memref.alloc() {alignment = 64 : i64} : memref<1x64x114x114xf32>
    cf.br ^bb49(%c0 : index)
  ^bb49(%67: index):  // 2 preds: ^bb48, ^bb56
    %68 = arith.cmpi slt, %67, %c1 : index
    cf.cond_br %68, ^bb50, ^bb57
  ^bb50:  // pred: ^bb49
    cf.br ^bb51(%c0 : index)
  ^bb51(%69: index):  // 2 preds: ^bb50, ^bb55
    %70 = arith.cmpi slt, %69, %c64 : index
    cf.cond_br %70, ^bb52, ^bb56
  ^bb52:  // pred: ^bb51
    cf.br ^bb53(%c0 : index)
  ^bb53(%71: index):  // 2 preds: ^bb52, ^bb54
    %72 = arith.cmpi slt, %71, %c114 : index
    cf.cond_br %72, ^bb54, ^bb55
  ^bb54:  // pred: ^bb53
    %73 = FDRA.BlockLoad %alloc_5 [0, %69, %71, 0] : memref<1x64x114x114xf32> -> memref<1x64x114x114xf32> {"forward_kernel_5"}
    FDRA.KernelCall @forward_kernel_5(%73) : (memref<1x64x114x114xf32>) -> ()
    FDRA.BlockStore %73,  %alloc_5 [0, %69, %71, 0] : memref<1x64x114x114xf32> -> memref<1x64x114x114xf32> {"forward_kernel_5"}
    %74 = arith.addi %71, %c6 : index
    cf.br ^bb53(%74 : index)
  ^bb55:  // pred: ^bb53
    %75 = arith.addi %69, %c1 : index
    cf.br ^bb51(%75 : index)
  ^bb56:  // pred: ^bb51
    %76 = arith.addi %67, %c1 : index
    cf.br ^bb49(%76 : index)
  ^bb57:  // pred: ^bb49
    %alloc_6 = memref.alloc() {alignment = 64 : i64} : memref<1x64x114x114xf32>
    memref.copy %alloc_5, %alloc_6 : memref<1x64x114x114xf32> to memref<1x64x114x114xf32>
    %reinterpret_cast_7 = memref.reinterpret_cast %alloc_6 to offset: [115], sizes: [1, 64, 112, 112], strides: [831744, 12996, 114, 1] : memref<1x64x114x114xf32> to memref<1x64x112x112xf32, strided<[831744, 12996, 114, 1], offset: 115>>
    memref.copy %alloc_4, %reinterpret_cast_7 : memref<1x64x112x112xf32> to memref<1x64x112x112xf32, strided<[831744, 12996, 114, 1], offset: 115>>
    %alloc_8 = memref.alloc() {alignment = 64 : i64} : memref<1x64x56x56xf32>
    cf.br ^bb58(%c0 : index)
  ^bb58(%77: index):  // 2 preds: ^bb57, ^bb65
    %78 = arith.cmpi slt, %77, %c1 : index
    cf.cond_br %78, ^bb59, ^bb66
  ^bb59:  // pred: ^bb58
    cf.br ^bb60(%c0 : index)
  ^bb60(%79: index):  // 2 preds: ^bb59, ^bb64
    %80 = arith.cmpi slt, %79, %c64 : index
    cf.cond_br %80, ^bb61, ^bb65
  ^bb61:  // pred: ^bb60
    cf.br ^bb62(%c0 : index)
  ^bb62(%81: index):  // 2 preds: ^bb61, ^bb63
    %82 = arith.cmpi slt, %81, %c56 : index
    cf.cond_br %82, ^bb63, ^bb64
  ^bb63:  // pred: ^bb62
    %83 = FDRA.BlockLoad %alloc_8 [0, %79, %81, 0] : memref<1x64x56x56xf32> -> memref<1x64x56x56xf32> {"forward_kernel_6"}
    FDRA.KernelCall @forward_kernel_6(%83) : (memref<1x64x56x56xf32>) -> ()
    FDRA.BlockStore %83,  %alloc_8 [0, %79, %81, 0] : memref<1x64x56x56xf32> -> memref<1x64x56x56xf32> {"forward_kernel_6"}
    %84 = arith.addi %81, %c28 : index
    cf.br ^bb62(%84 : index)
  ^bb64:  // pred: ^bb62
    %85 = arith.addi %79, %c1 : index
    cf.br ^bb60(%85 : index)
  ^bb65:  // pred: ^bb60
    %86 = arith.addi %77, %c1 : index
    cf.br ^bb58(%86 : index)
  ^bb66:  // pred: ^bb58
    %alloc_9 = memref.alloc() {alignment = 64 : i64} : memref<1x64x56x56xf32>
    memref.copy %alloc_8, %alloc_9 : memref<1x64x56x56xf32> to memref<1x64x56x56xf32>
    cf.br ^bb67(%c0 : index)
  ^bb67(%87: index):  // 2 preds: ^bb66, ^bb74
    %88 = arith.cmpi slt, %87, %c1 : index
    cf.cond_br %88, ^bb68, ^bb75
  ^bb68:  // pred: ^bb67
    cf.br ^bb69(%c0 : index)
  ^bb69(%89: index):  // 2 preds: ^bb68, ^bb73
    %90 = arith.cmpi slt, %89, %c64 : index
    cf.cond_br %90, ^bb70, ^bb74
  ^bb70:  // pred: ^bb69
    cf.br ^bb71(%c0 : index)
  ^bb71(%91: index):  // 2 preds: ^bb70, ^bb72
    %92 = arith.cmpi slt, %91, %c56 : index
    cf.cond_br %92, ^bb72, ^bb73
  ^bb72:  // pred: ^bb71
    %93 = FDRA.BlockLoad %alloc_6 [0, %89, %91 * 2, 0] : memref<1x64x114x114xf32> -> memref<1x64x114x114xf32> {"forward_kernel_7"}
    %94 = FDRA.BlockLoad %alloc_9 [0, %89, %91, 0] : memref<1x64x56x56xf32> -> memref<1x64x56x56xf32> {"forward_kernel_7"}
    %95 = FDRA.BlockLoad %alloc_9 [0, %89, %91, 0] : memref<1x64x56x56xf32> -> memref<1x64x56x56xf32> {"forward_kernel_7"}
    FDRA.KernelCall @forward_kernel_7(%93, %94, %95) : (memref<1x64x114x114xf32>, memref<1x64x56x56xf32>, memref<1x64x56x56xf32>) -> ()
    FDRA.BlockStore %95,  %alloc_9 [0, %89, %91, 0] : memref<1x64x56x56xf32> -> memref<1x64x56x56xf32> {"forward_kernel_7"}
    %96 = arith.addi %91, %c4 : index
    cf.br ^bb71(%96 : index)
  ^bb73:  // pred: ^bb71
    %97 = arith.addi %89, %c1 : index
    cf.br ^bb69(%97 : index)
  ^bb74:  // pred: ^bb69
    %98 = arith.addi %87, %c1 : index
    cf.br ^bb67(%98 : index)
  ^bb75:  // pred: ^bb67
    return %alloc_9 : memref<1x64x56x56xf32>
  }
  func.func @forward_kernel_0(%arg0: memref<1x3x230x230xf32>) attributes {Kernel, forward_kernel_0} {
    %c230 = arith.constant 230 : index
    %c1 = arith.constant 1 : index
    %c5 = arith.constant 5 : index
    %c0 = arith.constant 0 : index
    %cst = arith.constant 0.000000e+00 : f32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2(%c0 : index)
  ^bb2(%0: index):  // 2 preds: ^bb1, ^bb6
    %1 = arith.cmpi slt, %0, %c5 : index
    cf.cond_br %1, ^bb3, ^bb7
  ^bb3:  // pred: ^bb2
    cf.br ^bb4(%c0 : index)
  ^bb4(%2: index):  // 2 preds: ^bb3, ^bb5
    %3 = arith.cmpi slt, %2, %c230 : index
    cf.cond_br %3, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    memref.store %cst, %arg0[%c0, %c0, %0, %2] : memref<1x3x230x230xf32>
    %4 = arith.addi %2, %c1 : index
    cf.br ^bb4(%4 : index)
  ^bb6:  // pred: ^bb4
    %5 = arith.addi %0, %c1 : index
    cf.br ^bb2(%5 : index)
  ^bb7:  // pred: ^bb2
    return
  }
  func.func @forward_kernel_1(%arg0: memref<1x64x112x112xf32>) attributes {Kernel, forward_kernel_1} {
    %c112 = arith.constant 112 : index
    %c1 = arith.constant 1 : index
    %c16 = arith.constant 16 : index
    %c0 = arith.constant 0 : index
    %cst = arith.constant 0.000000e+00 : f32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2(%c0 : index)
  ^bb2(%0: index):  // 2 preds: ^bb1, ^bb6
    %1 = arith.cmpi slt, %0, %c16 : index
    cf.cond_br %1, ^bb3, ^bb7
  ^bb3:  // pred: ^bb2
    cf.br ^bb4(%c0 : index)
  ^bb4(%2: index):  // 2 preds: ^bb3, ^bb5
    %3 = arith.cmpi slt, %2, %c112 : index
    cf.cond_br %3, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    memref.store %cst, %arg0[%c0, %c0, %0, %2] : memref<1x64x112x112xf32>
    %4 = arith.addi %2, %c1 : index
    cf.br ^bb4(%4 : index)
  ^bb6:  // pred: ^bb4
    %5 = arith.addi %0, %c1 : index
    cf.br ^bb2(%5 : index)
  ^bb7:  // pred: ^bb2
    return
  }
  func.func @forward_kernel_2(%arg0: memref<1x3x230x230xf32>, %arg1: memref<64x3x7x7xf32>, %arg2: memref<1x64x112x112xf32>, %arg3: memref<1x64x112x112xf32>) attributes {Kernel, forward_kernel_2} {
    %c2 = arith.constant 2 : index
    %c7 = arith.constant 7 : index
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c8 = arith.constant 8 : index
    %c0 = arith.constant 0 : index
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2(%c0 : index)
  ^bb2(%0: index):  // 2 preds: ^bb1, ^bb12
    %1 = arith.cmpi slt, %0, %c8 : index
    cf.cond_br %1, ^bb3, ^bb13
  ^bb3:  // pred: ^bb2
    cf.br ^bb4(%c0 : index)
  ^bb4(%2: index):  // 2 preds: ^bb3, ^bb11
    %3 = arith.cmpi slt, %2, %c3 : index
    cf.cond_br %3, ^bb5, ^bb12
  ^bb5:  // pred: ^bb4
    cf.br ^bb6(%c0 : index)
  ^bb6(%4: index):  // 2 preds: ^bb5, ^bb10
    %5 = arith.cmpi slt, %4, %c7 : index
    cf.cond_br %5, ^bb7, ^bb11
  ^bb7:  // pred: ^bb6
    cf.br ^bb8(%c0 : index)
  ^bb8(%6: index):  // 2 preds: ^bb7, ^bb9
    %7 = arith.cmpi slt, %6, %c7 : index
    cf.cond_br %7, ^bb9, ^bb10
  ^bb9:  // pred: ^bb8
    %8 = arith.muli %0, %c2 : index
    %9 = arith.addi %8, %6 : index
    %10 = memref.load %arg0[%c0, %2, %4, %9] : memref<1x3x230x230xf32>
    %11 = memref.load %arg1[%c0, %2, %4, %6] : memref<64x3x7x7xf32>
    %12 = memref.load %arg2[%c0, %c0, %c0, %0] : memref<1x64x112x112xf32>
    %13 = arith.mulf %10, %11 : f32
    %14 = arith.addf %12, %13 : f32
    memref.store %14, %arg3[%c0, %c0, %c0, %0] : memref<1x64x112x112xf32>
    %15 = arith.addi %6, %c1 : index
    cf.br ^bb8(%15 : index)
  ^bb10:  // pred: ^bb8
    %16 = arith.addi %4, %c1 : index
    cf.br ^bb6(%16 : index)
  ^bb11:  // pred: ^bb6
    %17 = arith.addi %2, %c1 : index
    cf.br ^bb4(%17 : index)
  ^bb12:  // pred: ^bb4
    %18 = arith.addi %0, %c1 : index
    cf.br ^bb2(%18 : index)
  ^bb13:  // pred: ^bb2
    return
  }
  func.func @forward_kernel_3(%arg0: memref<1x64x112x112xf32>, %arg1: memref<64xf32>, %arg2: memref<64xf32>, %arg3: memref<64xf32>, %arg4: memref<64xf32>, %arg5: memref<1x64x112x112xf32>) attributes {Kernel, forward_kernel_3} {
    %c112 = arith.constant 112 : index
    %c1 = arith.constant 1 : index
    %c16 = arith.constant 16 : index
    %c0 = arith.constant 0 : index
    %cst = arith.constant 1.500000e+00 : f32
    %c1597463007_i32 = arith.constant 1597463007 : i32
    %c1_i32 = arith.constant 1 : i32
    %cst_0 = arith.constant 5.000000e-01 : f32
    %cst_1 = arith.constant 1.000000e-05 : f64
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2(%c0 : index)
  ^bb2(%0: index):  // 2 preds: ^bb1, ^bb6
    %1 = arith.cmpi slt, %0, %c16 : index
    cf.cond_br %1, ^bb3, ^bb7
  ^bb3:  // pred: ^bb2
    cf.br ^bb4(%c0 : index)
  ^bb4(%2: index):  // 2 preds: ^bb3, ^bb5
    %3 = arith.cmpi slt, %2, %c112 : index
    cf.cond_br %3, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    %4 = memref.load %arg0[%c0, %c0, %0, %2] : memref<1x64x112x112xf32>
    %5 = memref.load %arg1[%c0] : memref<64xf32>
    %6 = memref.load %arg2[%c0] : memref<64xf32>
    %7 = memref.load %arg3[%c0] : memref<64xf32>
    %8 = memref.load %arg4[%c0] : memref<64xf32>
    %9 = arith.truncf %cst_1 : f64 to f32
    %10 = arith.addf %8, %9 : f32
    %11 = arith.mulf %10, %cst_0 : f32
    %12 = arith.bitcast %10 : f32 to i32
    %13 = arith.shrui %12, %c1_i32 : i32
    %14 = arith.subi %c1597463007_i32, %13 : i32
    %15 = arith.bitcast %14 : i32 to f32
    %16 = arith.mulf %15, %15 : f32
    %17 = arith.mulf %16, %11 : f32
    %18 = arith.subf %cst, %17 : f32
    %19 = arith.mulf %18, %16 : f32
    %20 = arith.subf %4, %7 : f32
    %21 = arith.mulf %20, %19 : f32
    %22 = arith.mulf %21, %5 : f32
    %23 = arith.addf %22, %6 : f32
    memref.store %23, %arg5[%c0, %c0, %0, %2] : memref<1x64x112x112xf32>
    %24 = arith.addi %2, %c1 : index
    cf.br ^bb4(%24 : index)
  ^bb6:  // pred: ^bb4
    %25 = arith.addi %0, %c1 : index
    cf.br ^bb2(%25 : index)
  ^bb7:  // pred: ^bb2
    return
  }
  func.func @forward_kernel_4(%arg0: memref<1x64x112x112xf32>, %arg1: memref<1x64x112x112xf32>) attributes {Kernel, forward_kernel_4} {
    %c112 = arith.constant 112 : index
    %c1 = arith.constant 1 : index
    %c16 = arith.constant 16 : index
    %c0 = arith.constant 0 : index
    %cst = arith.constant 0.000000e+00 : f32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2(%c0 : index)
  ^bb2(%0: index):  // 2 preds: ^bb1, ^bb6
    %1 = arith.cmpi slt, %0, %c16 : index
    cf.cond_br %1, ^bb3, ^bb7
  ^bb3:  // pred: ^bb2
    cf.br ^bb4(%c0 : index)
  ^bb4(%2: index):  // 2 preds: ^bb3, ^bb5
    %3 = arith.cmpi slt, %2, %c112 : index
    cf.cond_br %3, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    %4 = memref.load %arg0[%c0, %c0, %0, %2] : memref<1x64x112x112xf32>
    %5 = arith.cmpf ugt, %4, %cst : f32
    %6 = arith.select %5, %4, %cst : f32
    memref.store %6, %arg1[%c0, %c0, %0, %2] : memref<1x64x112x112xf32>
    %7 = arith.addi %2, %c1 : index
    cf.br ^bb4(%7 : index)
  ^bb6:  // pred: ^bb4
    %8 = arith.addi %0, %c1 : index
    cf.br ^bb2(%8 : index)
  ^bb7:  // pred: ^bb2
    return
  }
  func.func @forward_kernel_5(%arg0: memref<1x64x114x114xf32>) attributes {Kernel, forward_kernel_5} {
    %c114 = arith.constant 114 : index
    %c1 = arith.constant 1 : index
    %c6 = arith.constant 6 : index
    %c0 = arith.constant 0 : index
    %cst = arith.constant 0xFF800000 : f32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2(%c0 : index)
  ^bb2(%0: index):  // 2 preds: ^bb1, ^bb6
    %1 = arith.cmpi slt, %0, %c6 : index
    cf.cond_br %1, ^bb3, ^bb7
  ^bb3:  // pred: ^bb2
    cf.br ^bb4(%c0 : index)
  ^bb4(%2: index):  // 2 preds: ^bb3, ^bb5
    %3 = arith.cmpi slt, %2, %c114 : index
    cf.cond_br %3, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    memref.store %cst, %arg0[%c0, %c0, %0, %2] : memref<1x64x114x114xf32>
    %4 = arith.addi %2, %c1 : index
    cf.br ^bb4(%4 : index)
  ^bb6:  // pred: ^bb4
    %5 = arith.addi %0, %c1 : index
    cf.br ^bb2(%5 : index)
  ^bb7:  // pred: ^bb2
    return
  }
  func.func @forward_kernel_6(%arg0: memref<1x64x56x56xf32>) attributes {Kernel, forward_kernel_6} {
    %c56 = arith.constant 56 : index
    %c1 = arith.constant 1 : index
    %c28 = arith.constant 28 : index
    %c0 = arith.constant 0 : index
    %cst = arith.constant 0xFF800000 : f32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2(%c0 : index)
  ^bb2(%0: index):  // 2 preds: ^bb1, ^bb6
    %1 = arith.cmpi slt, %0, %c28 : index
    cf.cond_br %1, ^bb3, ^bb7
  ^bb3:  // pred: ^bb2
    cf.br ^bb4(%c0 : index)
  ^bb4(%2: index):  // 2 preds: ^bb3, ^bb5
    %3 = arith.cmpi slt, %2, %c56 : index
    cf.cond_br %3, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    memref.store %cst, %arg0[%c0, %c0, %0, %2] : memref<1x64x56x56xf32>
    %4 = arith.addi %2, %c1 : index
    cf.br ^bb4(%4 : index)
  ^bb6:  // pred: ^bb4
    %5 = arith.addi %0, %c1 : index
    cf.br ^bb2(%5 : index)
  ^bb7:  // pred: ^bb2
    return
  }
  func.func @forward_kernel_7(%arg0: memref<1x64x114x114xf32>, %arg1: memref<1x64x56x56xf32>, %arg2: memref<1x64x56x56xf32>) attributes {Kernel, forward_kernel_7} {
    %c2 = arith.constant 2 : index
    %c3 = arith.constant 3 : index
    %c56 = arith.constant 56 : index
    %c1 = arith.constant 1 : index
    %c4 = arith.constant 4 : index
    %c0 = arith.constant 0 : index
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2(%c0 : index)
  ^bb2(%0: index):  // 2 preds: ^bb1, ^bb12
    %1 = arith.cmpi slt, %0, %c4 : index
    cf.cond_br %1, ^bb3, ^bb13
  ^bb3:  // pred: ^bb2
    cf.br ^bb4(%c0 : index)
  ^bb4(%2: index):  // 2 preds: ^bb3, ^bb11
    %3 = arith.cmpi slt, %2, %c56 : index
    cf.cond_br %3, ^bb5, ^bb12
  ^bb5:  // pred: ^bb4
    cf.br ^bb6(%c0 : index)
  ^bb6(%4: index):  // 2 preds: ^bb5, ^bb10
    %5 = arith.cmpi slt, %4, %c3 : index
    cf.cond_br %5, ^bb7, ^bb11
  ^bb7:  // pred: ^bb6
    cf.br ^bb8(%c0 : index)
  ^bb8(%6: index):  // 2 preds: ^bb7, ^bb9
    %7 = arith.cmpi slt, %6, %c3 : index
    cf.cond_br %7, ^bb9, ^bb10
  ^bb9:  // pred: ^bb8
    %8 = arith.muli %0, %c2 : index
    %9 = arith.addi %8, %4 : index
    %10 = arith.muli %2, %c2 : index
    %11 = arith.addi %10, %6 : index
    %12 = memref.load %arg0[%c0, %c0, %9, %11] : memref<1x64x114x114xf32>
    %13 = memref.load %arg1[%c0, %c0, %0, %2] : memref<1x64x56x56xf32>
    %14 = arith.cmpf ugt, %13, %12 : f32
    %15 = arith.select %14, %13, %12 : f32
    %16 = arith.cmpf uno, %12, %12 : f32
    %17 = arith.select %16, %12, %15 : f32
    memref.store %17, %arg2[%c0, %c0, %0, %2] : memref<1x64x56x56xf32>
    %18 = arith.addi %6, %c1 : index
    cf.br ^bb8(%18 : index)
  ^bb10:  // pred: ^bb8
    %19 = arith.addi %4, %c1 : index
    cf.br ^bb6(%19 : index)
  ^bb11:  // pred: ^bb6
    %20 = arith.addi %2, %c1 : index
    cf.br ^bb4(%20 : index)
  ^bb12:  // pred: ^bb4
    %21 = arith.addi %0, %c1 : index
    cf.br ^bb2(%21 : index)
  ^bb13:  // pred: ^bb2
    return
  }
}


// -----// IR Dump After ConvertMathToLLVMPass (convert-math-to-llvm) //----- //
module attributes {torch.debug_module_name = "ResNet"} {
  memref.global "private" constant @__constant_64xf32_2 : memref<64xf32> = dense<[0.230717152, 0.253822476, -1.05429808E-6, -0.664388895, -1.65705547E-8, 0.161521927, 0.454503953, -4.301950e-07, 0.300513744, -8.005240e-06, 0.349418074, 0.311480612, -0.249529764, -3.474890e-05, 0.107726313, 0.218970656, 0.381412596, -0.529882133, -0.628644109, 0.571398079, 0.299846917, 0.584303737, 0.48202154, 0.328526348, 0.196717009, 0.194961801, 0.152145416, 0.085522361, 0.513142824, 0.0152367353, 0.166441768, 0.332394391, 0.249211237, 0.443366677, -0.280169278, -0.0203848016, -2.45068748E-7, 0.321340501, -4.9151744E-8, 0.237767309, 0.232907727, 0.315274626, 0.427762389, 0.293127537, 0.263794243, 0.675975859, 0.429100394, 0.345662743, -8.69090186E-8, 0.247294366, 0.303160846, 0.615772783, 0.39834857, 0.332067341, -0.412187815, 0.378069043, 0.178953409, 0.25747788, -0.449079722, 0.213058949, 0.569339037, 5.727430e-01, -0.402383476, 0.23406373]>
  memref.global "private" constant @__constant_64xf32_1 : memref<64xf32> = dense<[0.234872743, 0.266257942, -5.10959595E-8, 0.518699706, 3.44040196E-9, 0.222385287, 0.422887057, 1.31532403E-7, 0.25093165, 1.5152026E-6, 0.316871643, 0.250491828, 0.378926098, 1.08618351E-5, 2.752640e-01, 0.236741036, 0.242021769, 0.395314813, 0.469346285, 0.2908957, 0.272684187, 0.27802828, 0.290692091, 0.206927493, 0.258990377, 0.278710574, 0.291149527, 0.316013753, 0.388891488, 0.304111898, 0.267757207, 0.210925162, 0.287084132, 0.332426429, 0.42672804, 0.373260558, 7.48037578E-8, 0.19067812, 1.47401256E-8, 0.223029822, 0.179079413, 0.248600766, 0.27399528, 0.259228647, 0.294202209, 0.299236417, 0.223688841, 0.262799472, 2.20011476E-8, 0.266098082, 0.220890298, 0.284285516, 0.330723315, 0.226809531, 0.365380913, 0.21229881, 0.239653021, 0.24949576, 0.525830686, 0.248247579, 0.295652747, 0.258776665, 0.4832564, 0.26670444]>
  memref.global "private" constant @__constant_64xf32_0 : memref<64xf32> = dense<[1.01694489, 3.71674347, 5.81334356E-11, 3.28254271, 1.71074404E-13, 0.658226967, 4.37006235, 6.60045282E-12, 0.915522992, 1.93175254E-9, 4.12558556, 2.74399233, 2.8390913, 4.79658588E-8, 11.0722713, 0.500745952, 2.23128176, 4.82570696, 2.69861364, 9.36995506, 3.73391747, 5.48429585, 5.7126689, 0.445444882, 0.436275303, 7.15633583, 13.7179089, 5.25117493, 6.81737518, 1.67235756, 1.65343034, 1.23245978, 4.90762854, 3.07305121, 4.23838568, 4.99363518, 1.44646307E-12, 1.52116203, 1.03519833E-13, 0.351344079, 0.17024748, 1.42054474, 1.90848303, 2.15124035, 2.66084933, 4.84443378, 1.92971194, 1.49994361, 2.94806145E-13, 1.53064024, 0.365027189, 2.93755412, 5.46641159, 0.707924544, 3.33150721, 0.771802961, 2.40678358, 6.5213666, 4.12625027, 1.05063522, 2.95303202, 11.3656216, 4.76904678, 1.65587807]>
  memref.global "private" constant @__constant_64xf32 : memref<64xf32> = dense<[0.00276811025, -0.0257689245, 2.12544663E-7, -0.0846051499, 2.11205915E-8, 4.96906461E-4, -0.0224083271, -1.15818956E-7, -4.823850e-03, 2.75073347E-7, 3.958230e-02, 0.0319936387, -0.0374896601, -1.37163477E-6, 0.00660019321, 4.378190e-03, 0.0647971481, 0.11175999, 0.0360015705, -0.0750752166, -0.03824009, 0.0843578502, -5.228700e-02, -0.0117988894, 0.00130188058, 0.0321722962, -0.0177843049, -0.0910085887, 0.113187239, -0.0416320041, 0.00873024761, 0.0296931695, -0.0705021694, -0.00348469778, 0.109771468, -0.00173411821, -5.94229412E-8, 0.0293303896, -7.85527287E-9, 0.00673204474, -0.00370999542, 0.0160279572, -0.0278826058, 0.0265925378, 0.0284745526, -0.12734659, 0.0446168408, 0.0263288375, 2.14538591E-8, -1.704500e-02, -0.00356168114, -0.0458412617, 0.0638761446, 0.0152198272, -0.0385114551, -0.0164278317, -0.016568929, 0.0560574941, -0.0803062319, -0.00266457512, -0.0417176671, 0.126112729, -0.0492369682, -0.0132609205]>
  memref.global "private" constant @__constant_64x3x7x7xf32 : memref<64x3x7x7xf32> = dense<"
  ml_program.global private mutable @global_seed(dense<0> : tensor<i64>) : tensor<i64>
  func.func @forward(%arg0: memref<1x3x224x224xf32>) -> memref<1x64x56x56xf32> {
    %c4 = arith.constant 4 : index
    %c28 = arith.constant 28 : index
    %c56 = arith.constant 56 : index
    %c6 = arith.constant 6 : index
    %c114 = arith.constant 114 : index
    %c8 = arith.constant 8 : index
    %c16 = arith.constant 16 : index
    %c112 = arith.constant 112 : index
    %c64 = arith.constant 64 : index
    %c5 = arith.constant 5 : index
    %c230 = arith.constant 230 : index
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %0 = memref.get_global @__constant_64x3x7x7xf32 : memref<64x3x7x7xf32>
    %1 = memref.get_global @__constant_64xf32 : memref<64xf32>
    %2 = memref.get_global @__constant_64xf32_0 : memref<64xf32>
    %3 = memref.get_global @__constant_64xf32_1 : memref<64xf32>
    %4 = memref.get_global @__constant_64xf32_2 : memref<64xf32>
    %alloc = memref.alloc() {alignment = 64 : i64} : memref<1x3x230x230xf32>
    cf.br ^bb1(%c0 : index)
  ^bb1(%5: index):  // 2 preds: ^bb0, ^bb8
    %6 = arith.cmpi slt, %5, %c1 : index
    cf.cond_br %6, ^bb2, ^bb9
  ^bb2:  // pred: ^bb1
    cf.br ^bb3(%c0 : index)
  ^bb3(%7: index):  // 2 preds: ^bb2, ^bb7
    %8 = arith.cmpi slt, %7, %c3 : index
    cf.cond_br %8, ^bb4, ^bb8
  ^bb4:  // pred: ^bb3
    cf.br ^bb5(%c0 : index)
  ^bb5(%9: index):  // 2 preds: ^bb4, ^bb6
    %10 = arith.cmpi slt, %9, %c230 : index
    cf.cond_br %10, ^bb6, ^bb7
  ^bb6:  // pred: ^bb5
    %11 = FDRA.BlockLoad %alloc [0, %7, %9, 0] : memref<1x3x230x230xf32> -> memref<1x3x230x230xf32> {"forward_kernel_0"}
    FDRA.KernelCall @forward_kernel_0(%11) : (memref<1x3x230x230xf32>) -> ()
    FDRA.BlockStore %11,  %alloc [0, %7, %9, 0] : memref<1x3x230x230xf32> -> memref<1x3x230x230xf32> {"forward_kernel_0"}
    %12 = arith.addi %9, %c5 : index
    cf.br ^bb5(%12 : index)
  ^bb7:  // pred: ^bb5
    %13 = arith.addi %7, %c1 : index
    cf.br ^bb3(%13 : index)
  ^bb8:  // pred: ^bb3
    %14 = arith.addi %5, %c1 : index
    cf.br ^bb1(%14 : index)
  ^bb9:  // pred: ^bb1
    %alloc_0 = memref.alloc() {alignment = 64 : i64} : memref<1x3x230x230xf32>
    memref.copy %alloc, %alloc_0 : memref<1x3x230x230xf32> to memref<1x3x230x230xf32>
    %reinterpret_cast = memref.reinterpret_cast %alloc_0 to offset: [693], sizes: [1, 3, 224, 224], strides: [158700, 52900, 230, 1] : memref<1x3x230x230xf32> to memref<1x3x224x224xf32, strided<[158700, 52900, 230, 1], offset: 693>>
    memref.copy %arg0, %reinterpret_cast : memref<1x3x224x224xf32> to memref<1x3x224x224xf32, strided<[158700, 52900, 230, 1], offset: 693>>
    %alloc_1 = memref.alloc() {alignment = 64 : i64} : memref<1x64x112x112xf32>
    cf.br ^bb10(%c0 : index)
  ^bb10(%15: index):  // 2 preds: ^bb9, ^bb17
    %16 = arith.cmpi slt, %15, %c1 : index
    cf.cond_br %16, ^bb11, ^bb18
  ^bb11:  // pred: ^bb10
    cf.br ^bb12(%c0 : index)
  ^bb12(%17: index):  // 2 preds: ^bb11, ^bb16
    %18 = arith.cmpi slt, %17, %c64 : index
    cf.cond_br %18, ^bb13, ^bb17
  ^bb13:  // pred: ^bb12
    cf.br ^bb14(%c0 : index)
  ^bb14(%19: index):  // 2 preds: ^bb13, ^bb15
    %20 = arith.cmpi slt, %19, %c112 : index
    cf.cond_br %20, ^bb15, ^bb16
  ^bb15:  // pred: ^bb14
    %21 = FDRA.BlockLoad %alloc_1 [0, %17, %19, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_1"}
    FDRA.KernelCall @forward_kernel_1(%21) : (memref<1x64x112x112xf32>) -> ()
    FDRA.BlockStore %21,  %alloc_1 [0, %17, %19, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_1"}
    %22 = arith.addi %19, %c16 : index
    cf.br ^bb14(%22 : index)
  ^bb16:  // pred: ^bb14
    %23 = arith.addi %17, %c1 : index
    cf.br ^bb12(%23 : index)
  ^bb17:  // pred: ^bb12
    %24 = arith.addi %15, %c1 : index
    cf.br ^bb10(%24 : index)
  ^bb18:  // pred: ^bb10
    %alloc_2 = memref.alloc() {alignment = 64 : i64} : memref<1x64x112x112xf32>
    memref.copy %alloc_1, %alloc_2 : memref<1x64x112x112xf32> to memref<1x64x112x112xf32>
    cf.br ^bb19(%c0 : index)
  ^bb19(%25: index):  // 2 preds: ^bb18, ^bb29
    %26 = arith.cmpi slt, %25, %c1 : index
    cf.cond_br %26, ^bb20, ^bb30
  ^bb20:  // pred: ^bb19
    cf.br ^bb21(%c0 : index)
  ^bb21(%27: index):  // 2 preds: ^bb20, ^bb28
    %28 = arith.cmpi slt, %27, %c64 : index
    cf.cond_br %28, ^bb22, ^bb29
  ^bb22:  // pred: ^bb21
    cf.br ^bb23(%c0 : index)
  ^bb23(%29: index):  // 2 preds: ^bb22, ^bb27
    %30 = arith.cmpi slt, %29, %c112 : index
    cf.cond_br %30, ^bb24, ^bb28
  ^bb24:  // pred: ^bb23
    cf.br ^bb25(%c0 : index)
  ^bb25(%31: index):  // 2 preds: ^bb24, ^bb26
    %32 = arith.cmpi slt, %31, %c112 : index
    cf.cond_br %32, ^bb26, ^bb27
  ^bb26:  // pred: ^bb25
    %33 = FDRA.BlockLoad %alloc_0 [0, 0, %29 * 2, %31 * 2] : memref<1x3x230x230xf32> -> memref<1x3x230x230xf32> {"forward_kernel_2"}
    %34 = FDRA.BlockLoad %0 [%27, 0, 0, 0] : memref<64x3x7x7xf32> -> memref<64x3x7x7xf32> {"forward_kernel_2"}
    %35 = FDRA.BlockLoad %alloc_2 [0, %27, %29, %31] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_2"}
    %36 = FDRA.BlockLoad %alloc_2 [0, %27, %29, %31] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_2"}
    FDRA.KernelCall @forward_kernel_2(%33, %34, %35, %36) : (memref<1x3x230x230xf32>, memref<64x3x7x7xf32>, memref<1x64x112x112xf32>, memref<1x64x112x112xf32>) -> ()
    FDRA.BlockStore %36,  %alloc_2 [0, %27, %29, %31] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_2"}
    %37 = arith.addi %31, %c8 : index
    cf.br ^bb25(%37 : index)
  ^bb27:  // pred: ^bb25
    %38 = arith.addi %29, %c1 : index
    cf.br ^bb23(%38 : index)
  ^bb28:  // pred: ^bb23
    %39 = arith.addi %27, %c1 : index
    cf.br ^bb21(%39 : index)
  ^bb29:  // pred: ^bb21
    %40 = arith.addi %25, %c1 : index
    cf.br ^bb19(%40 : index)
  ^bb30:  // pred: ^bb19
    %alloc_3 = memref.alloc() {alignment = 64 : i64} : memref<1x64x112x112xf32>
    cf.br ^bb31(%c0 : index)
  ^bb31(%41: index):  // 2 preds: ^bb30, ^bb38
    %42 = arith.cmpi slt, %41, %c1 : index
    cf.cond_br %42, ^bb32, ^bb39
  ^bb32:  // pred: ^bb31
    cf.br ^bb33(%c0 : index)
  ^bb33(%43: index):  // 2 preds: ^bb32, ^bb37
    %44 = arith.cmpi slt, %43, %c64 : index
    cf.cond_br %44, ^bb34, ^bb38
  ^bb34:  // pred: ^bb33
    cf.br ^bb35(%c0 : index)
  ^bb35(%45: index):  // 2 preds: ^bb34, ^bb36
    %46 = arith.cmpi slt, %45, %c112 : index
    cf.cond_br %46, ^bb36, ^bb37
  ^bb36:  // pred: ^bb35
    %47 = FDRA.BlockLoad %alloc_2 [0, %43, %45, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_3"}
    %48 = FDRA.BlockLoad %3 [%43] : memref<64xf32> -> memref<64xf32> {"forward_kernel_3"}
    %49 = FDRA.BlockLoad %4 [%43] : memref<64xf32> -> memref<64xf32> {"forward_kernel_3"}
    %50 = FDRA.BlockLoad %1 [%43] : memref<64xf32> -> memref<64xf32> {"forward_kernel_3"}
    %51 = FDRA.BlockLoad %2 [%43] : memref<64xf32> -> memref<64xf32> {"forward_kernel_3"}
    %52 = FDRA.BlockLoad %alloc_3 [0, %43, %45, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_3"}
    FDRA.KernelCall @forward_kernel_3(%47, %48, %49, %50, %51, %52) : (memref<1x64x112x112xf32>, memref<64xf32>, memref<64xf32>, memref<64xf32>, memref<64xf32>, memref<1x64x112x112xf32>) -> ()
    FDRA.BlockStore %52,  %alloc_3 [0, %43, %45, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_3"}
    %53 = arith.addi %45, %c16 : index
    cf.br ^bb35(%53 : index)
  ^bb37:  // pred: ^bb35
    %54 = arith.addi %43, %c1 : index
    cf.br ^bb33(%54 : index)
  ^bb38:  // pred: ^bb33
    %55 = arith.addi %41, %c1 : index
    cf.br ^bb31(%55 : index)
  ^bb39:  // pred: ^bb31
    %alloc_4 = memref.alloc() {alignment = 64 : i64} : memref<1x64x112x112xf32>
    cf.br ^bb40(%c0 : index)
  ^bb40(%56: index):  // 2 preds: ^bb39, ^bb47
    %57 = arith.cmpi slt, %56, %c1 : index
    cf.cond_br %57, ^bb41, ^bb48
  ^bb41:  // pred: ^bb40
    cf.br ^bb42(%c0 : index)
  ^bb42(%58: index):  // 2 preds: ^bb41, ^bb46
    %59 = arith.cmpi slt, %58, %c64 : index
    cf.cond_br %59, ^bb43, ^bb47
  ^bb43:  // pred: ^bb42
    cf.br ^bb44(%c0 : index)
  ^bb44(%60: index):  // 2 preds: ^bb43, ^bb45
    %61 = arith.cmpi slt, %60, %c112 : index
    cf.cond_br %61, ^bb45, ^bb46
  ^bb45:  // pred: ^bb44
    %62 = FDRA.BlockLoad %alloc_3 [0, %58, %60, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_4"}
    %63 = FDRA.BlockLoad %alloc_4 [0, %58, %60, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_4"}
    FDRA.KernelCall @forward_kernel_4(%62, %63) : (memref<1x64x112x112xf32>, memref<1x64x112x112xf32>) -> ()
    FDRA.BlockStore %63,  %alloc_4 [0, %58, %60, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_4"}
    %64 = arith.addi %60, %c16 : index
    cf.br ^bb44(%64 : index)
  ^bb46:  // pred: ^bb44
    %65 = arith.addi %58, %c1 : index
    cf.br ^bb42(%65 : index)
  ^bb47:  // pred: ^bb42
    %66 = arith.addi %56, %c1 : index
    cf.br ^bb40(%66 : index)
  ^bb48:  // pred: ^bb40
    %alloc_5 = memref.alloc() {alignment = 64 : i64} : memref<1x64x114x114xf32>
    cf.br ^bb49(%c0 : index)
  ^bb49(%67: index):  // 2 preds: ^bb48, ^bb56
    %68 = arith.cmpi slt, %67, %c1 : index
    cf.cond_br %68, ^bb50, ^bb57
  ^bb50:  // pred: ^bb49
    cf.br ^bb51(%c0 : index)
  ^bb51(%69: index):  // 2 preds: ^bb50, ^bb55
    %70 = arith.cmpi slt, %69, %c64 : index
    cf.cond_br %70, ^bb52, ^bb56
  ^bb52:  // pred: ^bb51
    cf.br ^bb53(%c0 : index)
  ^bb53(%71: index):  // 2 preds: ^bb52, ^bb54
    %72 = arith.cmpi slt, %71, %c114 : index
    cf.cond_br %72, ^bb54, ^bb55
  ^bb54:  // pred: ^bb53
    %73 = FDRA.BlockLoad %alloc_5 [0, %69, %71, 0] : memref<1x64x114x114xf32> -> memref<1x64x114x114xf32> {"forward_kernel_5"}
    FDRA.KernelCall @forward_kernel_5(%73) : (memref<1x64x114x114xf32>) -> ()
    FDRA.BlockStore %73,  %alloc_5 [0, %69, %71, 0] : memref<1x64x114x114xf32> -> memref<1x64x114x114xf32> {"forward_kernel_5"}
    %74 = arith.addi %71, %c6 : index
    cf.br ^bb53(%74 : index)
  ^bb55:  // pred: ^bb53
    %75 = arith.addi %69, %c1 : index
    cf.br ^bb51(%75 : index)
  ^bb56:  // pred: ^bb51
    %76 = arith.addi %67, %c1 : index
    cf.br ^bb49(%76 : index)
  ^bb57:  // pred: ^bb49
    %alloc_6 = memref.alloc() {alignment = 64 : i64} : memref<1x64x114x114xf32>
    memref.copy %alloc_5, %alloc_6 : memref<1x64x114x114xf32> to memref<1x64x114x114xf32>
    %reinterpret_cast_7 = memref.reinterpret_cast %alloc_6 to offset: [115], sizes: [1, 64, 112, 112], strides: [831744, 12996, 114, 1] : memref<1x64x114x114xf32> to memref<1x64x112x112xf32, strided<[831744, 12996, 114, 1], offset: 115>>
    memref.copy %alloc_4, %reinterpret_cast_7 : memref<1x64x112x112xf32> to memref<1x64x112x112xf32, strided<[831744, 12996, 114, 1], offset: 115>>
    %alloc_8 = memref.alloc() {alignment = 64 : i64} : memref<1x64x56x56xf32>
    cf.br ^bb58(%c0 : index)
  ^bb58(%77: index):  // 2 preds: ^bb57, ^bb65
    %78 = arith.cmpi slt, %77, %c1 : index
    cf.cond_br %78, ^bb59, ^bb66
  ^bb59:  // pred: ^bb58
    cf.br ^bb60(%c0 : index)
  ^bb60(%79: index):  // 2 preds: ^bb59, ^bb64
    %80 = arith.cmpi slt, %79, %c64 : index
    cf.cond_br %80, ^bb61, ^bb65
  ^bb61:  // pred: ^bb60
    cf.br ^bb62(%c0 : index)
  ^bb62(%81: index):  // 2 preds: ^bb61, ^bb63
    %82 = arith.cmpi slt, %81, %c56 : index
    cf.cond_br %82, ^bb63, ^bb64
  ^bb63:  // pred: ^bb62
    %83 = FDRA.BlockLoad %alloc_8 [0, %79, %81, 0] : memref<1x64x56x56xf32> -> memref<1x64x56x56xf32> {"forward_kernel_6"}
    FDRA.KernelCall @forward_kernel_6(%83) : (memref<1x64x56x56xf32>) -> ()
    FDRA.BlockStore %83,  %alloc_8 [0, %79, %81, 0] : memref<1x64x56x56xf32> -> memref<1x64x56x56xf32> {"forward_kernel_6"}
    %84 = arith.addi %81, %c28 : index
    cf.br ^bb62(%84 : index)
  ^bb64:  // pred: ^bb62
    %85 = arith.addi %79, %c1 : index
    cf.br ^bb60(%85 : index)
  ^bb65:  // pred: ^bb60
    %86 = arith.addi %77, %c1 : index
    cf.br ^bb58(%86 : index)
  ^bb66:  // pred: ^bb58
    %alloc_9 = memref.alloc() {alignment = 64 : i64} : memref<1x64x56x56xf32>
    memref.copy %alloc_8, %alloc_9 : memref<1x64x56x56xf32> to memref<1x64x56x56xf32>
    cf.br ^bb67(%c0 : index)
  ^bb67(%87: index):  // 2 preds: ^bb66, ^bb74
    %88 = arith.cmpi slt, %87, %c1 : index
    cf.cond_br %88, ^bb68, ^bb75
  ^bb68:  // pred: ^bb67
    cf.br ^bb69(%c0 : index)
  ^bb69(%89: index):  // 2 preds: ^bb68, ^bb73
    %90 = arith.cmpi slt, %89, %c64 : index
    cf.cond_br %90, ^bb70, ^bb74
  ^bb70:  // pred: ^bb69
    cf.br ^bb71(%c0 : index)
  ^bb71(%91: index):  // 2 preds: ^bb70, ^bb72
    %92 = arith.cmpi slt, %91, %c56 : index
    cf.cond_br %92, ^bb72, ^bb73
  ^bb72:  // pred: ^bb71
    %93 = FDRA.BlockLoad %alloc_6 [0, %89, %91 * 2, 0] : memref<1x64x114x114xf32> -> memref<1x64x114x114xf32> {"forward_kernel_7"}
    %94 = FDRA.BlockLoad %alloc_9 [0, %89, %91, 0] : memref<1x64x56x56xf32> -> memref<1x64x56x56xf32> {"forward_kernel_7"}
    %95 = FDRA.BlockLoad %alloc_9 [0, %89, %91, 0] : memref<1x64x56x56xf32> -> memref<1x64x56x56xf32> {"forward_kernel_7"}
    FDRA.KernelCall @forward_kernel_7(%93, %94, %95) : (memref<1x64x114x114xf32>, memref<1x64x56x56xf32>, memref<1x64x56x56xf32>) -> ()
    FDRA.BlockStore %95,  %alloc_9 [0, %89, %91, 0] : memref<1x64x56x56xf32> -> memref<1x64x56x56xf32> {"forward_kernel_7"}
    %96 = arith.addi %91, %c4 : index
    cf.br ^bb71(%96 : index)
  ^bb73:  // pred: ^bb71
    %97 = arith.addi %89, %c1 : index
    cf.br ^bb69(%97 : index)
  ^bb74:  // pred: ^bb69
    %98 = arith.addi %87, %c1 : index
    cf.br ^bb67(%98 : index)
  ^bb75:  // pred: ^bb67
    return %alloc_9 : memref<1x64x56x56xf32>
  }
  func.func @forward_kernel_0(%arg0: memref<1x3x230x230xf32>) attributes {Kernel, forward_kernel_0} {
    %c230 = arith.constant 230 : index
    %c1 = arith.constant 1 : index
    %c5 = arith.constant 5 : index
    %c0 = arith.constant 0 : index
    %cst = arith.constant 0.000000e+00 : f32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2(%c0 : index)
  ^bb2(%0: index):  // 2 preds: ^bb1, ^bb6
    %1 = arith.cmpi slt, %0, %c5 : index
    cf.cond_br %1, ^bb3, ^bb7
  ^bb3:  // pred: ^bb2
    cf.br ^bb4(%c0 : index)
  ^bb4(%2: index):  // 2 preds: ^bb3, ^bb5
    %3 = arith.cmpi slt, %2, %c230 : index
    cf.cond_br %3, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    memref.store %cst, %arg0[%c0, %c0, %0, %2] : memref<1x3x230x230xf32>
    %4 = arith.addi %2, %c1 : index
    cf.br ^bb4(%4 : index)
  ^bb6:  // pred: ^bb4
    %5 = arith.addi %0, %c1 : index
    cf.br ^bb2(%5 : index)
  ^bb7:  // pred: ^bb2
    return
  }
  func.func @forward_kernel_1(%arg0: memref<1x64x112x112xf32>) attributes {Kernel, forward_kernel_1} {
    %c112 = arith.constant 112 : index
    %c1 = arith.constant 1 : index
    %c16 = arith.constant 16 : index
    %c0 = arith.constant 0 : index
    %cst = arith.constant 0.000000e+00 : f32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2(%c0 : index)
  ^bb2(%0: index):  // 2 preds: ^bb1, ^bb6
    %1 = arith.cmpi slt, %0, %c16 : index
    cf.cond_br %1, ^bb3, ^bb7
  ^bb3:  // pred: ^bb2
    cf.br ^bb4(%c0 : index)
  ^bb4(%2: index):  // 2 preds: ^bb3, ^bb5
    %3 = arith.cmpi slt, %2, %c112 : index
    cf.cond_br %3, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    memref.store %cst, %arg0[%c0, %c0, %0, %2] : memref<1x64x112x112xf32>
    %4 = arith.addi %2, %c1 : index
    cf.br ^bb4(%4 : index)
  ^bb6:  // pred: ^bb4
    %5 = arith.addi %0, %c1 : index
    cf.br ^bb2(%5 : index)
  ^bb7:  // pred: ^bb2
    return
  }
  func.func @forward_kernel_2(%arg0: memref<1x3x230x230xf32>, %arg1: memref<64x3x7x7xf32>, %arg2: memref<1x64x112x112xf32>, %arg3: memref<1x64x112x112xf32>) attributes {Kernel, forward_kernel_2} {
    %c2 = arith.constant 2 : index
    %c7 = arith.constant 7 : index
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c8 = arith.constant 8 : index
    %c0 = arith.constant 0 : index
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2(%c0 : index)
  ^bb2(%0: index):  // 2 preds: ^bb1, ^bb12
    %1 = arith.cmpi slt, %0, %c8 : index
    cf.cond_br %1, ^bb3, ^bb13
  ^bb3:  // pred: ^bb2
    cf.br ^bb4(%c0 : index)
  ^bb4(%2: index):  // 2 preds: ^bb3, ^bb11
    %3 = arith.cmpi slt, %2, %c3 : index
    cf.cond_br %3, ^bb5, ^bb12
  ^bb5:  // pred: ^bb4
    cf.br ^bb6(%c0 : index)
  ^bb6(%4: index):  // 2 preds: ^bb5, ^bb10
    %5 = arith.cmpi slt, %4, %c7 : index
    cf.cond_br %5, ^bb7, ^bb11
  ^bb7:  // pred: ^bb6
    cf.br ^bb8(%c0 : index)
  ^bb8(%6: index):  // 2 preds: ^bb7, ^bb9
    %7 = arith.cmpi slt, %6, %c7 : index
    cf.cond_br %7, ^bb9, ^bb10
  ^bb9:  // pred: ^bb8
    %8 = arith.muli %0, %c2 : index
    %9 = arith.addi %8, %6 : index
    %10 = memref.load %arg0[%c0, %2, %4, %9] : memref<1x3x230x230xf32>
    %11 = memref.load %arg1[%c0, %2, %4, %6] : memref<64x3x7x7xf32>
    %12 = memref.load %arg2[%c0, %c0, %c0, %0] : memref<1x64x112x112xf32>
    %13 = arith.mulf %10, %11 : f32
    %14 = arith.addf %12, %13 : f32
    memref.store %14, %arg3[%c0, %c0, %c0, %0] : memref<1x64x112x112xf32>
    %15 = arith.addi %6, %c1 : index
    cf.br ^bb8(%15 : index)
  ^bb10:  // pred: ^bb8
    %16 = arith.addi %4, %c1 : index
    cf.br ^bb6(%16 : index)
  ^bb11:  // pred: ^bb6
    %17 = arith.addi %2, %c1 : index
    cf.br ^bb4(%17 : index)
  ^bb12:  // pred: ^bb4
    %18 = arith.addi %0, %c1 : index
    cf.br ^bb2(%18 : index)
  ^bb13:  // pred: ^bb2
    return
  }
  func.func @forward_kernel_3(%arg0: memref<1x64x112x112xf32>, %arg1: memref<64xf32>, %arg2: memref<64xf32>, %arg3: memref<64xf32>, %arg4: memref<64xf32>, %arg5: memref<1x64x112x112xf32>) attributes {Kernel, forward_kernel_3} {
    %c112 = arith.constant 112 : index
    %c1 = arith.constant 1 : index
    %c16 = arith.constant 16 : index
    %c0 = arith.constant 0 : index
    %cst = arith.constant 1.500000e+00 : f32
    %c1597463007_i32 = arith.constant 1597463007 : i32
    %c1_i32 = arith.constant 1 : i32
    %cst_0 = arith.constant 5.000000e-01 : f32
    %cst_1 = arith.constant 1.000000e-05 : f64
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2(%c0 : index)
  ^bb2(%0: index):  // 2 preds: ^bb1, ^bb6
    %1 = arith.cmpi slt, %0, %c16 : index
    cf.cond_br %1, ^bb3, ^bb7
  ^bb3:  // pred: ^bb2
    cf.br ^bb4(%c0 : index)
  ^bb4(%2: index):  // 2 preds: ^bb3, ^bb5
    %3 = arith.cmpi slt, %2, %c112 : index
    cf.cond_br %3, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    %4 = memref.load %arg0[%c0, %c0, %0, %2] : memref<1x64x112x112xf32>
    %5 = memref.load %arg1[%c0] : memref<64xf32>
    %6 = memref.load %arg2[%c0] : memref<64xf32>
    %7 = memref.load %arg3[%c0] : memref<64xf32>
    %8 = memref.load %arg4[%c0] : memref<64xf32>
    %9 = arith.truncf %cst_1 : f64 to f32
    %10 = arith.addf %8, %9 : f32
    %11 = arith.mulf %10, %cst_0 : f32
    %12 = arith.bitcast %10 : f32 to i32
    %13 = arith.shrui %12, %c1_i32 : i32
    %14 = arith.subi %c1597463007_i32, %13 : i32
    %15 = arith.bitcast %14 : i32 to f32
    %16 = arith.mulf %15, %15 : f32
    %17 = arith.mulf %16, %11 : f32
    %18 = arith.subf %cst, %17 : f32
    %19 = arith.mulf %18, %16 : f32
    %20 = arith.subf %4, %7 : f32
    %21 = arith.mulf %20, %19 : f32
    %22 = arith.mulf %21, %5 : f32
    %23 = arith.addf %22, %6 : f32
    memref.store %23, %arg5[%c0, %c0, %0, %2] : memref<1x64x112x112xf32>
    %24 = arith.addi %2, %c1 : index
    cf.br ^bb4(%24 : index)
  ^bb6:  // pred: ^bb4
    %25 = arith.addi %0, %c1 : index
    cf.br ^bb2(%25 : index)
  ^bb7:  // pred: ^bb2
    return
  }
  func.func @forward_kernel_4(%arg0: memref<1x64x112x112xf32>, %arg1: memref<1x64x112x112xf32>) attributes {Kernel, forward_kernel_4} {
    %c112 = arith.constant 112 : index
    %c1 = arith.constant 1 : index
    %c16 = arith.constant 16 : index
    %c0 = arith.constant 0 : index
    %cst = arith.constant 0.000000e+00 : f32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2(%c0 : index)
  ^bb2(%0: index):  // 2 preds: ^bb1, ^bb6
    %1 = arith.cmpi slt, %0, %c16 : index
    cf.cond_br %1, ^bb3, ^bb7
  ^bb3:  // pred: ^bb2
    cf.br ^bb4(%c0 : index)
  ^bb4(%2: index):  // 2 preds: ^bb3, ^bb5
    %3 = arith.cmpi slt, %2, %c112 : index
    cf.cond_br %3, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    %4 = memref.load %arg0[%c0, %c0, %0, %2] : memref<1x64x112x112xf32>
    %5 = arith.cmpf ugt, %4, %cst : f32
    %6 = arith.select %5, %4, %cst : f32
    memref.store %6, %arg1[%c0, %c0, %0, %2] : memref<1x64x112x112xf32>
    %7 = arith.addi %2, %c1 : index
    cf.br ^bb4(%7 : index)
  ^bb6:  // pred: ^bb4
    %8 = arith.addi %0, %c1 : index
    cf.br ^bb2(%8 : index)
  ^bb7:  // pred: ^bb2
    return
  }
  func.func @forward_kernel_5(%arg0: memref<1x64x114x114xf32>) attributes {Kernel, forward_kernel_5} {
    %c114 = arith.constant 114 : index
    %c1 = arith.constant 1 : index
    %c6 = arith.constant 6 : index
    %c0 = arith.constant 0 : index
    %cst = arith.constant 0xFF800000 : f32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2(%c0 : index)
  ^bb2(%0: index):  // 2 preds: ^bb1, ^bb6
    %1 = arith.cmpi slt, %0, %c6 : index
    cf.cond_br %1, ^bb3, ^bb7
  ^bb3:  // pred: ^bb2
    cf.br ^bb4(%c0 : index)
  ^bb4(%2: index):  // 2 preds: ^bb3, ^bb5
    %3 = arith.cmpi slt, %2, %c114 : index
    cf.cond_br %3, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    memref.store %cst, %arg0[%c0, %c0, %0, %2] : memref<1x64x114x114xf32>
    %4 = arith.addi %2, %c1 : index
    cf.br ^bb4(%4 : index)
  ^bb6:  // pred: ^bb4
    %5 = arith.addi %0, %c1 : index
    cf.br ^bb2(%5 : index)
  ^bb7:  // pred: ^bb2
    return
  }
  func.func @forward_kernel_6(%arg0: memref<1x64x56x56xf32>) attributes {Kernel, forward_kernel_6} {
    %c56 = arith.constant 56 : index
    %c1 = arith.constant 1 : index
    %c28 = arith.constant 28 : index
    %c0 = arith.constant 0 : index
    %cst = arith.constant 0xFF800000 : f32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2(%c0 : index)
  ^bb2(%0: index):  // 2 preds: ^bb1, ^bb6
    %1 = arith.cmpi slt, %0, %c28 : index
    cf.cond_br %1, ^bb3, ^bb7
  ^bb3:  // pred: ^bb2
    cf.br ^bb4(%c0 : index)
  ^bb4(%2: index):  // 2 preds: ^bb3, ^bb5
    %3 = arith.cmpi slt, %2, %c56 : index
    cf.cond_br %3, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    memref.store %cst, %arg0[%c0, %c0, %0, %2] : memref<1x64x56x56xf32>
    %4 = arith.addi %2, %c1 : index
    cf.br ^bb4(%4 : index)
  ^bb6:  // pred: ^bb4
    %5 = arith.addi %0, %c1 : index
    cf.br ^bb2(%5 : index)
  ^bb7:  // pred: ^bb2
    return
  }
  func.func @forward_kernel_7(%arg0: memref<1x64x114x114xf32>, %arg1: memref<1x64x56x56xf32>, %arg2: memref<1x64x56x56xf32>) attributes {Kernel, forward_kernel_7} {
    %c2 = arith.constant 2 : index
    %c3 = arith.constant 3 : index
    %c56 = arith.constant 56 : index
    %c1 = arith.constant 1 : index
    %c4 = arith.constant 4 : index
    %c0 = arith.constant 0 : index
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2(%c0 : index)
  ^bb2(%0: index):  // 2 preds: ^bb1, ^bb12
    %1 = arith.cmpi slt, %0, %c4 : index
    cf.cond_br %1, ^bb3, ^bb13
  ^bb3:  // pred: ^bb2
    cf.br ^bb4(%c0 : index)
  ^bb4(%2: index):  // 2 preds: ^bb3, ^bb11
    %3 = arith.cmpi slt, %2, %c56 : index
    cf.cond_br %3, ^bb5, ^bb12
  ^bb5:  // pred: ^bb4
    cf.br ^bb6(%c0 : index)
  ^bb6(%4: index):  // 2 preds: ^bb5, ^bb10
    %5 = arith.cmpi slt, %4, %c3 : index
    cf.cond_br %5, ^bb7, ^bb11
  ^bb7:  // pred: ^bb6
    cf.br ^bb8(%c0 : index)
  ^bb8(%6: index):  // 2 preds: ^bb7, ^bb9
    %7 = arith.cmpi slt, %6, %c3 : index
    cf.cond_br %7, ^bb9, ^bb10
  ^bb9:  // pred: ^bb8
    %8 = arith.muli %0, %c2 : index
    %9 = arith.addi %8, %4 : index
    %10 = arith.muli %2, %c2 : index
    %11 = arith.addi %10, %6 : index
    %12 = memref.load %arg0[%c0, %c0, %9, %11] : memref<1x64x114x114xf32>
    %13 = memref.load %arg1[%c0, %c0, %0, %2] : memref<1x64x56x56xf32>
    %14 = arith.cmpf ugt, %13, %12 : f32
    %15 = arith.select %14, %13, %12 : f32
    %16 = arith.cmpf uno, %12, %12 : f32
    %17 = arith.select %16, %12, %15 : f32
    memref.store %17, %arg2[%c0, %c0, %0, %2] : memref<1x64x56x56xf32>
    %18 = arith.addi %6, %c1 : index
    cf.br ^bb8(%18 : index)
  ^bb10:  // pred: ^bb8
    %19 = arith.addi %4, %c1 : index
    cf.br ^bb6(%19 : index)
  ^bb11:  // pred: ^bb6
    %20 = arith.addi %2, %c1 : index
    cf.br ^bb4(%20 : index)
  ^bb12:  // pred: ^bb4
    %21 = arith.addi %0, %c1 : index
    cf.br ^bb2(%21 : index)
  ^bb13:  // pred: ^bb2
    return
  }
}


// -----// IR Dump After ConvertMathToLibm (convert-math-to-libm) //----- //
module attributes {torch.debug_module_name = "ResNet"} {
  memref.global "private" constant @__constant_64xf32_2 : memref<64xf32> = dense<[0.230717152, 0.253822476, -1.05429808E-6, -0.664388895, -1.65705547E-8, 0.161521927, 0.454503953, -4.301950e-07, 0.300513744, -8.005240e-06, 0.349418074, 0.311480612, -0.249529764, -3.474890e-05, 0.107726313, 0.218970656, 0.381412596, -0.529882133, -0.628644109, 0.571398079, 0.299846917, 0.584303737, 0.48202154, 0.328526348, 0.196717009, 0.194961801, 0.152145416, 0.085522361, 0.513142824, 0.0152367353, 0.166441768, 0.332394391, 0.249211237, 0.443366677, -0.280169278, -0.0203848016, -2.45068748E-7, 0.321340501, -4.9151744E-8, 0.237767309, 0.232907727, 0.315274626, 0.427762389, 0.293127537, 0.263794243, 0.675975859, 0.429100394, 0.345662743, -8.69090186E-8, 0.247294366, 0.303160846, 0.615772783, 0.39834857, 0.332067341, -0.412187815, 0.378069043, 0.178953409, 0.25747788, -0.449079722, 0.213058949, 0.569339037, 5.727430e-01, -0.402383476, 0.23406373]>
  memref.global "private" constant @__constant_64xf32_1 : memref<64xf32> = dense<[0.234872743, 0.266257942, -5.10959595E-8, 0.518699706, 3.44040196E-9, 0.222385287, 0.422887057, 1.31532403E-7, 0.25093165, 1.5152026E-6, 0.316871643, 0.250491828, 0.378926098, 1.08618351E-5, 2.752640e-01, 0.236741036, 0.242021769, 0.395314813, 0.469346285, 0.2908957, 0.272684187, 0.27802828, 0.290692091, 0.206927493, 0.258990377, 0.278710574, 0.291149527, 0.316013753, 0.388891488, 0.304111898, 0.267757207, 0.210925162, 0.287084132, 0.332426429, 0.42672804, 0.373260558, 7.48037578E-8, 0.19067812, 1.47401256E-8, 0.223029822, 0.179079413, 0.248600766, 0.27399528, 0.259228647, 0.294202209, 0.299236417, 0.223688841, 0.262799472, 2.20011476E-8, 0.266098082, 0.220890298, 0.284285516, 0.330723315, 0.226809531, 0.365380913, 0.21229881, 0.239653021, 0.24949576, 0.525830686, 0.248247579, 0.295652747, 0.258776665, 0.4832564, 0.26670444]>
  memref.global "private" constant @__constant_64xf32_0 : memref<64xf32> = dense<[1.01694489, 3.71674347, 5.81334356E-11, 3.28254271, 1.71074404E-13, 0.658226967, 4.37006235, 6.60045282E-12, 0.915522992, 1.93175254E-9, 4.12558556, 2.74399233, 2.8390913, 4.79658588E-8, 11.0722713, 0.500745952, 2.23128176, 4.82570696, 2.69861364, 9.36995506, 3.73391747, 5.48429585, 5.7126689, 0.445444882, 0.436275303, 7.15633583, 13.7179089, 5.25117493, 6.81737518, 1.67235756, 1.65343034, 1.23245978, 4.90762854, 3.07305121, 4.23838568, 4.99363518, 1.44646307E-12, 1.52116203, 1.03519833E-13, 0.351344079, 0.17024748, 1.42054474, 1.90848303, 2.15124035, 2.66084933, 4.84443378, 1.92971194, 1.49994361, 2.94806145E-13, 1.53064024, 0.365027189, 2.93755412, 5.46641159, 0.707924544, 3.33150721, 0.771802961, 2.40678358, 6.5213666, 4.12625027, 1.05063522, 2.95303202, 11.3656216, 4.76904678, 1.65587807]>
  memref.global "private" constant @__constant_64xf32 : memref<64xf32> = dense<[0.00276811025, -0.0257689245, 2.12544663E-7, -0.0846051499, 2.11205915E-8, 4.96906461E-4, -0.0224083271, -1.15818956E-7, -4.823850e-03, 2.75073347E-7, 3.958230e-02, 0.0319936387, -0.0374896601, -1.37163477E-6, 0.00660019321, 4.378190e-03, 0.0647971481, 0.11175999, 0.0360015705, -0.0750752166, -0.03824009, 0.0843578502, -5.228700e-02, -0.0117988894, 0.00130188058, 0.0321722962, -0.0177843049, -0.0910085887, 0.113187239, -0.0416320041, 0.00873024761, 0.0296931695, -0.0705021694, -0.00348469778, 0.109771468, -0.00173411821, -5.94229412E-8, 0.0293303896, -7.85527287E-9, 0.00673204474, -0.00370999542, 0.0160279572, -0.0278826058, 0.0265925378, 0.0284745526, -0.12734659, 0.0446168408, 0.0263288375, 2.14538591E-8, -1.704500e-02, -0.00356168114, -0.0458412617, 0.0638761446, 0.0152198272, -0.0385114551, -0.0164278317, -0.016568929, 0.0560574941, -0.0803062319, -0.00266457512, -0.0417176671, 0.126112729, -0.0492369682, -0.0132609205]>
  memref.global "private" constant @__constant_64x3x7x7xf32 : memref<64x3x7x7xf32> = dense<"0x
  ml_program.global private mutable @global_seed(dense<0> : tensor<i64>) : tensor<i64>
  func.func @forward(%arg0: memref<1x3x224x224xf32>) -> memref<1x64x56x56xf32> {
    %c4 = arith.constant 4 : index
    %c28 = arith.constant 28 : index
    %c56 = arith.constant 56 : index
    %c6 = arith.constant 6 : index
    %c114 = arith.constant 114 : index
    %c8 = arith.constant 8 : index
    %c16 = arith.constant 16 : index
    %c112 = arith.constant 112 : index
    %c64 = arith.constant 64 : index
    %c5 = arith.constant 5 : index
    %c230 = arith.constant 230 : index
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %0 = memref.get_global @__constant_64x3x7x7xf32 : memref<64x3x7x7xf32>
    %1 = memref.get_global @__constant_64xf32 : memref<64xf32>
    %2 = memref.get_global @__constant_64xf32_0 : memref<64xf32>
    %3 = memref.get_global @__constant_64xf32_1 : memref<64xf32>
    %4 = memref.get_global @__constant_64xf32_2 : memref<64xf32>
    %alloc = memref.alloc() {alignment = 64 : i64} : memref<1x3x230x230xf32>
    cf.br ^bb1(%c0 : index)
  ^bb1(%5: index):  // 2 preds: ^bb0, ^bb8
    %6 = arith.cmpi slt, %5, %c1 : index
    cf.cond_br %6, ^bb2, ^bb9
  ^bb2:  // pred: ^bb1
    cf.br ^bb3(%c0 : index)
  ^bb3(%7: index):  // 2 preds: ^bb2, ^bb7
    %8 = arith.cmpi slt, %7, %c3 : index
    cf.cond_br %8, ^bb4, ^bb8
  ^bb4:  // pred: ^bb3
    cf.br ^bb5(%c0 : index)
  ^bb5(%9: index):  // 2 preds: ^bb4, ^bb6
    %10 = arith.cmpi slt, %9, %c230 : index
    cf.cond_br %10, ^bb6, ^bb7
  ^bb6:  // pred: ^bb5
    %11 = FDRA.BlockLoad %alloc [0, %7, %9, 0] : memref<1x3x230x230xf32> -> memref<1x3x230x230xf32> {"forward_kernel_0"}
    FDRA.KernelCall @forward_kernel_0(%11) : (memref<1x3x230x230xf32>) -> ()
    FDRA.BlockStore %11,  %alloc [0, %7, %9, 0] : memref<1x3x230x230xf32> -> memref<1x3x230x230xf32> {"forward_kernel_0"}
    %12 = arith.addi %9, %c5 : index
    cf.br ^bb5(%12 : index)
  ^bb7:  // pred: ^bb5
    %13 = arith.addi %7, %c1 : index
    cf.br ^bb3(%13 : index)
  ^bb8:  // pred: ^bb3
    %14 = arith.addi %5, %c1 : index
    cf.br ^bb1(%14 : index)
  ^bb9:  // pred: ^bb1
    %alloc_0 = memref.alloc() {alignment = 64 : i64} : memref<1x3x230x230xf32>
    memref.copy %alloc, %alloc_0 : memref<1x3x230x230xf32> to memref<1x3x230x230xf32>
    %reinterpret_cast = memref.reinterpret_cast %alloc_0 to offset: [693], sizes: [1, 3, 224, 224], strides: [158700, 52900, 230, 1] : memref<1x3x230x230xf32> to memref<1x3x224x224xf32, strided<[158700, 52900, 230, 1], offset: 693>>
    memref.copy %arg0, %reinterpret_cast : memref<1x3x224x224xf32> to memref<1x3x224x224xf32, strided<[158700, 52900, 230, 1], offset: 693>>
    %alloc_1 = memref.alloc() {alignment = 64 : i64} : memref<1x64x112x112xf32>
    cf.br ^bb10(%c0 : index)
  ^bb10(%15: index):  // 2 preds: ^bb9, ^bb17
    %16 = arith.cmpi slt, %15, %c1 : index
    cf.cond_br %16, ^bb11, ^bb18
  ^bb11:  // pred: ^bb10
    cf.br ^bb12(%c0 : index)
  ^bb12(%17: index):  // 2 preds: ^bb11, ^bb16
    %18 = arith.cmpi slt, %17, %c64 : index
    cf.cond_br %18, ^bb13, ^bb17
  ^bb13:  // pred: ^bb12
    cf.br ^bb14(%c0 : index)
  ^bb14(%19: index):  // 2 preds: ^bb13, ^bb15
    %20 = arith.cmpi slt, %19, %c112 : index
    cf.cond_br %20, ^bb15, ^bb16
  ^bb15:  // pred: ^bb14
    %21 = FDRA.BlockLoad %alloc_1 [0, %17, %19, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_1"}
    FDRA.KernelCall @forward_kernel_1(%21) : (memref<1x64x112x112xf32>) -> ()
    FDRA.BlockStore %21,  %alloc_1 [0, %17, %19, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_1"}
    %22 = arith.addi %19, %c16 : index
    cf.br ^bb14(%22 : index)
  ^bb16:  // pred: ^bb14
    %23 = arith.addi %17, %c1 : index
    cf.br ^bb12(%23 : index)
  ^bb17:  // pred: ^bb12
    %24 = arith.addi %15, %c1 : index
    cf.br ^bb10(%24 : index)
  ^bb18:  // pred: ^bb10
    %alloc_2 = memref.alloc() {alignment = 64 : i64} : memref<1x64x112x112xf32>
    memref.copy %alloc_1, %alloc_2 : memref<1x64x112x112xf32> to memref<1x64x112x112xf32>
    cf.br ^bb19(%c0 : index)
  ^bb19(%25: index):  // 2 preds: ^bb18, ^bb29
    %26 = arith.cmpi slt, %25, %c1 : index
    cf.cond_br %26, ^bb20, ^bb30
  ^bb20:  // pred: ^bb19
    cf.br ^bb21(%c0 : index)
  ^bb21(%27: index):  // 2 preds: ^bb20, ^bb28
    %28 = arith.cmpi slt, %27, %c64 : index
    cf.cond_br %28, ^bb22, ^bb29
  ^bb22:  // pred: ^bb21
    cf.br ^bb23(%c0 : index)
  ^bb23(%29: index):  // 2 preds: ^bb22, ^bb27
    %30 = arith.cmpi slt, %29, %c112 : index
    cf.cond_br %30, ^bb24, ^bb28
  ^bb24:  // pred: ^bb23
    cf.br ^bb25(%c0 : index)
  ^bb25(%31: index):  // 2 preds: ^bb24, ^bb26
    %32 = arith.cmpi slt, %31, %c112 : index
    cf.cond_br %32, ^bb26, ^bb27
  ^bb26:  // pred: ^bb25
    %33 = FDRA.BlockLoad %alloc_0 [0, 0, %29 * 2, %31 * 2] : memref<1x3x230x230xf32> -> memref<1x3x230x230xf32> {"forward_kernel_2"}
    %34 = FDRA.BlockLoad %0 [%27, 0, 0, 0] : memref<64x3x7x7xf32> -> memref<64x3x7x7xf32> {"forward_kernel_2"}
    %35 = FDRA.BlockLoad %alloc_2 [0, %27, %29, %31] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_2"}
    %36 = FDRA.BlockLoad %alloc_2 [0, %27, %29, %31] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_2"}
    FDRA.KernelCall @forward_kernel_2(%33, %34, %35, %36) : (memref<1x3x230x230xf32>, memref<64x3x7x7xf32>, memref<1x64x112x112xf32>, memref<1x64x112x112xf32>) -> ()
    FDRA.BlockStore %36,  %alloc_2 [0, %27, %29, %31] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_2"}
    %37 = arith.addi %31, %c8 : index
    cf.br ^bb25(%37 : index)
  ^bb27:  // pred: ^bb25
    %38 = arith.addi %29, %c1 : index
    cf.br ^bb23(%38 : index)
  ^bb28:  // pred: ^bb23
    %39 = arith.addi %27, %c1 : index
    cf.br ^bb21(%39 : index)
  ^bb29:  // pred: ^bb21
    %40 = arith.addi %25, %c1 : index
    cf.br ^bb19(%40 : index)
  ^bb30:  // pred: ^bb19
    %alloc_3 = memref.alloc() {alignment = 64 : i64} : memref<1x64x112x112xf32>
    cf.br ^bb31(%c0 : index)
  ^bb31(%41: index):  // 2 preds: ^bb30, ^bb38
    %42 = arith.cmpi slt, %41, %c1 : index
    cf.cond_br %42, ^bb32, ^bb39
  ^bb32:  // pred: ^bb31
    cf.br ^bb33(%c0 : index)
  ^bb33(%43: index):  // 2 preds: ^bb32, ^bb37
    %44 = arith.cmpi slt, %43, %c64 : index
    cf.cond_br %44, ^bb34, ^bb38
  ^bb34:  // pred: ^bb33
    cf.br ^bb35(%c0 : index)
  ^bb35(%45: index):  // 2 preds: ^bb34, ^bb36
    %46 = arith.cmpi slt, %45, %c112 : index
    cf.cond_br %46, ^bb36, ^bb37
  ^bb36:  // pred: ^bb35
    %47 = FDRA.BlockLoad %alloc_2 [0, %43, %45, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_3"}
    %48 = FDRA.BlockLoad %3 [%43] : memref<64xf32> -> memref<64xf32> {"forward_kernel_3"}
    %49 = FDRA.BlockLoad %4 [%43] : memref<64xf32> -> memref<64xf32> {"forward_kernel_3"}
    %50 = FDRA.BlockLoad %1 [%43] : memref<64xf32> -> memref<64xf32> {"forward_kernel_3"}
    %51 = FDRA.BlockLoad %2 [%43] : memref<64xf32> -> memref<64xf32> {"forward_kernel_3"}
    %52 = FDRA.BlockLoad %alloc_3 [0, %43, %45, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_3"}
    FDRA.KernelCall @forward_kernel_3(%47, %48, %49, %50, %51, %52) : (memref<1x64x112x112xf32>, memref<64xf32>, memref<64xf32>, memref<64xf32>, memref<64xf32>, memref<1x64x112x112xf32>) -> ()
    FDRA.BlockStore %52,  %alloc_3 [0, %43, %45, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_3"}
    %53 = arith.addi %45, %c16 : index
    cf.br ^bb35(%53 : index)
  ^bb37:  // pred: ^bb35
    %54 = arith.addi %43, %c1 : index
    cf.br ^bb33(%54 : index)
  ^bb38:  // pred: ^bb33
    %55 = arith.addi %41, %c1 : index
    cf.br ^bb31(%55 : index)
  ^bb39:  // pred: ^bb31
    %alloc_4 = memref.alloc() {alignment = 64 : i64} : memref<1x64x112x112xf32>
    cf.br ^bb40(%c0 : index)
  ^bb40(%56: index):  // 2 preds: ^bb39, ^bb47
    %57 = arith.cmpi slt, %56, %c1 : index
    cf.cond_br %57, ^bb41, ^bb48
  ^bb41:  // pred: ^bb40
    cf.br ^bb42(%c0 : index)
  ^bb42(%58: index):  // 2 preds: ^bb41, ^bb46
    %59 = arith.cmpi slt, %58, %c64 : index
    cf.cond_br %59, ^bb43, ^bb47
  ^bb43:  // pred: ^bb42
    cf.br ^bb44(%c0 : index)
  ^bb44(%60: index):  // 2 preds: ^bb43, ^bb45
    %61 = arith.cmpi slt, %60, %c112 : index
    cf.cond_br %61, ^bb45, ^bb46
  ^bb45:  // pred: ^bb44
    %62 = FDRA.BlockLoad %alloc_3 [0, %58, %60, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_4"}
    %63 = FDRA.BlockLoad %alloc_4 [0, %58, %60, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_4"}
    FDRA.KernelCall @forward_kernel_4(%62, %63) : (memref<1x64x112x112xf32>, memref<1x64x112x112xf32>) -> ()
    FDRA.BlockStore %63,  %alloc_4 [0, %58, %60, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_4"}
    %64 = arith.addi %60, %c16 : index
    cf.br ^bb44(%64 : index)
  ^bb46:  // pred: ^bb44
    %65 = arith.addi %58, %c1 : index
    cf.br ^bb42(%65 : index)
  ^bb47:  // pred: ^bb42
    %66 = arith.addi %56, %c1 : index
    cf.br ^bb40(%66 : index)
  ^bb48:  // pred: ^bb40
    %alloc_5 = memref.alloc() {alignment = 64 : i64} : memref<1x64x114x114xf32>
    cf.br ^bb49(%c0 : index)
  ^bb49(%67: index):  // 2 preds: ^bb48, ^bb56
    %68 = arith.cmpi slt, %67, %c1 : index
    cf.cond_br %68, ^bb50, ^bb57
  ^bb50:  // pred: ^bb49
    cf.br ^bb51(%c0 : index)
  ^bb51(%69: index):  // 2 preds: ^bb50, ^bb55
    %70 = arith.cmpi slt, %69, %c64 : index
    cf.cond_br %70, ^bb52, ^bb56
  ^bb52:  // pred: ^bb51
    cf.br ^bb53(%c0 : index)
  ^bb53(%71: index):  // 2 preds: ^bb52, ^bb54
    %72 = arith.cmpi slt, %71, %c114 : index
    cf.cond_br %72, ^bb54, ^bb55
  ^bb54:  // pred: ^bb53
    %73 = FDRA.BlockLoad %alloc_5 [0, %69, %71, 0] : memref<1x64x114x114xf32> -> memref<1x64x114x114xf32> {"forward_kernel_5"}
    FDRA.KernelCall @forward_kernel_5(%73) : (memref<1x64x114x114xf32>) -> ()
    FDRA.BlockStore %73,  %alloc_5 [0, %69, %71, 0] : memref<1x64x114x114xf32> -> memref<1x64x114x114xf32> {"forward_kernel_5"}
    %74 = arith.addi %71, %c6 : index
    cf.br ^bb53(%74 : index)
  ^bb55:  // pred: ^bb53
    %75 = arith.addi %69, %c1 : index
    cf.br ^bb51(%75 : index)
  ^bb56:  // pred: ^bb51
    %76 = arith.addi %67, %c1 : index
    cf.br ^bb49(%76 : index)
  ^bb57:  // pred: ^bb49
    %alloc_6 = memref.alloc() {alignment = 64 : i64} : memref<1x64x114x114xf32>
    memref.copy %alloc_5, %alloc_6 : memref<1x64x114x114xf32> to memref<1x64x114x114xf32>
    %reinterpret_cast_7 = memref.reinterpret_cast %alloc_6 to offset: [115], sizes: [1, 64, 112, 112], strides: [831744, 12996, 114, 1] : memref<1x64x114x114xf32> to memref<1x64x112x112xf32, strided<[831744, 12996, 114, 1], offset: 115>>
    memref.copy %alloc_4, %reinterpret_cast_7 : memref<1x64x112x112xf32> to memref<1x64x112x112xf32, strided<[831744, 12996, 114, 1], offset: 115>>
    %alloc_8 = memref.alloc() {alignment = 64 : i64} : memref<1x64x56x56xf32>
    cf.br ^bb58(%c0 : index)
  ^bb58(%77: index):  // 2 preds: ^bb57, ^bb65
    %78 = arith.cmpi slt, %77, %c1 : index
    cf.cond_br %78, ^bb59, ^bb66
  ^bb59:  // pred: ^bb58
    cf.br ^bb60(%c0 : index)
  ^bb60(%79: index):  // 2 preds: ^bb59, ^bb64
    %80 = arith.cmpi slt, %79, %c64 : index
    cf.cond_br %80, ^bb61, ^bb65
  ^bb61:  // pred: ^bb60
    cf.br ^bb62(%c0 : index)
  ^bb62(%81: index):  // 2 preds: ^bb61, ^bb63
    %82 = arith.cmpi slt, %81, %c56 : index
    cf.cond_br %82, ^bb63, ^bb64
  ^bb63:  // pred: ^bb62
    %83 = FDRA.BlockLoad %alloc_8 [0, %79, %81, 0] : memref<1x64x56x56xf32> -> memref<1x64x56x56xf32> {"forward_kernel_6"}
    FDRA.KernelCall @forward_kernel_6(%83) : (memref<1x64x56x56xf32>) -> ()
    FDRA.BlockStore %83,  %alloc_8 [0, %79, %81, 0] : memref<1x64x56x56xf32> -> memref<1x64x56x56xf32> {"forward_kernel_6"}
    %84 = arith.addi %81, %c28 : index
    cf.br ^bb62(%84 : index)
  ^bb64:  // pred: ^bb62
    %85 = arith.addi %79, %c1 : index
    cf.br ^bb60(%85 : index)
  ^bb65:  // pred: ^bb60
    %86 = arith.addi %77, %c1 : index
    cf.br ^bb58(%86 : index)
  ^bb66:  // pred: ^bb58
    %alloc_9 = memref.alloc() {alignment = 64 : i64} : memref<1x64x56x56xf32>
    memref.copy %alloc_8, %alloc_9 : memref<1x64x56x56xf32> to memref<1x64x56x56xf32>
    cf.br ^bb67(%c0 : index)
  ^bb67(%87: index):  // 2 preds: ^bb66, ^bb74
    %88 = arith.cmpi slt, %87, %c1 : index
    cf.cond_br %88, ^bb68, ^bb75
  ^bb68:  // pred: ^bb67
    cf.br ^bb69(%c0 : index)
  ^bb69(%89: index):  // 2 preds: ^bb68, ^bb73
    %90 = arith.cmpi slt, %89, %c64 : index
    cf.cond_br %90, ^bb70, ^bb74
  ^bb70:  // pred: ^bb69
    cf.br ^bb71(%c0 : index)
  ^bb71(%91: index):  // 2 preds: ^bb70, ^bb72
    %92 = arith.cmpi slt, %91, %c56 : index
    cf.cond_br %92, ^bb72, ^bb73
  ^bb72:  // pred: ^bb71
    %93 = FDRA.BlockLoad %alloc_6 [0, %89, %91 * 2, 0] : memref<1x64x114x114xf32> -> memref<1x64x114x114xf32> {"forward_kernel_7"}
    %94 = FDRA.BlockLoad %alloc_9 [0, %89, %91, 0] : memref<1x64x56x56xf32> -> memref<1x64x56x56xf32> {"forward_kernel_7"}
    %95 = FDRA.BlockLoad %alloc_9 [0, %89, %91, 0] : memref<1x64x56x56xf32> -> memref<1x64x56x56xf32> {"forward_kernel_7"}
    FDRA.KernelCall @forward_kernel_7(%93, %94, %95) : (memref<1x64x114x114xf32>, memref<1x64x56x56xf32>, memref<1x64x56x56xf32>) -> ()
    FDRA.BlockStore %95,  %alloc_9 [0, %89, %91, 0] : memref<1x64x56x56xf32> -> memref<1x64x56x56xf32> {"forward_kernel_7"}
    %96 = arith.addi %91, %c4 : index
    cf.br ^bb71(%96 : index)
  ^bb73:  // pred: ^bb71
    %97 = arith.addi %89, %c1 : index
    cf.br ^bb69(%97 : index)
  ^bb74:  // pred: ^bb69
    %98 = arith.addi %87, %c1 : index
    cf.br ^bb67(%98 : index)
  ^bb75:  // pred: ^bb67
    return %alloc_9 : memref<1x64x56x56xf32>
  }
  func.func @forward_kernel_0(%arg0: memref<1x3x230x230xf32>) attributes {Kernel, forward_kernel_0} {
    %c230 = arith.constant 230 : index
    %c1 = arith.constant 1 : index
    %c5 = arith.constant 5 : index
    %c0 = arith.constant 0 : index
    %cst = arith.constant 0.000000e+00 : f32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2(%c0 : index)
  ^bb2(%0: index):  // 2 preds: ^bb1, ^bb6
    %1 = arith.cmpi slt, %0, %c5 : index
    cf.cond_br %1, ^bb3, ^bb7
  ^bb3:  // pred: ^bb2
    cf.br ^bb4(%c0 : index)
  ^bb4(%2: index):  // 2 preds: ^bb3, ^bb5
    %3 = arith.cmpi slt, %2, %c230 : index
    cf.cond_br %3, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    memref.store %cst, %arg0[%c0, %c0, %0, %2] : memref<1x3x230x230xf32>
    %4 = arith.addi %2, %c1 : index
    cf.br ^bb4(%4 : index)
  ^bb6:  // pred: ^bb4
    %5 = arith.addi %0, %c1 : index
    cf.br ^bb2(%5 : index)
  ^bb7:  // pred: ^bb2
    return
  }
  func.func @forward_kernel_1(%arg0: memref<1x64x112x112xf32>) attributes {Kernel, forward_kernel_1} {
    %c112 = arith.constant 112 : index
    %c1 = arith.constant 1 : index
    %c16 = arith.constant 16 : index
    %c0 = arith.constant 0 : index
    %cst = arith.constant 0.000000e+00 : f32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2(%c0 : index)
  ^bb2(%0: index):  // 2 preds: ^bb1, ^bb6
    %1 = arith.cmpi slt, %0, %c16 : index
    cf.cond_br %1, ^bb3, ^bb7
  ^bb3:  // pred: ^bb2
    cf.br ^bb4(%c0 : index)
  ^bb4(%2: index):  // 2 preds: ^bb3, ^bb5
    %3 = arith.cmpi slt, %2, %c112 : index
    cf.cond_br %3, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    memref.store %cst, %arg0[%c0, %c0, %0, %2] : memref<1x64x112x112xf32>
    %4 = arith.addi %2, %c1 : index
    cf.br ^bb4(%4 : index)
  ^bb6:  // pred: ^bb4
    %5 = arith.addi %0, %c1 : index
    cf.br ^bb2(%5 : index)
  ^bb7:  // pred: ^bb2
    return
  }
  func.func @forward_kernel_2(%arg0: memref<1x3x230x230xf32>, %arg1: memref<64x3x7x7xf32>, %arg2: memref<1x64x112x112xf32>, %arg3: memref<1x64x112x112xf32>) attributes {Kernel, forward_kernel_2} {
    %c2 = arith.constant 2 : index
    %c7 = arith.constant 7 : index
    %c3 = arith.constant 3 : index
    %c1 = arith.constant 1 : index
    %c8 = arith.constant 8 : index
    %c0 = arith.constant 0 : index
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2(%c0 : index)
  ^bb2(%0: index):  // 2 preds: ^bb1, ^bb12
    %1 = arith.cmpi slt, %0, %c8 : index
    cf.cond_br %1, ^bb3, ^bb13
  ^bb3:  // pred: ^bb2
    cf.br ^bb4(%c0 : index)
  ^bb4(%2: index):  // 2 preds: ^bb3, ^bb11
    %3 = arith.cmpi slt, %2, %c3 : index
    cf.cond_br %3, ^bb5, ^bb12
  ^bb5:  // pred: ^bb4
    cf.br ^bb6(%c0 : index)
  ^bb6(%4: index):  // 2 preds: ^bb5, ^bb10
    %5 = arith.cmpi slt, %4, %c7 : index
    cf.cond_br %5, ^bb7, ^bb11
  ^bb7:  // pred: ^bb6
    cf.br ^bb8(%c0 : index)
  ^bb8(%6: index):  // 2 preds: ^bb7, ^bb9
    %7 = arith.cmpi slt, %6, %c7 : index
    cf.cond_br %7, ^bb9, ^bb10
  ^bb9:  // pred: ^bb8
    %8 = arith.muli %0, %c2 : index
    %9 = arith.addi %8, %6 : index
    %10 = memref.load %arg0[%c0, %2, %4, %9] : memref<1x3x230x230xf32>
    %11 = memref.load %arg1[%c0, %2, %4, %6] : memref<64x3x7x7xf32>
    %12 = memref.load %arg2[%c0, %c0, %c0, %0] : memref<1x64x112x112xf32>
    %13 = arith.mulf %10, %11 : f32
    %14 = arith.addf %12, %13 : f32
    memref.store %14, %arg3[%c0, %c0, %c0, %0] : memref<1x64x112x112xf32>
    %15 = arith.addi %6, %c1 : index
    cf.br ^bb8(%15 : index)
  ^bb10:  // pred: ^bb8
    %16 = arith.addi %4, %c1 : index
    cf.br ^bb6(%16 : index)
  ^bb11:  // pred: ^bb6
    %17 = arith.addi %2, %c1 : index
    cf.br ^bb4(%17 : index)
  ^bb12:  // pred: ^bb4
    %18 = arith.addi %0, %c1 : index
    cf.br ^bb2(%18 : index)
  ^bb13:  // pred: ^bb2
    return
  }
  func.func @forward_kernel_3(%arg0: memref<1x64x112x112xf32>, %arg1: memref<64xf32>, %arg2: memref<64xf32>, %arg3: memref<64xf32>, %arg4: memref<64xf32>, %arg5: memref<1x64x112x112xf32>) attributes {Kernel, forward_kernel_3} {
    %c112 = arith.constant 112 : index
    %c1 = arith.constant 1 : index
    %c16 = arith.constant 16 : index
    %c0 = arith.constant 0 : index
    %cst = arith.constant 1.500000e+00 : f32
    %c1597463007_i32 = arith.constant 1597463007 : i32
    %c1_i32 = arith.constant 1 : i32
    %cst_0 = arith.constant 5.000000e-01 : f32
    %cst_1 = arith.constant 1.000000e-05 : f64
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2(%c0 : index)
  ^bb2(%0: index):  // 2 preds: ^bb1, ^bb6
    %1 = arith.cmpi slt, %0, %c16 : index
    cf.cond_br %1, ^bb3, ^bb7
  ^bb3:  // pred: ^bb2
    cf.br ^bb4(%c0 : index)
  ^bb4(%2: index):  // 2 preds: ^bb3, ^bb5
    %3 = arith.cmpi slt, %2, %c112 : index
    cf.cond_br %3, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    %4 = memref.load %arg0[%c0, %c0, %0, %2] : memref<1x64x112x112xf32>
    %5 = memref.load %arg1[%c0] : memref<64xf32>
    %6 = memref.load %arg2[%c0] : memref<64xf32>
    %7 = memref.load %arg3[%c0] : memref<64xf32>
    %8 = memref.load %arg4[%c0] : memref<64xf32>
    %9 = arith.truncf %cst_1 : f64 to f32
    %10 = arith.addf %8, %9 : f32
    %11 = arith.mulf %10, %cst_0 : f32
    %12 = arith.bitcast %10 : f32 to i32
    %13 = arith.shrui %12, %c1_i32 : i32
    %14 = arith.subi %c1597463007_i32, %13 : i32
    %15 = arith.bitcast %14 : i32 to f32
    %16 = arith.mulf %15, %15 : f32
    %17 = arith.mulf %16, %11 : f32
    %18 = arith.subf %cst, %17 : f32
    %19 = arith.mulf %18, %16 : f32
    %20 = arith.subf %4, %7 : f32
    %21 = arith.mulf %20, %19 : f32
    %22 = arith.mulf %21, %5 : f32
    %23 = arith.addf %22, %6 : f32
    memref.store %23, %arg5[%c0, %c0, %0, %2] : memref<1x64x112x112xf32>
    %24 = arith.addi %2, %c1 : index
    cf.br ^bb4(%24 : index)
  ^bb6:  // pred: ^bb4
    %25 = arith.addi %0, %c1 : index
    cf.br ^bb2(%25 : index)
  ^bb7:  // pred: ^bb2
    return
  }
  func.func @forward_kernel_4(%arg0: memref<1x64x112x112xf32>, %arg1: memref<1x64x112x112xf32>) attributes {Kernel, forward_kernel_4} {
    %c112 = arith.constant 112 : index
    %c1 = arith.constant 1 : index
    %c16 = arith.constant 16 : index
    %c0 = arith.constant 0 : index
    %cst = arith.constant 0.000000e+00 : f32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2(%c0 : index)
  ^bb2(%0: index):  // 2 preds: ^bb1, ^bb6
    %1 = arith.cmpi slt, %0, %c16 : index
    cf.cond_br %1, ^bb3, ^bb7
  ^bb3:  // pred: ^bb2
    cf.br ^bb4(%c0 : index)
  ^bb4(%2: index):  // 2 preds: ^bb3, ^bb5
    %3 = arith.cmpi slt, %2, %c112 : index
    cf.cond_br %3, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    %4 = memref.load %arg0[%c0, %c0, %0, %2] : memref<1x64x112x112xf32>
    %5 = arith.cmpf ugt, %4, %cst : f32
    %6 = arith.select %5, %4, %cst : f32
    memref.store %6, %arg1[%c0, %c0, %0, %2] : memref<1x64x112x112xf32>
    %7 = arith.addi %2, %c1 : index
    cf.br ^bb4(%7 : index)
  ^bb6:  // pred: ^bb4
    %8 = arith.addi %0, %c1 : index
    cf.br ^bb2(%8 : index)
  ^bb7:  // pred: ^bb2
    return
  }
  func.func @forward_kernel_5(%arg0: memref<1x64x114x114xf32>) attributes {Kernel, forward_kernel_5} {
    %c114 = arith.constant 114 : index
    %c1 = arith.constant 1 : index
    %c6 = arith.constant 6 : index
    %c0 = arith.constant 0 : index
    %cst = arith.constant 0xFF800000 : f32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2(%c0 : index)
  ^bb2(%0: index):  // 2 preds: ^bb1, ^bb6
    %1 = arith.cmpi slt, %0, %c6 : index
    cf.cond_br %1, ^bb3, ^bb7
  ^bb3:  // pred: ^bb2
    cf.br ^bb4(%c0 : index)
  ^bb4(%2: index):  // 2 preds: ^bb3, ^bb5
    %3 = arith.cmpi slt, %2, %c114 : index
    cf.cond_br %3, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    memref.store %cst, %arg0[%c0, %c0, %0, %2] : memref<1x64x114x114xf32>
    %4 = arith.addi %2, %c1 : index
    cf.br ^bb4(%4 : index)
  ^bb6:  // pred: ^bb4
    %5 = arith.addi %0, %c1 : index
    cf.br ^bb2(%5 : index)
  ^bb7:  // pred: ^bb2
    return
  }
  func.func @forward_kernel_6(%arg0: memref<1x64x56x56xf32>) attributes {Kernel, forward_kernel_6} {
    %c56 = arith.constant 56 : index
    %c1 = arith.constant 1 : index
    %c28 = arith.constant 28 : index
    %c0 = arith.constant 0 : index
    %cst = arith.constant 0xFF800000 : f32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2(%c0 : index)
  ^bb2(%0: index):  // 2 preds: ^bb1, ^bb6
    %1 = arith.cmpi slt, %0, %c28 : index
    cf.cond_br %1, ^bb3, ^bb7
  ^bb3:  // pred: ^bb2
    cf.br ^bb4(%c0 : index)
  ^bb4(%2: index):  // 2 preds: ^bb3, ^bb5
    %3 = arith.cmpi slt, %2, %c56 : index
    cf.cond_br %3, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    memref.store %cst, %arg0[%c0, %c0, %0, %2] : memref<1x64x56x56xf32>
    %4 = arith.addi %2, %c1 : index
    cf.br ^bb4(%4 : index)
  ^bb6:  // pred: ^bb4
    %5 = arith.addi %0, %c1 : index
    cf.br ^bb2(%5 : index)
  ^bb7:  // pred: ^bb2
    return
  }
  func.func @forward_kernel_7(%arg0: memref<1x64x114x114xf32>, %arg1: memref<1x64x56x56xf32>, %arg2: memref<1x64x56x56xf32>) attributes {Kernel, forward_kernel_7} {
    %c2 = arith.constant 2 : index
    %c3 = arith.constant 3 : index
    %c56 = arith.constant 56 : index
    %c1 = arith.constant 1 : index
    %c4 = arith.constant 4 : index
    %c0 = arith.constant 0 : index
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2(%c0 : index)
  ^bb2(%0: index):  // 2 preds: ^bb1, ^bb12
    %1 = arith.cmpi slt, %0, %c4 : index
    cf.cond_br %1, ^bb3, ^bb13
  ^bb3:  // pred: ^bb2
    cf.br ^bb4(%c0 : index)
  ^bb4(%2: index):  // 2 preds: ^bb3, ^bb11
    %3 = arith.cmpi slt, %2, %c56 : index
    cf.cond_br %3, ^bb5, ^bb12
  ^bb5:  // pred: ^bb4
    cf.br ^bb6(%c0 : index)
  ^bb6(%4: index):  // 2 preds: ^bb5, ^bb10
    %5 = arith.cmpi slt, %4, %c3 : index
    cf.cond_br %5, ^bb7, ^bb11
  ^bb7:  // pred: ^bb6
    cf.br ^bb8(%c0 : index)
  ^bb8(%6: index):  // 2 preds: ^bb7, ^bb9
    %7 = arith.cmpi slt, %6, %c3 : index
    cf.cond_br %7, ^bb9, ^bb10
  ^bb9:  // pred: ^bb8
    %8 = arith.muli %0, %c2 : index
    %9 = arith.addi %8, %4 : index
    %10 = arith.muli %2, %c2 : index
    %11 = arith.addi %10, %6 : index
    %12 = memref.load %arg0[%c0, %c0, %9, %11] : memref<1x64x114x114xf32>
    %13 = memref.load %arg1[%c0, %c0, %0, %2] : memref<1x64x56x56xf32>
    %14 = arith.cmpf ugt, %13, %12 : f32
    %15 = arith.select %14, %13, %12 : f32
    %16 = arith.cmpf uno, %12, %12 : f32
    %17 = arith.select %16, %12, %15 : f32
    memref.store %17, %arg2[%c0, %c0, %0, %2] : memref<1x64x56x56xf32>
    %18 = arith.addi %6, %c1 : index
    cf.br ^bb8(%18 : index)
  ^bb10:  // pred: ^bb8
    %19 = arith.addi %4, %c1 : index
    cf.br ^bb6(%19 : index)
  ^bb11:  // pred: ^bb6
    %20 = arith.addi %2, %c1 : index
    cf.br ^bb4(%20 : index)
  ^bb12:  // pred: ^bb4
    %21 = arith.addi %0, %c1 : index
    cf.br ^bb2(%21 : index)
  ^bb13:  // pred: ^bb2
    return
  }
}


// -----// IR Dump After ArithToLLVMConversionPass (convert-arith-to-llvm) //----- //
module attributes {torch.debug_module_name = "ResNet"} {
  memref.global "private" constant @__constant_64xf32_2 : memref<64xf32> = dense<[0.230717152, 0.253822476, -1.05429808E-6, -0.664388895, -1.65705547E-8, 0.161521927, 0.454503953, -4.301950e-07, 0.300513744, -8.005240e-06, 0.349418074, 0.311480612, -0.249529764, -3.474890e-05, 0.107726313, 0.218970656, 0.381412596, -0.529882133, -0.628644109, 0.571398079, 0.299846917, 0.584303737, 0.48202154, 0.328526348, 0.196717009, 0.194961801, 0.152145416, 0.085522361, 0.513142824, 0.0152367353, 0.166441768, 0.332394391, 0.249211237, 0.443366677, -0.280169278, -0.0203848016, -2.45068748E-7, 0.321340501, -4.9151744E-8, 0.237767309, 0.232907727, 0.315274626, 0.427762389, 0.293127537, 0.263794243, 0.675975859, 0.429100394, 0.345662743, -8.69090186E-8, 0.247294366, 0.303160846, 0.615772783, 0.39834857, 0.332067341, -0.412187815, 0.378069043, 0.178953409, 0.25747788, -0.449079722, 0.213058949, 0.569339037, 5.727430e-01, -0.402383476, 0.23406373]>
  memref.global "private" constant @__constant_64xf32_1 : memref<64xf32> = dense<[0.234872743, 0.266257942, -5.10959595E-8, 0.518699706, 3.44040196E-9, 0.222385287, 0.422887057, 1.31532403E-7, 0.25093165, 1.5152026E-6, 0.316871643, 0.250491828, 0.378926098, 1.08618351E-5, 2.752640e-01, 0.236741036, 0.242021769, 0.395314813, 0.469346285, 0.2908957, 0.272684187, 0.27802828, 0.290692091, 0.206927493, 0.258990377, 0.278710574, 0.291149527, 0.316013753, 0.388891488, 0.304111898, 0.267757207, 0.210925162, 0.287084132, 0.332426429, 0.42672804, 0.373260558, 7.48037578E-8, 0.19067812, 1.47401256E-8, 0.223029822, 0.179079413, 0.248600766, 0.27399528, 0.259228647, 0.294202209, 0.299236417, 0.223688841, 0.262799472, 2.20011476E-8, 0.266098082, 0.220890298, 0.284285516, 0.330723315, 0.226809531, 0.365380913, 0.21229881, 0.239653021, 0.24949576, 0.525830686, 0.248247579, 0.295652747, 0.258776665, 0.4832564, 0.26670444]>
  memref.global "private" constant @__constant_64xf32_0 : memref<64xf32> = dense<[1.01694489, 3.71674347, 5.81334356E-11, 3.28254271, 1.71074404E-13, 0.658226967, 4.37006235, 6.60045282E-12, 0.915522992, 1.93175254E-9, 4.12558556, 2.74399233, 2.8390913, 4.79658588E-8, 11.0722713, 0.500745952, 2.23128176, 4.82570696, 2.69861364, 9.36995506, 3.73391747, 5.48429585, 5.7126689, 0.445444882, 0.436275303, 7.15633583, 13.7179089, 5.25117493, 6.81737518, 1.67235756, 1.65343034, 1.23245978, 4.90762854, 3.07305121, 4.23838568, 4.99363518, 1.44646307E-12, 1.52116203, 1.03519833E-13, 0.351344079, 0.17024748, 1.42054474, 1.90848303, 2.15124035, 2.66084933, 4.84443378, 1.92971194, 1.49994361, 2.94806145E-13, 1.53064024, 0.365027189, 2.93755412, 5.46641159, 0.707924544, 3.33150721, 0.771802961, 2.40678358, 6.5213666, 4.12625027, 1.05063522, 2.95303202, 11.3656216, 4.76904678, 1.65587807]>
  memref.global "private" constant @__constant_64xf32 : memref<64xf32> = dense<[0.00276811025, -0.0257689245, 2.12544663E-7, -0.0846051499, 2.11205915E-8, 4.96906461E-4, -0.0224083271, -1.15818956E-7, -4.823850e-03, 2.75073347E-7, 3.958230e-02, 0.0319936387, -0.0374896601, -1.37163477E-6, 0.00660019321, 4.378190e-03, 0.0647971481, 0.11175999, 0.0360015705, -0.0750752166, -0.03824009, 0.0843578502, -5.228700e-02, -0.0117988894, 0.00130188058, 0.0321722962, -0.0177843049, -0.0910085887, 0.113187239, -0.0416320041, 0.00873024761, 0.0296931695, -0.0705021694, -0.00348469778, 0.109771468, -0.00173411821, -5.94229412E-8, 0.0293303896, -7.85527287E-9, 0.00673204474, -0.00370999542, 0.0160279572, -0.0278826058, 0.0265925378, 0.0284745526, -0.12734659, 0.0446168408, 0.0263288375, 2.14538591E-8, -1.704500e-02, -0.00356168114, -0.0458412617, 0.0638761446, 0.0152198272, -0.0385114551, -0.0164278317, -0.016568929, 0.0560574941, -0.0803062319, -0.00266457512, -0.0417176671, 0.126112729, -0.0492369682, -0.0132609205]>
  memref.global "private" constant @__constant_64x3x7x7xf32 : memref<64x3x7x7xf32> = dense<"
  ml_program.global private mutable @global_seed(dense<0> : tensor<i64>) : tensor<i64>
  func.func @forward(%arg0: memref<1x3x224x224xf32>) -> memref<1x64x56x56xf32> {
    %0 = llvm.mlir.constant(4 : index) : i64
    %1 = llvm.mlir.constant(28 : index) : i64
    %2 = llvm.mlir.constant(56 : index) : i64
    %3 = llvm.mlir.constant(6 : index) : i64
    %4 = llvm.mlir.constant(114 : index) : i64
    %5 = llvm.mlir.constant(8 : index) : i64
    %6 = llvm.mlir.constant(16 : index) : i64
    %7 = llvm.mlir.constant(112 : index) : i64
    %8 = llvm.mlir.constant(64 : index) : i64
    %9 = llvm.mlir.constant(5 : index) : i64
    %10 = llvm.mlir.constant(230 : index) : i64
    %11 = llvm.mlir.constant(3 : index) : i64
    %12 = llvm.mlir.constant(1 : index) : i64
    %13 = llvm.mlir.constant(0 : index) : i64
    %14 = builtin.unrealized_conversion_cast %13 : i64 to index
    %15 = memref.get_global @__constant_64x3x7x7xf32 : memref<64x3x7x7xf32>
    %16 = memref.get_global @__constant_64xf32 : memref<64xf32>
    %17 = memref.get_global @__constant_64xf32_0 : memref<64xf32>
    %18 = memref.get_global @__constant_64xf32_1 : memref<64xf32>
    %19 = memref.get_global @__constant_64xf32_2 : memref<64xf32>
    %alloc = memref.alloc() {alignment = 64 : i64} : memref<1x3x230x230xf32>
    cf.br ^bb1(%14 : index)
  ^bb1(%20: index):  // 2 preds: ^bb0, ^bb8
    %21 = builtin.unrealized_conversion_cast %20 : index to i64
    %22 = llvm.icmp "slt" %21, %12 : i64
    cf.cond_br %22, ^bb2, ^bb9
  ^bb2:  // pred: ^bb1
    cf.br ^bb3(%14 : index)
  ^bb3(%23: index):  // 2 preds: ^bb2, ^bb7
    %24 = builtin.unrealized_conversion_cast %23 : index to i64
    %25 = llvm.icmp "slt" %24, %11 : i64
    cf.cond_br %25, ^bb4, ^bb8
  ^bb4:  // pred: ^bb3
    cf.br ^bb5(%14 : index)
  ^bb5(%26: index):  // 2 preds: ^bb4, ^bb6
    %27 = builtin.unrealized_conversion_cast %26 : index to i64
    %28 = llvm.icmp "slt" %27, %10 : i64
    cf.cond_br %28, ^bb6, ^bb7
  ^bb6:  // pred: ^bb5
    %29 = FDRA.BlockLoad %alloc [0, %23, %26, 0] : memref<1x3x230x230xf32> -> memref<1x3x230x230xf32> {"forward_kernel_0"}
    FDRA.KernelCall @forward_kernel_0(%29) : (memref<1x3x230x230xf32>) -> ()
    FDRA.BlockStore %29,  %alloc [0, %23, %26, 0] : memref<1x3x230x230xf32> -> memref<1x3x230x230xf32> {"forward_kernel_0"}
    %30 = llvm.add %27, %9  : i64
    %31 = builtin.unrealized_conversion_cast %30 : i64 to index
    cf.br ^bb5(%31 : index)
  ^bb7:  // pred: ^bb5
    %32 = llvm.add %24, %12  : i64
    %33 = builtin.unrealized_conversion_cast %32 : i64 to index
    cf.br ^bb3(%33 : index)
  ^bb8:  // pred: ^bb3
    %34 = llvm.add %21, %12  : i64
    %35 = builtin.unrealized_conversion_cast %34 : i64 to index
    cf.br ^bb1(%35 : index)
  ^bb9:  // pred: ^bb1
    %alloc_0 = memref.alloc() {alignment = 64 : i64} : memref<1x3x230x230xf32>
    memref.copy %alloc, %alloc_0 : memref<1x3x230x230xf32> to memref<1x3x230x230xf32>
    %reinterpret_cast = memref.reinterpret_cast %alloc_0 to offset: [693], sizes: [1, 3, 224, 224], strides: [158700, 52900, 230, 1] : memref<1x3x230x230xf32> to memref<1x3x224x224xf32, strided<[158700, 52900, 230, 1], offset: 693>>
    memref.copy %arg0, %reinterpret_cast : memref<1x3x224x224xf32> to memref<1x3x224x224xf32, strided<[158700, 52900, 230, 1], offset: 693>>
    %alloc_1 = memref.alloc() {alignment = 64 : i64} : memref<1x64x112x112xf32>
    cf.br ^bb10(%14 : index)
  ^bb10(%36: index):  // 2 preds: ^bb9, ^bb17
    %37 = builtin.unrealized_conversion_cast %36 : index to i64
    %38 = llvm.icmp "slt" %37, %12 : i64
    cf.cond_br %38, ^bb11, ^bb18
  ^bb11:  // pred: ^bb10
    cf.br ^bb12(%14 : index)
  ^bb12(%39: index):  // 2 preds: ^bb11, ^bb16
    %40 = builtin.unrealized_conversion_cast %39 : index to i64
    %41 = llvm.icmp "slt" %40, %8 : i64
    cf.cond_br %41, ^bb13, ^bb17
  ^bb13:  // pred: ^bb12
    cf.br ^bb14(%14 : index)
  ^bb14(%42: index):  // 2 preds: ^bb13, ^bb15
    %43 = builtin.unrealized_conversion_cast %42 : index to i64
    %44 = llvm.icmp "slt" %43, %7 : i64
    cf.cond_br %44, ^bb15, ^bb16
  ^bb15:  // pred: ^bb14
    %45 = FDRA.BlockLoad %alloc_1 [0, %39, %42, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_1"}
    FDRA.KernelCall @forward_kernel_1(%45) : (memref<1x64x112x112xf32>) -> ()
    FDRA.BlockStore %45,  %alloc_1 [0, %39, %42, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_1"}
    %46 = llvm.add %43, %6  : i64
    %47 = builtin.unrealized_conversion_cast %46 : i64 to index
    cf.br ^bb14(%47 : index)
  ^bb16:  // pred: ^bb14
    %48 = llvm.add %40, %12  : i64
    %49 = builtin.unrealized_conversion_cast %48 : i64 to index
    cf.br ^bb12(%49 : index)
  ^bb17:  // pred: ^bb12
    %50 = llvm.add %37, %12  : i64
    %51 = builtin.unrealized_conversion_cast %50 : i64 to index
    cf.br ^bb10(%51 : index)
  ^bb18:  // pred: ^bb10
    %alloc_2 = memref.alloc() {alignment = 64 : i64} : memref<1x64x112x112xf32>
    memref.copy %alloc_1, %alloc_2 : memref<1x64x112x112xf32> to memref<1x64x112x112xf32>
    cf.br ^bb19(%14 : index)
  ^bb19(%52: index):  // 2 preds: ^bb18, ^bb29
    %53 = builtin.unrealized_conversion_cast %52 : index to i64
    %54 = llvm.icmp "slt" %53, %12 : i64
    cf.cond_br %54, ^bb20, ^bb30
  ^bb20:  // pred: ^bb19
    cf.br ^bb21(%14 : index)
  ^bb21(%55: index):  // 2 preds: ^bb20, ^bb28
    %56 = builtin.unrealized_conversion_cast %55 : index to i64
    %57 = llvm.icmp "slt" %56, %8 : i64
    cf.cond_br %57, ^bb22, ^bb29
  ^bb22:  // pred: ^bb21
    cf.br ^bb23(%14 : index)
  ^bb23(%58: index):  // 2 preds: ^bb22, ^bb27
    %59 = builtin.unrealized_conversion_cast %58 : index to i64
    %60 = llvm.icmp "slt" %59, %7 : i64
    cf.cond_br %60, ^bb24, ^bb28
  ^bb24:  // pred: ^bb23
    cf.br ^bb25(%14 : index)
  ^bb25(%61: index):  // 2 preds: ^bb24, ^bb26
    %62 = builtin.unrealized_conversion_cast %61 : index to i64
    %63 = llvm.icmp "slt" %62, %7 : i64
    cf.cond_br %63, ^bb26, ^bb27
  ^bb26:  // pred: ^bb25
    %64 = FDRA.BlockLoad %alloc_0 [0, 0, %58 * 2, %61 * 2] : memref<1x3x230x230xf32> -> memref<1x3x230x230xf32> {"forward_kernel_2"}
    %65 = FDRA.BlockLoad %15 [%55, 0, 0, 0] : memref<64x3x7x7xf32> -> memref<64x3x7x7xf32> {"forward_kernel_2"}
    %66 = FDRA.BlockLoad %alloc_2 [0, %55, %58, %61] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_2"}
    %67 = FDRA.BlockLoad %alloc_2 [0, %55, %58, %61] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_2"}
    FDRA.KernelCall @forward_kernel_2(%64, %65, %66, %67) : (memref<1x3x230x230xf32>, memref<64x3x7x7xf32>, memref<1x64x112x112xf32>, memref<1x64x112x112xf32>) -> ()
    FDRA.BlockStore %67,  %alloc_2 [0, %55, %58, %61] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_2"}
    %68 = llvm.add %62, %5  : i64
    %69 = builtin.unrealized_conversion_cast %68 : i64 to index
    cf.br ^bb25(%69 : index)
  ^bb27:  // pred: ^bb25
    %70 = llvm.add %59, %12  : i64
    %71 = builtin.unrealized_conversion_cast %70 : i64 to index
    cf.br ^bb23(%71 : index)
  ^bb28:  // pred: ^bb23
    %72 = llvm.add %56, %12  : i64
    %73 = builtin.unrealized_conversion_cast %72 : i64 to index
    cf.br ^bb21(%73 : index)
  ^bb29:  // pred: ^bb21
    %74 = llvm.add %53, %12  : i64
    %75 = builtin.unrealized_conversion_cast %74 : i64 to index
    cf.br ^bb19(%75 : index)
  ^bb30:  // pred: ^bb19
    %alloc_3 = memref.alloc() {alignment = 64 : i64} : memref<1x64x112x112xf32>
    cf.br ^bb31(%14 : index)
  ^bb31(%76: index):  // 2 preds: ^bb30, ^bb38
    %77 = builtin.unrealized_conversion_cast %76 : index to i64
    %78 = llvm.icmp "slt" %77, %12 : i64
    cf.cond_br %78, ^bb32, ^bb39
  ^bb32:  // pred: ^bb31
    cf.br ^bb33(%14 : index)
  ^bb33(%79: index):  // 2 preds: ^bb32, ^bb37
    %80 = builtin.unrealized_conversion_cast %79 : index to i64
    %81 = llvm.icmp "slt" %80, %8 : i64
    cf.cond_br %81, ^bb34, ^bb38
  ^bb34:  // pred: ^bb33
    cf.br ^bb35(%14 : index)
  ^bb35(%82: index):  // 2 preds: ^bb34, ^bb36
    %83 = builtin.unrealized_conversion_cast %82 : index to i64
    %84 = llvm.icmp "slt" %83, %7 : i64
    cf.cond_br %84, ^bb36, ^bb37
  ^bb36:  // pred: ^bb35
    %85 = FDRA.BlockLoad %alloc_2 [0, %79, %82, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_3"}
    %86 = FDRA.BlockLoad %18 [%79] : memref<64xf32> -> memref<64xf32> {"forward_kernel_3"}
    %87 = FDRA.BlockLoad %19 [%79] : memref<64xf32> -> memref<64xf32> {"forward_kernel_3"}
    %88 = FDRA.BlockLoad %16 [%79] : memref<64xf32> -> memref<64xf32> {"forward_kernel_3"}
    %89 = FDRA.BlockLoad %17 [%79] : memref<64xf32> -> memref<64xf32> {"forward_kernel_3"}
    %90 = FDRA.BlockLoad %alloc_3 [0, %79, %82, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_3"}
    FDRA.KernelCall @forward_kernel_3(%85, %86, %87, %88, %89, %90) : (memref<1x64x112x112xf32>, memref<64xf32>, memref<64xf32>, memref<64xf32>, memref<64xf32>, memref<1x64x112x112xf32>) -> ()
    FDRA.BlockStore %90,  %alloc_3 [0, %79, %82, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_3"}
    %91 = llvm.add %83, %6  : i64
    %92 = builtin.unrealized_conversion_cast %91 : i64 to index
    cf.br ^bb35(%92 : index)
  ^bb37:  // pred: ^bb35
    %93 = llvm.add %80, %12  : i64
    %94 = builtin.unrealized_conversion_cast %93 : i64 to index
    cf.br ^bb33(%94 : index)
  ^bb38:  // pred: ^bb33
    %95 = llvm.add %77, %12  : i64
    %96 = builtin.unrealized_conversion_cast %95 : i64 to index
    cf.br ^bb31(%96 : index)
  ^bb39:  // pred: ^bb31
    %alloc_4 = memref.alloc() {alignment = 64 : i64} : memref<1x64x112x112xf32>
    cf.br ^bb40(%14 : index)
  ^bb40(%97: index):  // 2 preds: ^bb39, ^bb47
    %98 = builtin.unrealized_conversion_cast %97 : index to i64
    %99 = llvm.icmp "slt" %98, %12 : i64
    cf.cond_br %99, ^bb41, ^bb48
  ^bb41:  // pred: ^bb40
    cf.br ^bb42(%14 : index)
  ^bb42(%100: index):  // 2 preds: ^bb41, ^bb46
    %101 = builtin.unrealized_conversion_cast %100 : index to i64
    %102 = llvm.icmp "slt" %101, %8 : i64
    cf.cond_br %102, ^bb43, ^bb47
  ^bb43:  // pred: ^bb42
    cf.br ^bb44(%14 : index)
  ^bb44(%103: index):  // 2 preds: ^bb43, ^bb45
    %104 = builtin.unrealized_conversion_cast %103 : index to i64
    %105 = llvm.icmp "slt" %104, %7 : i64
    cf.cond_br %105, ^bb45, ^bb46
  ^bb45:  // pred: ^bb44
    %106 = FDRA.BlockLoad %alloc_3 [0, %100, %103, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_4"}
    %107 = FDRA.BlockLoad %alloc_4 [0, %100, %103, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_4"}
    FDRA.KernelCall @forward_kernel_4(%106, %107) : (memref<1x64x112x112xf32>, memref<1x64x112x112xf32>) -> ()
    FDRA.BlockStore %107,  %alloc_4 [0, %100, %103, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_4"}
    %108 = llvm.add %104, %6  : i64
    %109 = builtin.unrealized_conversion_cast %108 : i64 to index
    cf.br ^bb44(%109 : index)
  ^bb46:  // pred: ^bb44
    %110 = llvm.add %101, %12  : i64
    %111 = builtin.unrealized_conversion_cast %110 : i64 to index
    cf.br ^bb42(%111 : index)
  ^bb47:  // pred: ^bb42
    %112 = llvm.add %98, %12  : i64
    %113 = builtin.unrealized_conversion_cast %112 : i64 to index
    cf.br ^bb40(%113 : index)
  ^bb48:  // pred: ^bb40
    %alloc_5 = memref.alloc() {alignment = 64 : i64} : memref<1x64x114x114xf32>
    cf.br ^bb49(%14 : index)
  ^bb49(%114: index):  // 2 preds: ^bb48, ^bb56
    %115 = builtin.unrealized_conversion_cast %114 : index to i64
    %116 = llvm.icmp "slt" %115, %12 : i64
    cf.cond_br %116, ^bb50, ^bb57
  ^bb50:  // pred: ^bb49
    cf.br ^bb51(%14 : index)
  ^bb51(%117: index):  // 2 preds: ^bb50, ^bb55
    %118 = builtin.unrealized_conversion_cast %117 : index to i64
    %119 = llvm.icmp "slt" %118, %8 : i64
    cf.cond_br %119, ^bb52, ^bb56
  ^bb52:  // pred: ^bb51
    cf.br ^bb53(%14 : index)
  ^bb53(%120: index):  // 2 preds: ^bb52, ^bb54
    %121 = builtin.unrealized_conversion_cast %120 : index to i64
    %122 = llvm.icmp "slt" %121, %4 : i64
    cf.cond_br %122, ^bb54, ^bb55
  ^bb54:  // pred: ^bb53
    %123 = FDRA.BlockLoad %alloc_5 [0, %117, %120, 0] : memref<1x64x114x114xf32> -> memref<1x64x114x114xf32> {"forward_kernel_5"}
    FDRA.KernelCall @forward_kernel_5(%123) : (memref<1x64x114x114xf32>) -> ()
    FDRA.BlockStore %123,  %alloc_5 [0, %117, %120, 0] : memref<1x64x114x114xf32> -> memref<1x64x114x114xf32> {"forward_kernel_5"}
    %124 = llvm.add %121, %3  : i64
    %125 = builtin.unrealized_conversion_cast %124 : i64 to index
    cf.br ^bb53(%125 : index)
  ^bb55:  // pred: ^bb53
    %126 = llvm.add %118, %12  : i64
    %127 = builtin.unrealized_conversion_cast %126 : i64 to index
    cf.br ^bb51(%127 : index)
  ^bb56:  // pred: ^bb51
    %128 = llvm.add %115, %12  : i64
    %129 = builtin.unrealized_conversion_cast %128 : i64 to index
    cf.br ^bb49(%129 : index)
  ^bb57:  // pred: ^bb49
    %alloc_6 = memref.alloc() {alignment = 64 : i64} : memref<1x64x114x114xf32>
    memref.copy %alloc_5, %alloc_6 : memref<1x64x114x114xf32> to memref<1x64x114x114xf32>
    %reinterpret_cast_7 = memref.reinterpret_cast %alloc_6 to offset: [115], sizes: [1, 64, 112, 112], strides: [831744, 12996, 114, 1] : memref<1x64x114x114xf32> to memref<1x64x112x112xf32, strided<[831744, 12996, 114, 1], offset: 115>>
    memref.copy %alloc_4, %reinterpret_cast_7 : memref<1x64x112x112xf32> to memref<1x64x112x112xf32, strided<[831744, 12996, 114, 1], offset: 115>>
    %alloc_8 = memref.alloc() {alignment = 64 : i64} : memref<1x64x56x56xf32>
    cf.br ^bb58(%14 : index)
  ^bb58(%130: index):  // 2 preds: ^bb57, ^bb65
    %131 = builtin.unrealized_conversion_cast %130 : index to i64
    %132 = llvm.icmp "slt" %131, %12 : i64
    cf.cond_br %132, ^bb59, ^bb66
  ^bb59:  // pred: ^bb58
    cf.br ^bb60(%14 : index)
  ^bb60(%133: index):  // 2 preds: ^bb59, ^bb64
    %134 = builtin.unrealized_conversion_cast %133 : index to i64
    %135 = llvm.icmp "slt" %134, %8 : i64
    cf.cond_br %135, ^bb61, ^bb65
  ^bb61:  // pred: ^bb60
    cf.br ^bb62(%14 : index)
  ^bb62(%136: index):  // 2 preds: ^bb61, ^bb63
    %137 = builtin.unrealized_conversion_cast %136 : index to i64
    %138 = llvm.icmp "slt" %137, %2 : i64
    cf.cond_br %138, ^bb63, ^bb64
  ^bb63:  // pred: ^bb62
    %139 = FDRA.BlockLoad %alloc_8 [0, %133, %136, 0] : memref<1x64x56x56xf32> -> memref<1x64x56x56xf32> {"forward_kernel_6"}
    FDRA.KernelCall @forward_kernel_6(%139) : (memref<1x64x56x56xf32>) -> ()
    FDRA.BlockStore %139,  %alloc_8 [0, %133, %136, 0] : memref<1x64x56x56xf32> -> memref<1x64x56x56xf32> {"forward_kernel_6"}
    %140 = llvm.add %137, %1  : i64
    %141 = builtin.unrealized_conversion_cast %140 : i64 to index
    cf.br ^bb62(%141 : index)
  ^bb64:  // pred: ^bb62
    %142 = llvm.add %134, %12  : i64
    %143 = builtin.unrealized_conversion_cast %142 : i64 to index
    cf.br ^bb60(%143 : index)
  ^bb65:  // pred: ^bb60
    %144 = llvm.add %131, %12  : i64
    %145 = builtin.unrealized_conversion_cast %144 : i64 to index
    cf.br ^bb58(%145 : index)
  ^bb66:  // pred: ^bb58
    %alloc_9 = memref.alloc() {alignment = 64 : i64} : memref<1x64x56x56xf32>
    memref.copy %alloc_8, %alloc_9 : memref<1x64x56x56xf32> to memref<1x64x56x56xf32>
    cf.br ^bb67(%14 : index)
  ^bb67(%146: index):  // 2 preds: ^bb66, ^bb74
    %147 = builtin.unrealized_conversion_cast %146 : index to i64
    %148 = llvm.icmp "slt" %147, %12 : i64
    cf.cond_br %148, ^bb68, ^bb75
  ^bb68:  // pred: ^bb67
    cf.br ^bb69(%14 : index)
  ^bb69(%149: index):  // 2 preds: ^bb68, ^bb73
    %150 = builtin.unrealized_conversion_cast %149 : index to i64
    %151 = llvm.icmp "slt" %150, %8 : i64
    cf.cond_br %151, ^bb70, ^bb74
  ^bb70:  // pred: ^bb69
    cf.br ^bb71(%14 : index)
  ^bb71(%152: index):  // 2 preds: ^bb70, ^bb72
    %153 = builtin.unrealized_conversion_cast %152 : index to i64
    %154 = llvm.icmp "slt" %153, %2 : i64
    cf.cond_br %154, ^bb72, ^bb73
  ^bb72:  // pred: ^bb71
    %155 = FDRA.BlockLoad %alloc_6 [0, %149, %152 * 2, 0] : memref<1x64x114x114xf32> -> memref<1x64x114x114xf32> {"forward_kernel_7"}
    %156 = FDRA.BlockLoad %alloc_9 [0, %149, %152, 0] : memref<1x64x56x56xf32> -> memref<1x64x56x56xf32> {"forward_kernel_7"}
    %157 = FDRA.BlockLoad %alloc_9 [0, %149, %152, 0] : memref<1x64x56x56xf32> -> memref<1x64x56x56xf32> {"forward_kernel_7"}
    FDRA.KernelCall @forward_kernel_7(%155, %156, %157) : (memref<1x64x114x114xf32>, memref<1x64x56x56xf32>, memref<1x64x56x56xf32>) -> ()
    FDRA.BlockStore %157,  %alloc_9 [0, %149, %152, 0] : memref<1x64x56x56xf32> -> memref<1x64x56x56xf32> {"forward_kernel_7"}
    %158 = llvm.add %153, %0  : i64
    %159 = builtin.unrealized_conversion_cast %158 : i64 to index
    cf.br ^bb71(%159 : index)
  ^bb73:  // pred: ^bb71
    %160 = llvm.add %150, %12  : i64
    %161 = builtin.unrealized_conversion_cast %160 : i64 to index
    cf.br ^bb69(%161 : index)
  ^bb74:  // pred: ^bb69
    %162 = llvm.add %147, %12  : i64
    %163 = builtin.unrealized_conversion_cast %162 : i64 to index
    cf.br ^bb67(%163 : index)
  ^bb75:  // pred: ^bb67
    return %alloc_9 : memref<1x64x56x56xf32>
  }
  func.func @forward_kernel_0(%arg0: memref<1x3x230x230xf32>) attributes {Kernel, forward_kernel_0} {
    %0 = llvm.mlir.constant(230 : index) : i64
    %1 = llvm.mlir.constant(1 : index) : i64
    %2 = llvm.mlir.constant(5 : index) : i64
    %3 = llvm.mlir.constant(0 : index) : i64
    %4 = builtin.unrealized_conversion_cast %3 : i64 to index
    %5 = llvm.mlir.constant(0.000000e+00 : f32) : f32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2(%4 : index)
  ^bb2(%6: index):  // 2 preds: ^bb1, ^bb6
    %7 = builtin.unrealized_conversion_cast %6 : index to i64
    %8 = llvm.icmp "slt" %7, %2 : i64
    cf.cond_br %8, ^bb3, ^bb7
  ^bb3:  // pred: ^bb2
    cf.br ^bb4(%4 : index)
  ^bb4(%9: index):  // 2 preds: ^bb3, ^bb5
    %10 = builtin.unrealized_conversion_cast %9 : index to i64
    %11 = llvm.icmp "slt" %10, %0 : i64
    cf.cond_br %11, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    memref.store %5, %arg0[%4, %4, %6, %9] : memref<1x3x230x230xf32>
    %12 = llvm.add %10, %1  : i64
    %13 = builtin.unrealized_conversion_cast %12 : i64 to index
    cf.br ^bb4(%13 : index)
  ^bb6:  // pred: ^bb4
    %14 = llvm.add %7, %1  : i64
    %15 = builtin.unrealized_conversion_cast %14 : i64 to index
    cf.br ^bb2(%15 : index)
  ^bb7:  // pred: ^bb2
    return
  }
  func.func @forward_kernel_1(%arg0: memref<1x64x112x112xf32>) attributes {Kernel, forward_kernel_1} {
    %0 = llvm.mlir.constant(112 : index) : i64
    %1 = llvm.mlir.constant(1 : index) : i64
    %2 = llvm.mlir.constant(16 : index) : i64
    %3 = llvm.mlir.constant(0 : index) : i64
    %4 = builtin.unrealized_conversion_cast %3 : i64 to index
    %5 = llvm.mlir.constant(0.000000e+00 : f32) : f32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2(%4 : index)
  ^bb2(%6: index):  // 2 preds: ^bb1, ^bb6
    %7 = builtin.unrealized_conversion_cast %6 : index to i64
    %8 = llvm.icmp "slt" %7, %2 : i64
    cf.cond_br %8, ^bb3, ^bb7
  ^bb3:  // pred: ^bb2
    cf.br ^bb4(%4 : index)
  ^bb4(%9: index):  // 2 preds: ^bb3, ^bb5
    %10 = builtin.unrealized_conversion_cast %9 : index to i64
    %11 = llvm.icmp "slt" %10, %0 : i64
    cf.cond_br %11, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    memref.store %5, %arg0[%4, %4, %6, %9] : memref<1x64x112x112xf32>
    %12 = llvm.add %10, %1  : i64
    %13 = builtin.unrealized_conversion_cast %12 : i64 to index
    cf.br ^bb4(%13 : index)
  ^bb6:  // pred: ^bb4
    %14 = llvm.add %7, %1  : i64
    %15 = builtin.unrealized_conversion_cast %14 : i64 to index
    cf.br ^bb2(%15 : index)
  ^bb7:  // pred: ^bb2
    return
  }
  func.func @forward_kernel_2(%arg0: memref<1x3x230x230xf32>, %arg1: memref<64x3x7x7xf32>, %arg2: memref<1x64x112x112xf32>, %arg3: memref<1x64x112x112xf32>) attributes {Kernel, forward_kernel_2} {
    %0 = llvm.mlir.constant(2 : index) : i64
    %1 = llvm.mlir.constant(7 : index) : i64
    %2 = llvm.mlir.constant(3 : index) : i64
    %3 = llvm.mlir.constant(1 : index) : i64
    %4 = llvm.mlir.constant(8 : index) : i64
    %5 = llvm.mlir.constant(0 : index) : i64
    %6 = builtin.unrealized_conversion_cast %5 : i64 to index
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2(%6 : index)
  ^bb2(%7: index):  // 2 preds: ^bb1, ^bb12
    %8 = builtin.unrealized_conversion_cast %7 : index to i64
    %9 = llvm.icmp "slt" %8, %4 : i64
    cf.cond_br %9, ^bb3, ^bb13
  ^bb3:  // pred: ^bb2
    cf.br ^bb4(%6 : index)
  ^bb4(%10: index):  // 2 preds: ^bb3, ^bb11
    %11 = builtin.unrealized_conversion_cast %10 : index to i64
    %12 = llvm.icmp "slt" %11, %2 : i64
    cf.cond_br %12, ^bb5, ^bb12
  ^bb5:  // pred: ^bb4
    cf.br ^bb6(%6 : index)
  ^bb6(%13: index):  // 2 preds: ^bb5, ^bb10
    %14 = builtin.unrealized_conversion_cast %13 : index to i64
    %15 = llvm.icmp "slt" %14, %1 : i64
    cf.cond_br %15, ^bb7, ^bb11
  ^bb7:  // pred: ^bb6
    cf.br ^bb8(%6 : index)
  ^bb8(%16: index):  // 2 preds: ^bb7, ^bb9
    %17 = builtin.unrealized_conversion_cast %16 : index to i64
    %18 = llvm.icmp "slt" %17, %1 : i64
    cf.cond_br %18, ^bb9, ^bb10
  ^bb9:  // pred: ^bb8
    %19 = llvm.mul %8, %0  : i64
    %20 = llvm.add %19, %17  : i64
    %21 = builtin.unrealized_conversion_cast %20 : i64 to index
    %22 = memref.load %arg0[%6, %10, %13, %21] : memref<1x3x230x230xf32>
    %23 = memref.load %arg1[%6, %10, %13, %16] : memref<64x3x7x7xf32>
    %24 = memref.load %arg2[%6, %6, %6, %7] : memref<1x64x112x112xf32>
    %25 = llvm.fmul %22, %23  : f32
    %26 = llvm.fadd %24, %25  : f32
    memref.store %26, %arg3[%6, %6, %6, %7] : memref<1x64x112x112xf32>
    %27 = llvm.add %17, %3  : i64
    %28 = builtin.unrealized_conversion_cast %27 : i64 to index
    cf.br ^bb8(%28 : index)
  ^bb10:  // pred: ^bb8
    %29 = llvm.add %14, %3  : i64
    %30 = builtin.unrealized_conversion_cast %29 : i64 to index
    cf.br ^bb6(%30 : index)
  ^bb11:  // pred: ^bb6
    %31 = llvm.add %11, %3  : i64
    %32 = builtin.unrealized_conversion_cast %31 : i64 to index
    cf.br ^bb4(%32 : index)
  ^bb12:  // pred: ^bb4
    %33 = llvm.add %8, %3  : i64
    %34 = builtin.unrealized_conversion_cast %33 : i64 to index
    cf.br ^bb2(%34 : index)
  ^bb13:  // pred: ^bb2
    return
  }
  func.func @forward_kernel_3(%arg0: memref<1x64x112x112xf32>, %arg1: memref<64xf32>, %arg2: memref<64xf32>, %arg3: memref<64xf32>, %arg4: memref<64xf32>, %arg5: memref<1x64x112x112xf32>) attributes {Kernel, forward_kernel_3} {
    %0 = llvm.mlir.constant(112 : index) : i64
    %1 = llvm.mlir.constant(1 : index) : i64
    %2 = llvm.mlir.constant(16 : index) : i64
    %3 = llvm.mlir.constant(0 : index) : i64
    %4 = builtin.unrealized_conversion_cast %3 : i64 to index
    %5 = llvm.mlir.constant(1.500000e+00 : f32) : f32
    %6 = llvm.mlir.constant(1597463007 : i32) : i32
    %7 = llvm.mlir.constant(1 : i32) : i32
    %8 = llvm.mlir.constant(5.000000e-01 : f32) : f32
    %9 = llvm.mlir.constant(1.000000e-05 : f64) : f64
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2(%4 : index)
  ^bb2(%10: index):  // 2 preds: ^bb1, ^bb6
    %11 = builtin.unrealized_conversion_cast %10 : index to i64
    %12 = llvm.icmp "slt" %11, %2 : i64
    cf.cond_br %12, ^bb3, ^bb7
  ^bb3:  // pred: ^bb2
    cf.br ^bb4(%4 : index)
  ^bb4(%13: index):  // 2 preds: ^bb3, ^bb5
    %14 = builtin.unrealized_conversion_cast %13 : index to i64
    %15 = llvm.icmp "slt" %14, %0 : i64
    cf.cond_br %15, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    %16 = memref.load %arg0[%4, %4, %10, %13] : memref<1x64x112x112xf32>
    %17 = memref.load %arg1[%4] : memref<64xf32>
    %18 = memref.load %arg2[%4] : memref<64xf32>
    %19 = memref.load %arg3[%4] : memref<64xf32>
    %20 = memref.load %arg4[%4] : memref<64xf32>
    %21 = llvm.fptrunc %9 : f64 to f32
    %22 = llvm.fadd %20, %21  : f32
    %23 = llvm.fmul %22, %8  : f32
    %24 = llvm.bitcast %22 : f32 to i32
    %25 = llvm.lshr %24, %7  : i32
    %26 = llvm.sub %6, %25  : i32
    %27 = llvm.bitcast %26 : i32 to f32
    %28 = llvm.fmul %27, %27  : f32
    %29 = llvm.fmul %28, %23  : f32
    %30 = llvm.fsub %5, %29  : f32
    %31 = llvm.fmul %30, %28  : f32
    %32 = llvm.fsub %16, %19  : f32
    %33 = llvm.fmul %32, %31  : f32
    %34 = llvm.fmul %33, %17  : f32
    %35 = llvm.fadd %34, %18  : f32
    memref.store %35, %arg5[%4, %4, %10, %13] : memref<1x64x112x112xf32>
    %36 = llvm.add %14, %1  : i64
    %37 = builtin.unrealized_conversion_cast %36 : i64 to index
    cf.br ^bb4(%37 : index)
  ^bb6:  // pred: ^bb4
    %38 = llvm.add %11, %1  : i64
    %39 = builtin.unrealized_conversion_cast %38 : i64 to index
    cf.br ^bb2(%39 : index)
  ^bb7:  // pred: ^bb2
    return
  }
  func.func @forward_kernel_4(%arg0: memref<1x64x112x112xf32>, %arg1: memref<1x64x112x112xf32>) attributes {Kernel, forward_kernel_4} {
    %0 = llvm.mlir.constant(112 : index) : i64
    %1 = llvm.mlir.constant(1 : index) : i64
    %2 = llvm.mlir.constant(16 : index) : i64
    %3 = llvm.mlir.constant(0 : index) : i64
    %4 = builtin.unrealized_conversion_cast %3 : i64 to index
    %5 = llvm.mlir.constant(0.000000e+00 : f32) : f32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2(%4 : index)
  ^bb2(%6: index):  // 2 preds: ^bb1, ^bb6
    %7 = builtin.unrealized_conversion_cast %6 : index to i64
    %8 = llvm.icmp "slt" %7, %2 : i64
    cf.cond_br %8, ^bb3, ^bb7
  ^bb3:  // pred: ^bb2
    cf.br ^bb4(%4 : index)
  ^bb4(%9: index):  // 2 preds: ^bb3, ^bb5
    %10 = builtin.unrealized_conversion_cast %9 : index to i64
    %11 = llvm.icmp "slt" %10, %0 : i64
    cf.cond_br %11, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    %12 = memref.load %arg0[%4, %4, %6, %9] : memref<1x64x112x112xf32>
    %13 = llvm.fcmp "ugt" %12, %5 : f32
    %14 = llvm.select %13, %12, %5 : i1, f32
    memref.store %14, %arg1[%4, %4, %6, %9] : memref<1x64x112x112xf32>
    %15 = llvm.add %10, %1  : i64
    %16 = builtin.unrealized_conversion_cast %15 : i64 to index
    cf.br ^bb4(%16 : index)
  ^bb6:  // pred: ^bb4
    %17 = llvm.add %7, %1  : i64
    %18 = builtin.unrealized_conversion_cast %17 : i64 to index
    cf.br ^bb2(%18 : index)
  ^bb7:  // pred: ^bb2
    return
  }
  func.func @forward_kernel_5(%arg0: memref<1x64x114x114xf32>) attributes {Kernel, forward_kernel_5} {
    %0 = llvm.mlir.constant(114 : index) : i64
    %1 = llvm.mlir.constant(1 : index) : i64
    %2 = llvm.mlir.constant(6 : index) : i64
    %3 = llvm.mlir.constant(0 : index) : i64
    %4 = builtin.unrealized_conversion_cast %3 : i64 to index
    %5 = llvm.mlir.constant(0xFF800000 : f32) : f32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2(%4 : index)
  ^bb2(%6: index):  // 2 preds: ^bb1, ^bb6
    %7 = builtin.unrealized_conversion_cast %6 : index to i64
    %8 = llvm.icmp "slt" %7, %2 : i64
    cf.cond_br %8, ^bb3, ^bb7
  ^bb3:  // pred: ^bb2
    cf.br ^bb4(%4 : index)
  ^bb4(%9: index):  // 2 preds: ^bb3, ^bb5
    %10 = builtin.unrealized_conversion_cast %9 : index to i64
    %11 = llvm.icmp "slt" %10, %0 : i64
    cf.cond_br %11, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    memref.store %5, %arg0[%4, %4, %6, %9] : memref<1x64x114x114xf32>
    %12 = llvm.add %10, %1  : i64
    %13 = builtin.unrealized_conversion_cast %12 : i64 to index
    cf.br ^bb4(%13 : index)
  ^bb6:  // pred: ^bb4
    %14 = llvm.add %7, %1  : i64
    %15 = builtin.unrealized_conversion_cast %14 : i64 to index
    cf.br ^bb2(%15 : index)
  ^bb7:  // pred: ^bb2
    return
  }
  func.func @forward_kernel_6(%arg0: memref<1x64x56x56xf32>) attributes {Kernel, forward_kernel_6} {
    %0 = llvm.mlir.constant(56 : index) : i64
    %1 = llvm.mlir.constant(1 : index) : i64
    %2 = llvm.mlir.constant(28 : index) : i64
    %3 = llvm.mlir.constant(0 : index) : i64
    %4 = builtin.unrealized_conversion_cast %3 : i64 to index
    %5 = llvm.mlir.constant(0xFF800000 : f32) : f32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2(%4 : index)
  ^bb2(%6: index):  // 2 preds: ^bb1, ^bb6
    %7 = builtin.unrealized_conversion_cast %6 : index to i64
    %8 = llvm.icmp "slt" %7, %2 : i64
    cf.cond_br %8, ^bb3, ^bb7
  ^bb3:  // pred: ^bb2
    cf.br ^bb4(%4 : index)
  ^bb4(%9: index):  // 2 preds: ^bb3, ^bb5
    %10 = builtin.unrealized_conversion_cast %9 : index to i64
    %11 = llvm.icmp "slt" %10, %0 : i64
    cf.cond_br %11, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    memref.store %5, %arg0[%4, %4, %6, %9] : memref<1x64x56x56xf32>
    %12 = llvm.add %10, %1  : i64
    %13 = builtin.unrealized_conversion_cast %12 : i64 to index
    cf.br ^bb4(%13 : index)
  ^bb6:  // pred: ^bb4
    %14 = llvm.add %7, %1  : i64
    %15 = builtin.unrealized_conversion_cast %14 : i64 to index
    cf.br ^bb2(%15 : index)
  ^bb7:  // pred: ^bb2
    return
  }
  func.func @forward_kernel_7(%arg0: memref<1x64x114x114xf32>, %arg1: memref<1x64x56x56xf32>, %arg2: memref<1x64x56x56xf32>) attributes {Kernel, forward_kernel_7} {
    %0 = llvm.mlir.constant(2 : index) : i64
    %1 = llvm.mlir.constant(3 : index) : i64
    %2 = llvm.mlir.constant(56 : index) : i64
    %3 = llvm.mlir.constant(1 : index) : i64
    %4 = llvm.mlir.constant(4 : index) : i64
    %5 = llvm.mlir.constant(0 : index) : i64
    %6 = builtin.unrealized_conversion_cast %5 : i64 to index
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2(%6 : index)
  ^bb2(%7: index):  // 2 preds: ^bb1, ^bb12
    %8 = builtin.unrealized_conversion_cast %7 : index to i64
    %9 = llvm.icmp "slt" %8, %4 : i64
    cf.cond_br %9, ^bb3, ^bb13
  ^bb3:  // pred: ^bb2
    cf.br ^bb4(%6 : index)
  ^bb4(%10: index):  // 2 preds: ^bb3, ^bb11
    %11 = builtin.unrealized_conversion_cast %10 : index to i64
    %12 = llvm.icmp "slt" %11, %2 : i64
    cf.cond_br %12, ^bb5, ^bb12
  ^bb5:  // pred: ^bb4
    cf.br ^bb6(%6 : index)
  ^bb6(%13: index):  // 2 preds: ^bb5, ^bb10
    %14 = builtin.unrealized_conversion_cast %13 : index to i64
    %15 = llvm.icmp "slt" %14, %1 : i64
    cf.cond_br %15, ^bb7, ^bb11
  ^bb7:  // pred: ^bb6
    cf.br ^bb8(%6 : index)
  ^bb8(%16: index):  // 2 preds: ^bb7, ^bb9
    %17 = builtin.unrealized_conversion_cast %16 : index to i64
    %18 = llvm.icmp "slt" %17, %1 : i64
    cf.cond_br %18, ^bb9, ^bb10
  ^bb9:  // pred: ^bb8
    %19 = llvm.mul %8, %0  : i64
    %20 = llvm.add %19, %14  : i64
    %21 = builtin.unrealized_conversion_cast %20 : i64 to index
    %22 = llvm.mul %11, %0  : i64
    %23 = llvm.add %22, %17  : i64
    %24 = builtin.unrealized_conversion_cast %23 : i64 to index
    %25 = memref.load %arg0[%6, %6, %21, %24] : memref<1x64x114x114xf32>
    %26 = memref.load %arg1[%6, %6, %7, %10] : memref<1x64x56x56xf32>
    %27 = llvm.fcmp "ugt" %26, %25 : f32
    %28 = llvm.select %27, %26, %25 : i1, f32
    %29 = llvm.fcmp "uno" %25, %25 : f32
    %30 = llvm.select %29, %25, %28 : i1, f32
    memref.store %30, %arg2[%6, %6, %7, %10] : memref<1x64x56x56xf32>
    %31 = llvm.add %17, %3  : i64
    %32 = builtin.unrealized_conversion_cast %31 : i64 to index
    cf.br ^bb8(%32 : index)
  ^bb10:  // pred: ^bb8
    %33 = llvm.add %14, %3  : i64
    %34 = builtin.unrealized_conversion_cast %33 : i64 to index
    cf.br ^bb6(%34 : index)
  ^bb11:  // pred: ^bb6
    %35 = llvm.add %11, %3  : i64
    %36 = builtin.unrealized_conversion_cast %35 : i64 to index
    cf.br ^bb4(%36 : index)
  ^bb12:  // pred: ^bb4
    %37 = llvm.add %8, %3  : i64
    %38 = builtin.unrealized_conversion_cast %37 : i64 to index
    cf.br ^bb2(%38 : index)
  ^bb13:  // pred: ^bb2
    return
  }
}


// -----// IR Dump After FinalizeMemRefToLLVMConversionPass (finalize-memref-to-llvm) //----- //
module attributes {torch.debug_module_name = "ResNet"} {
  llvm.func @memrefCopy(i64, !llvm.ptr, !llvm.ptr)
  llvm.func @malloc(i64) -> !llvm.ptr
  llvm.mlir.global private constant @__constant_64xf32_2(dense<[0.230717152, 0.253822476, -1.05429808E-6, -0.664388895, -1.65705547E-8, 0.161521927, 0.454503953, -4.301950e-07, 0.300513744, -8.005240e-06, 0.349418074, 0.311480612, -0.249529764, -3.474890e-05, 0.107726313, 0.218970656, 0.381412596, -0.529882133, -0.628644109, 0.571398079, 0.299846917, 0.584303737, 0.48202154, 0.328526348, 0.196717009, 0.194961801, 0.152145416, 0.085522361, 0.513142824, 0.0152367353, 0.166441768, 0.332394391, 0.249211237, 0.443366677, -0.280169278, -0.0203848016, -2.45068748E-7, 0.321340501, -4.9151744E-8, 0.237767309, 0.232907727, 0.315274626, 0.427762389, 0.293127537, 0.263794243, 0.675975859, 0.429100394, 0.345662743, -8.69090186E-8, 0.247294366, 0.303160846, 0.615772783, 0.39834857, 0.332067341, -0.412187815, 0.378069043, 0.178953409, 0.25747788, -0.449079722, 0.213058949, 0.569339037, 5.727430e-01, -0.402383476, 0.23406373]> : tensor<64xf32>) {addr_space = 0 : i32} : !llvm.array<64 x f32>
  llvm.mlir.global private constant @__constant_64xf32_1(dense<[0.234872743, 0.266257942, -5.10959595E-8, 0.518699706, 3.44040196E-9, 0.222385287, 0.422887057, 1.31532403E-7, 0.25093165, 1.5152026E-6, 0.316871643, 0.250491828, 0.378926098, 1.08618351E-5, 2.752640e-01, 0.236741036, 0.242021769, 0.395314813, 0.469346285, 0.2908957, 0.272684187, 0.27802828, 0.290692091, 0.206927493, 0.258990377, 0.278710574, 0.291149527, 0.316013753, 0.388891488, 0.304111898, 0.267757207, 0.210925162, 0.287084132, 0.332426429, 0.42672804, 0.373260558, 7.48037578E-8, 0.19067812, 1.47401256E-8, 0.223029822, 0.179079413, 0.248600766, 0.27399528, 0.259228647, 0.294202209, 0.299236417, 0.223688841, 0.262799472, 2.20011476E-8, 0.266098082, 0.220890298, 0.284285516, 0.330723315, 0.226809531, 0.365380913, 0.21229881, 0.239653021, 0.24949576, 0.525830686, 0.248247579, 0.295652747, 0.258776665, 0.4832564, 0.26670444]> : tensor<64xf32>) {addr_space = 0 : i32} : !llvm.array<64 x f32>
  llvm.mlir.global private constant @__constant_64xf32_0(dense<[1.01694489, 3.71674347, 5.81334356E-11, 3.28254271, 1.71074404E-13, 0.658226967, 4.37006235, 6.60045282E-12, 0.915522992, 1.93175254E-9, 4.12558556, 2.74399233, 2.8390913, 4.79658588E-8, 11.0722713, 0.500745952, 2.23128176, 4.82570696, 2.69861364, 9.36995506, 3.73391747, 5.48429585, 5.7126689, 0.445444882, 0.436275303, 7.15633583, 13.7179089, 5.25117493, 6.81737518, 1.67235756, 1.65343034, 1.23245978, 4.90762854, 3.07305121, 4.23838568, 4.99363518, 1.44646307E-12, 1.52116203, 1.03519833E-13, 0.351344079, 0.17024748, 1.42054474, 1.90848303, 2.15124035, 2.66084933, 4.84443378, 1.92971194, 1.49994361, 2.94806145E-13, 1.53064024, 0.365027189, 2.93755412, 5.46641159, 0.707924544, 3.33150721, 0.771802961, 2.40678358, 6.5213666, 4.12625027, 1.05063522, 2.95303202, 11.3656216, 4.76904678, 1.65587807]> : tensor<64xf32>) {addr_space = 0 : i32} : !llvm.array<64 x f32>
  llvm.mlir.global private constant @__constant_64xf32(dense<[0.00276811025, -0.0257689245, 2.12544663E-7, -0.0846051499, 2.11205915E-8, 4.96906461E-4, -0.0224083271, -1.15818956E-7, -4.823850e-03, 2.75073347E-7, 3.958230e-02, 0.0319936387, -0.0374896601, -1.37163477E-6, 0.00660019321, 4.378190e-03, 0.0647971481, 0.11175999, 0.0360015705, -0.0750752166, -0.03824009, 0.0843578502, -5.228700e-02, -0.0117988894, 0.00130188058, 0.0321722962, -0.0177843049, -0.0910085887, 0.113187239, -0.0416320041, 0.00873024761, 0.0296931695, -0.0705021694, -0.00348469778, 0.109771468, -0.00173411821, -5.94229412E-8, 0.0293303896, -7.85527287E-9, 0.00673204474, -0.00370999542, 0.0160279572, -0.0278826058, 0.0265925378, 0.0284745526, -0.12734659, 0.0446168408, 0.0263288375, 2.14538591E-8, -1.704500e-02, -0.00356168114, -0.0458412617, 0.0638761446, 0.0152198272, -0.0385114551, -0.0164278317, -0.016568929, 0.0560574941, -0.0803062319, -0.00266457512, -0.0417176671, 0.126112729, -0.0492369682, -0.0132609205]> : tensor<64xf32>) {addr_space = 0 : i32} : !llvm.array<64 x f32>
  llvm.mlir.global private constant @__constant_64x3x7x7xf32(dense<"tensor<64x3x7x7xf32>) {addr_space = 0 : i32} : !llvm.array<64 x array<3 x array<7 x array<7 x f32>>>>
  ml_program.global private mutable @global_seed(dense<0> : tensor<i64>) : tensor<i64>
  func.func @forward(%arg0: memref<1x3x224x224xf32>) -> memref<1x64x56x56xf32> {
    %0 = builtin.unrealized_conversion_cast %arg0 : memref<1x3x224x224xf32> to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %1 = llvm.mlir.constant(4 : index) : i64
    %2 = llvm.mlir.constant(28 : index) : i64
    %3 = llvm.mlir.constant(56 : index) : i64
    %4 = llvm.mlir.constant(6 : index) : i64
    %5 = llvm.mlir.constant(114 : index) : i64
    %6 = llvm.mlir.constant(8 : index) : i64
    %7 = llvm.mlir.constant(16 : index) : i64
    %8 = llvm.mlir.constant(112 : index) : i64
    %9 = llvm.mlir.constant(64 : index) : i64
    %10 = llvm.mlir.constant(5 : index) : i64
    %11 = llvm.mlir.constant(230 : index) : i64
    %12 = llvm.mlir.constant(3 : index) : i64
    %13 = llvm.mlir.constant(1 : index) : i64
    %14 = llvm.mlir.constant(0 : index) : i64
    %15 = builtin.unrealized_conversion_cast %14 : i64 to index
    %16 = llvm.mlir.constant(64 : index) : i64
    %17 = llvm.mlir.constant(3 : index) : i64
    %18 = llvm.mlir.constant(7 : index) : i64
    %19 = llvm.mlir.constant(7 : index) : i64
    %20 = llvm.mlir.constant(1 : index) : i64
    %21 = llvm.mlir.constant(49 : index) : i64
    %22 = llvm.mlir.constant(147 : index) : i64
    %23 = llvm.mlir.constant(9408 : index) : i64
    %24 = llvm.mlir.null : !llvm.ptr
    %25 = llvm.getelementptr %24[%23] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %26 = llvm.ptrtoint %25 : !llvm.ptr to i64
    %27 = llvm.mlir.addressof @__constant_64x3x7x7xf32 : !llvm.ptr
    %28 = llvm.getelementptr %27[0, 0, 0, 0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<64 x array<3 x array<7 x array<7 x f32>>>>
    %29 = llvm.mlir.constant(3735928559 : index) : i64
    %30 = llvm.inttoptr %29 : i64 to !llvm.ptr
    %31 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %32 = llvm.insertvalue %30, %31[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %33 = llvm.insertvalue %28, %32[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %34 = llvm.mlir.constant(0 : index) : i64
    %35 = llvm.insertvalue %34, %33[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %36 = llvm.insertvalue %16, %35[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %37 = llvm.insertvalue %17, %36[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %38 = llvm.insertvalue %18, %37[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %39 = llvm.insertvalue %19, %38[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %40 = llvm.insertvalue %22, %39[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %41 = llvm.insertvalue %21, %40[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %42 = llvm.insertvalue %19, %41[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %43 = llvm.insertvalue %20, %42[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %44 = builtin.unrealized_conversion_cast %43 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> to memref<64x3x7x7xf32>
    %45 = llvm.mlir.constant(64 : index) : i64
    %46 = llvm.mlir.constant(1 : index) : i64
    %47 = llvm.mlir.null : !llvm.ptr
    %48 = llvm.getelementptr %47[%45] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %49 = llvm.ptrtoint %48 : !llvm.ptr to i64
    %50 = llvm.mlir.addressof @__constant_64xf32 : !llvm.ptr
    %51 = llvm.getelementptr %50[0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<64 x f32>
    %52 = llvm.mlir.constant(3735928559 : index) : i64
    %53 = llvm.inttoptr %52 : i64 to !llvm.ptr
    %54 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %55 = llvm.insertvalue %53, %54[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %56 = llvm.insertvalue %51, %55[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %57 = llvm.mlir.constant(0 : index) : i64
    %58 = llvm.insertvalue %57, %56[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %59 = llvm.insertvalue %45, %58[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %60 = llvm.insertvalue %46, %59[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %61 = builtin.unrealized_conversion_cast %60 : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> to memref<64xf32>
    %62 = llvm.mlir.constant(64 : index) : i64
    %63 = llvm.mlir.constant(1 : index) : i64
    %64 = llvm.mlir.null : !llvm.ptr
    %65 = llvm.getelementptr %64[%62] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %66 = llvm.ptrtoint %65 : !llvm.ptr to i64
    %67 = llvm.mlir.addressof @__constant_64xf32_0 : !llvm.ptr
    %68 = llvm.getelementptr %67[0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<64 x f32>
    %69 = llvm.mlir.constant(3735928559 : index) : i64
    %70 = llvm.inttoptr %69 : i64 to !llvm.ptr
    %71 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %72 = llvm.insertvalue %70, %71[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %73 = llvm.insertvalue %68, %72[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %74 = llvm.mlir.constant(0 : index) : i64
    %75 = llvm.insertvalue %74, %73[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %76 = llvm.insertvalue %62, %75[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %77 = llvm.insertvalue %63, %76[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %78 = builtin.unrealized_conversion_cast %77 : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> to memref<64xf32>
    %79 = llvm.mlir.constant(64 : index) : i64
    %80 = llvm.mlir.constant(1 : index) : i64
    %81 = llvm.mlir.null : !llvm.ptr
    %82 = llvm.getelementptr %81[%79] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %83 = llvm.ptrtoint %82 : !llvm.ptr to i64
    %84 = llvm.mlir.addressof @__constant_64xf32_1 : !llvm.ptr
    %85 = llvm.getelementptr %84[0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<64 x f32>
    %86 = llvm.mlir.constant(3735928559 : index) : i64
    %87 = llvm.inttoptr %86 : i64 to !llvm.ptr
    %88 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %89 = llvm.insertvalue %87, %88[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %90 = llvm.insertvalue %85, %89[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %91 = llvm.mlir.constant(0 : index) : i64
    %92 = llvm.insertvalue %91, %90[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %93 = llvm.insertvalue %79, %92[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %94 = llvm.insertvalue %80, %93[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %95 = builtin.unrealized_conversion_cast %94 : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> to memref<64xf32>
    %96 = llvm.mlir.constant(64 : index) : i64
    %97 = llvm.mlir.constant(1 : index) : i64
    %98 = llvm.mlir.null : !llvm.ptr
    %99 = llvm.getelementptr %98[%96] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %100 = llvm.ptrtoint %99 : !llvm.ptr to i64
    %101 = llvm.mlir.addressof @__constant_64xf32_2 : !llvm.ptr
    %102 = llvm.getelementptr %101[0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<64 x f32>
    %103 = llvm.mlir.constant(3735928559 : index) : i64
    %104 = llvm.inttoptr %103 : i64 to !llvm.ptr
    %105 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %106 = llvm.insertvalue %104, %105[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %107 = llvm.insertvalue %102, %106[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %108 = llvm.mlir.constant(0 : index) : i64
    %109 = llvm.insertvalue %108, %107[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %110 = llvm.insertvalue %96, %109[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %111 = llvm.insertvalue %97, %110[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %112 = builtin.unrealized_conversion_cast %111 : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> to memref<64xf32>
    %113 = llvm.mlir.constant(1 : index) : i64
    %114 = llvm.mlir.constant(3 : index) : i64
    %115 = llvm.mlir.constant(230 : index) : i64
    %116 = llvm.mlir.constant(230 : index) : i64
    %117 = llvm.mlir.constant(1 : index) : i64
    %118 = llvm.mlir.constant(52900 : index) : i64
    %119 = llvm.mlir.constant(158700 : index) : i64
    %120 = llvm.mlir.constant(158700 : index) : i64
    %121 = llvm.mlir.null : !llvm.ptr
    %122 = llvm.getelementptr %121[%120] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %123 = llvm.ptrtoint %122 : !llvm.ptr to i64
    %124 = llvm.mlir.constant(64 : index) : i64
    %125 = llvm.add %123, %124  : i64
    %126 = llvm.call @malloc(%125) : (i64) -> !llvm.ptr
    %127 = llvm.ptrtoint %126 : !llvm.ptr to i64
    %128 = llvm.mlir.constant(1 : index) : i64
    %129 = llvm.sub %124, %128  : i64
    %130 = llvm.add %127, %129  : i64
    %131 = llvm.urem %130, %124  : i64
    %132 = llvm.sub %130, %131  : i64
    %133 = llvm.inttoptr %132 : i64 to !llvm.ptr
    %134 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %135 = llvm.insertvalue %126, %134[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %136 = llvm.insertvalue %133, %135[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %137 = llvm.mlir.constant(0 : index) : i64
    %138 = llvm.insertvalue %137, %136[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %139 = llvm.insertvalue %113, %138[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %140 = llvm.insertvalue %114, %139[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %141 = llvm.insertvalue %115, %140[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %142 = llvm.insertvalue %116, %141[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %143 = llvm.insertvalue %119, %142[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %144 = llvm.insertvalue %118, %143[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %145 = llvm.insertvalue %116, %144[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %146 = llvm.insertvalue %117, %145[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %147 = builtin.unrealized_conversion_cast %146 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> to memref<1x3x230x230xf32>
    cf.br ^bb1(%15 : index)
  ^bb1(%148: index):  // 2 preds: ^bb0, ^bb8
    %149 = builtin.unrealized_conversion_cast %148 : index to i64
    %150 = llvm.icmp "slt" %149, %13 : i64
    cf.cond_br %150, ^bb2, ^bb9
  ^bb2:  // pred: ^bb1
    cf.br ^bb3(%15 : index)
  ^bb3(%151: index):  // 2 preds: ^bb2, ^bb7
    %152 = builtin.unrealized_conversion_cast %151 : index to i64
    %153 = llvm.icmp "slt" %152, %12 : i64
    cf.cond_br %153, ^bb4, ^bb8
  ^bb4:  // pred: ^bb3
    cf.br ^bb5(%15 : index)
  ^bb5(%154: index):  // 2 preds: ^bb4, ^bb6
    %155 = builtin.unrealized_conversion_cast %154 : index to i64
    %156 = llvm.icmp "slt" %155, %11 : i64
    cf.cond_br %156, ^bb6, ^bb7
  ^bb6:  // pred: ^bb5
    %157 = FDRA.BlockLoad %147 [0, %151, %154, 0] : memref<1x3x230x230xf32> -> memref<1x3x230x230xf32> {"forward_kernel_0"}
    FDRA.KernelCall @forward_kernel_0(%157) : (memref<1x3x230x230xf32>) -> ()
    FDRA.BlockStore %157,  %147 [0, %151, %154, 0] : memref<1x3x230x230xf32> -> memref<1x3x230x230xf32> {"forward_kernel_0"}
    %158 = llvm.add %155, %10  : i64
    %159 = builtin.unrealized_conversion_cast %158 : i64 to index
    cf.br ^bb5(%159 : index)
  ^bb7:  // pred: ^bb5
    %160 = llvm.add %152, %13  : i64
    %161 = builtin.unrealized_conversion_cast %160 : i64 to index
    cf.br ^bb3(%161 : index)
  ^bb8:  // pred: ^bb3
    %162 = llvm.add %149, %13  : i64
    %163 = builtin.unrealized_conversion_cast %162 : i64 to index
    cf.br ^bb1(%163 : index)
  ^bb9:  // pred: ^bb1
    %164 = llvm.mlir.constant(1 : index) : i64
    %165 = llvm.mlir.constant(3 : index) : i64
    %166 = llvm.mlir.constant(230 : index) : i64
    %167 = llvm.mlir.constant(230 : index) : i64
    %168 = llvm.mlir.constant(1 : index) : i64
    %169 = llvm.mlir.constant(52900 : index) : i64
    %170 = llvm.mlir.constant(158700 : index) : i64
    %171 = llvm.mlir.constant(158700 : index) : i64
    %172 = llvm.mlir.null : !llvm.ptr
    %173 = llvm.getelementptr %172[%171] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %174 = llvm.ptrtoint %173 : !llvm.ptr to i64
    %175 = llvm.mlir.constant(64 : index) : i64
    %176 = llvm.add %174, %175  : i64
    %177 = llvm.call @malloc(%176) : (i64) -> !llvm.ptr
    %178 = llvm.ptrtoint %177 : !llvm.ptr to i64
    %179 = llvm.mlir.constant(1 : index) : i64
    %180 = llvm.sub %175, %179  : i64
    %181 = llvm.add %178, %180  : i64
    %182 = llvm.urem %181, %175  : i64
    %183 = llvm.sub %181, %182  : i64
    %184 = llvm.inttoptr %183 : i64 to !llvm.ptr
    %185 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %186 = llvm.insertvalue %177, %185[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %187 = llvm.insertvalue %184, %186[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %188 = llvm.mlir.constant(0 : index) : i64
    %189 = llvm.insertvalue %188, %187[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %190 = llvm.insertvalue %164, %189[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %191 = llvm.insertvalue %165, %190[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %192 = llvm.insertvalue %166, %191[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %193 = llvm.insertvalue %167, %192[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %194 = llvm.insertvalue %170, %193[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %195 = llvm.insertvalue %169, %194[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %196 = llvm.insertvalue %167, %195[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %197 = llvm.insertvalue %168, %196[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %198 = builtin.unrealized_conversion_cast %197 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> to memref<1x3x230x230xf32>
    %199 = llvm.mlir.constant(1 : index) : i64
    %200 = llvm.extractvalue %146[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %201 = llvm.mul %199, %200  : i64
    %202 = llvm.extractvalue %146[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %203 = llvm.mul %201, %202  : i64
    %204 = llvm.extractvalue %146[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %205 = llvm.mul %203, %204  : i64
    %206 = llvm.extractvalue %146[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %207 = llvm.mul %205, %206  : i64
    %208 = llvm.mlir.null : !llvm.ptr
    %209 = llvm.getelementptr %208[1] : (!llvm.ptr) -> !llvm.ptr, f32
    %210 = llvm.ptrtoint %209 : !llvm.ptr to i64
    %211 = llvm.mul %207, %210  : i64
    %212 = llvm.extractvalue %146[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %213 = llvm.extractvalue %146[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %214 = llvm.getelementptr %212[%213] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %215 = llvm.extractvalue %197[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %216 = llvm.extractvalue %197[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %217 = llvm.getelementptr %215[%216] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    "llvm.intr.memcpy"(%217, %214, %211) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> ()
    %218 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %219 = llvm.extractvalue %197[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %220 = llvm.extractvalue %197[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %221 = llvm.insertvalue %219, %218[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %222 = llvm.insertvalue %220, %221[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %223 = llvm.mlir.constant(693 : index) : i64
    %224 = llvm.insertvalue %223, %222[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %225 = llvm.mlir.constant(1 : index) : i64
    %226 = llvm.insertvalue %225, %224[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %227 = llvm.mlir.constant(158700 : index) : i64
    %228 = llvm.insertvalue %227, %226[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %229 = llvm.mlir.constant(3 : index) : i64
    %230 = llvm.insertvalue %229, %228[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %231 = llvm.mlir.constant(52900 : index) : i64
    %232 = llvm.insertvalue %231, %230[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %233 = llvm.mlir.constant(224 : index) : i64
    %234 = llvm.insertvalue %233, %232[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %235 = llvm.mlir.constant(230 : index) : i64
    %236 = llvm.insertvalue %235, %234[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %237 = llvm.mlir.constant(224 : index) : i64
    %238 = llvm.insertvalue %237, %236[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %239 = llvm.mlir.constant(1 : index) : i64
    %240 = llvm.insertvalue %239, %238[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %241 = llvm.intr.stacksave : !llvm.ptr
    %242 = llvm.mlir.constant(4 : i64) : i64
    %243 = llvm.mlir.constant(1 : index) : i64
    %244 = llvm.alloca %243 x !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> : (i64) -> !llvm.ptr
    llvm.store %0, %244 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>, !llvm.ptr
    %245 = llvm.mlir.undef : !llvm.struct<(i64, ptr)>
    %246 = llvm.insertvalue %242, %245[0] : !llvm.struct<(i64, ptr)> 
    %247 = llvm.insertvalue %244, %246[1] : !llvm.struct<(i64, ptr)> 
    %248 = llvm.mlir.constant(4 : i64) : i64
    %249 = llvm.mlir.constant(1 : index) : i64
    %250 = llvm.alloca %249 x !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> : (i64) -> !llvm.ptr
    llvm.store %240, %250 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>, !llvm.ptr
    %251 = llvm.mlir.undef : !llvm.struct<(i64, ptr)>
    %252 = llvm.insertvalue %248, %251[0] : !llvm.struct<(i64, ptr)> 
    %253 = llvm.insertvalue %250, %252[1] : !llvm.struct<(i64, ptr)> 
    %254 = llvm.mlir.constant(1 : index) : i64
    %255 = llvm.alloca %254 x !llvm.struct<(i64, ptr)> : (i64) -> !llvm.ptr
    llvm.store %247, %255 : !llvm.struct<(i64, ptr)>, !llvm.ptr
    %256 = llvm.alloca %254 x !llvm.struct<(i64, ptr)> : (i64) -> !llvm.ptr
    llvm.store %253, %256 : !llvm.struct<(i64, ptr)>, !llvm.ptr
    %257 = llvm.mlir.constant(4 : index) : i64
    llvm.call @memrefCopy(%257, %255, %256) : (i64, !llvm.ptr, !llvm.ptr) -> ()
    llvm.intr.stackrestore %241 : !llvm.ptr
    %258 = llvm.mlir.constant(1 : index) : i64
    %259 = llvm.mlir.constant(64 : index) : i64
    %260 = llvm.mlir.constant(112 : index) : i64
    %261 = llvm.mlir.constant(112 : index) : i64
    %262 = llvm.mlir.constant(1 : index) : i64
    %263 = llvm.mlir.constant(12544 : index) : i64
    %264 = llvm.mlir.constant(802816 : index) : i64
    %265 = llvm.mlir.constant(802816 : index) : i64
    %266 = llvm.mlir.null : !llvm.ptr
    %267 = llvm.getelementptr %266[%265] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %268 = llvm.ptrtoint %267 : !llvm.ptr to i64
    %269 = llvm.mlir.constant(64 : index) : i64
    %270 = llvm.add %268, %269  : i64
    %271 = llvm.call @malloc(%270) : (i64) -> !llvm.ptr
    %272 = llvm.ptrtoint %271 : !llvm.ptr to i64
    %273 = llvm.mlir.constant(1 : index) : i64
    %274 = llvm.sub %269, %273  : i64
    %275 = llvm.add %272, %274  : i64
    %276 = llvm.urem %275, %269  : i64
    %277 = llvm.sub %275, %276  : i64
    %278 = llvm.inttoptr %277 : i64 to !llvm.ptr
    %279 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %280 = llvm.insertvalue %271, %279[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %281 = llvm.insertvalue %278, %280[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %282 = llvm.mlir.constant(0 : index) : i64
    %283 = llvm.insertvalue %282, %281[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %284 = llvm.insertvalue %258, %283[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %285 = llvm.insertvalue %259, %284[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %286 = llvm.insertvalue %260, %285[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %287 = llvm.insertvalue %261, %286[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %288 = llvm.insertvalue %264, %287[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %289 = llvm.insertvalue %263, %288[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %290 = llvm.insertvalue %261, %289[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %291 = llvm.insertvalue %262, %290[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %292 = builtin.unrealized_conversion_cast %291 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> to memref<1x64x112x112xf32>
    cf.br ^bb10(%15 : index)
  ^bb10(%293: index):  // 2 preds: ^bb9, ^bb17
    %294 = builtin.unrealized_conversion_cast %293 : index to i64
    %295 = llvm.icmp "slt" %294, %13 : i64
    cf.cond_br %295, ^bb11, ^bb18
  ^bb11:  // pred: ^bb10
    cf.br ^bb12(%15 : index)
  ^bb12(%296: index):  // 2 preds: ^bb11, ^bb16
    %297 = builtin.unrealized_conversion_cast %296 : index to i64
    %298 = llvm.icmp "slt" %297, %9 : i64
    cf.cond_br %298, ^bb13, ^bb17
  ^bb13:  // pred: ^bb12
    cf.br ^bb14(%15 : index)
  ^bb14(%299: index):  // 2 preds: ^bb13, ^bb15
    %300 = builtin.unrealized_conversion_cast %299 : index to i64
    %301 = llvm.icmp "slt" %300, %8 : i64
    cf.cond_br %301, ^bb15, ^bb16
  ^bb15:  // pred: ^bb14
    %302 = FDRA.BlockLoad %292 [0, %296, %299, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_1"}
    FDRA.KernelCall @forward_kernel_1(%302) : (memref<1x64x112x112xf32>) -> ()
    FDRA.BlockStore %302,  %292 [0, %296, %299, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_1"}
    %303 = llvm.add %300, %7  : i64
    %304 = builtin.unrealized_conversion_cast %303 : i64 to index
    cf.br ^bb14(%304 : index)
  ^bb16:  // pred: ^bb14
    %305 = llvm.add %297, %13  : i64
    %306 = builtin.unrealized_conversion_cast %305 : i64 to index
    cf.br ^bb12(%306 : index)
  ^bb17:  // pred: ^bb12
    %307 = llvm.add %294, %13  : i64
    %308 = builtin.unrealized_conversion_cast %307 : i64 to index
    cf.br ^bb10(%308 : index)
  ^bb18:  // pred: ^bb10
    %309 = llvm.mlir.constant(1 : index) : i64
    %310 = llvm.mlir.constant(64 : index) : i64
    %311 = llvm.mlir.constant(112 : index) : i64
    %312 = llvm.mlir.constant(112 : index) : i64
    %313 = llvm.mlir.constant(1 : index) : i64
    %314 = llvm.mlir.constant(12544 : index) : i64
    %315 = llvm.mlir.constant(802816 : index) : i64
    %316 = llvm.mlir.constant(802816 : index) : i64
    %317 = llvm.mlir.null : !llvm.ptr
    %318 = llvm.getelementptr %317[%316] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %319 = llvm.ptrtoint %318 : !llvm.ptr to i64
    %320 = llvm.mlir.constant(64 : index) : i64
    %321 = llvm.add %319, %320  : i64
    %322 = llvm.call @malloc(%321) : (i64) -> !llvm.ptr
    %323 = llvm.ptrtoint %322 : !llvm.ptr to i64
    %324 = llvm.mlir.constant(1 : index) : i64
    %325 = llvm.sub %320, %324  : i64
    %326 = llvm.add %323, %325  : i64
    %327 = llvm.urem %326, %320  : i64
    %328 = llvm.sub %326, %327  : i64
    %329 = llvm.inttoptr %328 : i64 to !llvm.ptr
    %330 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %331 = llvm.insertvalue %322, %330[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %332 = llvm.insertvalue %329, %331[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %333 = llvm.mlir.constant(0 : index) : i64
    %334 = llvm.insertvalue %333, %332[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %335 = llvm.insertvalue %309, %334[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %336 = llvm.insertvalue %310, %335[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %337 = llvm.insertvalue %311, %336[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %338 = llvm.insertvalue %312, %337[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %339 = llvm.insertvalue %315, %338[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %340 = llvm.insertvalue %314, %339[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %341 = llvm.insertvalue %312, %340[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %342 = llvm.insertvalue %313, %341[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %343 = builtin.unrealized_conversion_cast %342 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> to memref<1x64x112x112xf32>
    %344 = llvm.mlir.constant(1 : index) : i64
    %345 = llvm.extractvalue %291[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %346 = llvm.mul %344, %345  : i64
    %347 = llvm.extractvalue %291[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %348 = llvm.mul %346, %347  : i64
    %349 = llvm.extractvalue %291[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %350 = llvm.mul %348, %349  : i64
    %351 = llvm.extractvalue %291[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %352 = llvm.mul %350, %351  : i64
    %353 = llvm.mlir.null : !llvm.ptr
    %354 = llvm.getelementptr %353[1] : (!llvm.ptr) -> !llvm.ptr, f32
    %355 = llvm.ptrtoint %354 : !llvm.ptr to i64
    %356 = llvm.mul %352, %355  : i64
    %357 = llvm.extractvalue %291[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %358 = llvm.extractvalue %291[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %359 = llvm.getelementptr %357[%358] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %360 = llvm.extractvalue %342[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %361 = llvm.extractvalue %342[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %362 = llvm.getelementptr %360[%361] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    "llvm.intr.memcpy"(%362, %359, %356) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> ()
    cf.br ^bb19(%15 : index)
  ^bb19(%363: index):  // 2 preds: ^bb18, ^bb29
    %364 = builtin.unrealized_conversion_cast %363 : index to i64
    %365 = llvm.icmp "slt" %364, %13 : i64
    cf.cond_br %365, ^bb20, ^bb30
  ^bb20:  // pred: ^bb19
    cf.br ^bb21(%15 : index)
  ^bb21(%366: index):  // 2 preds: ^bb20, ^bb28
    %367 = builtin.unrealized_conversion_cast %366 : index to i64
    %368 = llvm.icmp "slt" %367, %9 : i64
    cf.cond_br %368, ^bb22, ^bb29
  ^bb22:  // pred: ^bb21
    cf.br ^bb23(%15 : index)
  ^bb23(%369: index):  // 2 preds: ^bb22, ^bb27
    %370 = builtin.unrealized_conversion_cast %369 : index to i64
    %371 = llvm.icmp "slt" %370, %8 : i64
    cf.cond_br %371, ^bb24, ^bb28
  ^bb24:  // pred: ^bb23
    cf.br ^bb25(%15 : index)
  ^bb25(%372: index):  // 2 preds: ^bb24, ^bb26
    %373 = builtin.unrealized_conversion_cast %372 : index to i64
    %374 = llvm.icmp "slt" %373, %8 : i64
    cf.cond_br %374, ^bb26, ^bb27
  ^bb26:  // pred: ^bb25
    %375 = FDRA.BlockLoad %198 [0, 0, %369 * 2, %372 * 2] : memref<1x3x230x230xf32> -> memref<1x3x230x230xf32> {"forward_kernel_2"}
    %376 = FDRA.BlockLoad %44 [%366, 0, 0, 0] : memref<64x3x7x7xf32> -> memref<64x3x7x7xf32> {"forward_kernel_2"}
    %377 = FDRA.BlockLoad %343 [0, %366, %369, %372] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_2"}
    %378 = FDRA.BlockLoad %343 [0, %366, %369, %372] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_2"}
    FDRA.KernelCall @forward_kernel_2(%375, %376, %377, %378) : (memref<1x3x230x230xf32>, memref<64x3x7x7xf32>, memref<1x64x112x112xf32>, memref<1x64x112x112xf32>) -> ()
    FDRA.BlockStore %378,  %343 [0, %366, %369, %372] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_2"}
    %379 = llvm.add %373, %6  : i64
    %380 = builtin.unrealized_conversion_cast %379 : i64 to index
    cf.br ^bb25(%380 : index)
  ^bb27:  // pred: ^bb25
    %381 = llvm.add %370, %13  : i64
    %382 = builtin.unrealized_conversion_cast %381 : i64 to index
    cf.br ^bb23(%382 : index)
  ^bb28:  // pred: ^bb23
    %383 = llvm.add %367, %13  : i64
    %384 = builtin.unrealized_conversion_cast %383 : i64 to index
    cf.br ^bb21(%384 : index)
  ^bb29:  // pred: ^bb21
    %385 = llvm.add %364, %13  : i64
    %386 = builtin.unrealized_conversion_cast %385 : i64 to index
    cf.br ^bb19(%386 : index)
  ^bb30:  // pred: ^bb19
    %387 = llvm.mlir.constant(1 : index) : i64
    %388 = llvm.mlir.constant(64 : index) : i64
    %389 = llvm.mlir.constant(112 : index) : i64
    %390 = llvm.mlir.constant(112 : index) : i64
    %391 = llvm.mlir.constant(1 : index) : i64
    %392 = llvm.mlir.constant(12544 : index) : i64
    %393 = llvm.mlir.constant(802816 : index) : i64
    %394 = llvm.mlir.constant(802816 : index) : i64
    %395 = llvm.mlir.null : !llvm.ptr
    %396 = llvm.getelementptr %395[%394] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %397 = llvm.ptrtoint %396 : !llvm.ptr to i64
    %398 = llvm.mlir.constant(64 : index) : i64
    %399 = llvm.add %397, %398  : i64
    %400 = llvm.call @malloc(%399) : (i64) -> !llvm.ptr
    %401 = llvm.ptrtoint %400 : !llvm.ptr to i64
    %402 = llvm.mlir.constant(1 : index) : i64
    %403 = llvm.sub %398, %402  : i64
    %404 = llvm.add %401, %403  : i64
    %405 = llvm.urem %404, %398  : i64
    %406 = llvm.sub %404, %405  : i64
    %407 = llvm.inttoptr %406 : i64 to !llvm.ptr
    %408 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %409 = llvm.insertvalue %400, %408[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %410 = llvm.insertvalue %407, %409[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %411 = llvm.mlir.constant(0 : index) : i64
    %412 = llvm.insertvalue %411, %410[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %413 = llvm.insertvalue %387, %412[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %414 = llvm.insertvalue %388, %413[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %415 = llvm.insertvalue %389, %414[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %416 = llvm.insertvalue %390, %415[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %417 = llvm.insertvalue %393, %416[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %418 = llvm.insertvalue %392, %417[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %419 = llvm.insertvalue %390, %418[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %420 = llvm.insertvalue %391, %419[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %421 = builtin.unrealized_conversion_cast %420 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> to memref<1x64x112x112xf32>
    cf.br ^bb31(%15 : index)
  ^bb31(%422: index):  // 2 preds: ^bb30, ^bb38
    %423 = builtin.unrealized_conversion_cast %422 : index to i64
    %424 = llvm.icmp "slt" %423, %13 : i64
    cf.cond_br %424, ^bb32, ^bb39
  ^bb32:  // pred: ^bb31
    cf.br ^bb33(%15 : index)
  ^bb33(%425: index):  // 2 preds: ^bb32, ^bb37
    %426 = builtin.unrealized_conversion_cast %425 : index to i64
    %427 = llvm.icmp "slt" %426, %9 : i64
    cf.cond_br %427, ^bb34, ^bb38
  ^bb34:  // pred: ^bb33
    cf.br ^bb35(%15 : index)
  ^bb35(%428: index):  // 2 preds: ^bb34, ^bb36
    %429 = builtin.unrealized_conversion_cast %428 : index to i64
    %430 = llvm.icmp "slt" %429, %8 : i64
    cf.cond_br %430, ^bb36, ^bb37
  ^bb36:  // pred: ^bb35
    %431 = FDRA.BlockLoad %343 [0, %425, %428, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_3"}
    %432 = FDRA.BlockLoad %95 [%425] : memref<64xf32> -> memref<64xf32> {"forward_kernel_3"}
    %433 = FDRA.BlockLoad %112 [%425] : memref<64xf32> -> memref<64xf32> {"forward_kernel_3"}
    %434 = FDRA.BlockLoad %61 [%425] : memref<64xf32> -> memref<64xf32> {"forward_kernel_3"}
    %435 = FDRA.BlockLoad %78 [%425] : memref<64xf32> -> memref<64xf32> {"forward_kernel_3"}
    %436 = FDRA.BlockLoad %421 [0, %425, %428, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_3"}
    FDRA.KernelCall @forward_kernel_3(%431, %432, %433, %434, %435, %436) : (memref<1x64x112x112xf32>, memref<64xf32>, memref<64xf32>, memref<64xf32>, memref<64xf32>, memref<1x64x112x112xf32>) -> ()
    FDRA.BlockStore %436,  %421 [0, %425, %428, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_3"}
    %437 = llvm.add %429, %7  : i64
    %438 = builtin.unrealized_conversion_cast %437 : i64 to index
    cf.br ^bb35(%438 : index)
  ^bb37:  // pred: ^bb35
    %439 = llvm.add %426, %13  : i64
    %440 = builtin.unrealized_conversion_cast %439 : i64 to index
    cf.br ^bb33(%440 : index)
  ^bb38:  // pred: ^bb33
    %441 = llvm.add %423, %13  : i64
    %442 = builtin.unrealized_conversion_cast %441 : i64 to index
    cf.br ^bb31(%442 : index)
  ^bb39:  // pred: ^bb31
    %443 = llvm.mlir.constant(1 : index) : i64
    %444 = llvm.mlir.constant(64 : index) : i64
    %445 = llvm.mlir.constant(112 : index) : i64
    %446 = llvm.mlir.constant(112 : index) : i64
    %447 = llvm.mlir.constant(1 : index) : i64
    %448 = llvm.mlir.constant(12544 : index) : i64
    %449 = llvm.mlir.constant(802816 : index) : i64
    %450 = llvm.mlir.constant(802816 : index) : i64
    %451 = llvm.mlir.null : !llvm.ptr
    %452 = llvm.getelementptr %451[%450] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %453 = llvm.ptrtoint %452 : !llvm.ptr to i64
    %454 = llvm.mlir.constant(64 : index) : i64
    %455 = llvm.add %453, %454  : i64
    %456 = llvm.call @malloc(%455) : (i64) -> !llvm.ptr
    %457 = llvm.ptrtoint %456 : !llvm.ptr to i64
    %458 = llvm.mlir.constant(1 : index) : i64
    %459 = llvm.sub %454, %458  : i64
    %460 = llvm.add %457, %459  : i64
    %461 = llvm.urem %460, %454  : i64
    %462 = llvm.sub %460, %461  : i64
    %463 = llvm.inttoptr %462 : i64 to !llvm.ptr
    %464 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %465 = llvm.insertvalue %456, %464[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %466 = llvm.insertvalue %463, %465[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %467 = llvm.mlir.constant(0 : index) : i64
    %468 = llvm.insertvalue %467, %466[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %469 = llvm.insertvalue %443, %468[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %470 = llvm.insertvalue %444, %469[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %471 = llvm.insertvalue %445, %470[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %472 = llvm.insertvalue %446, %471[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %473 = llvm.insertvalue %449, %472[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %474 = llvm.insertvalue %448, %473[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %475 = llvm.insertvalue %446, %474[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %476 = llvm.insertvalue %447, %475[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %477 = builtin.unrealized_conversion_cast %476 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> to memref<1x64x112x112xf32>
    cf.br ^bb40(%15 : index)
  ^bb40(%478: index):  // 2 preds: ^bb39, ^bb47
    %479 = builtin.unrealized_conversion_cast %478 : index to i64
    %480 = llvm.icmp "slt" %479, %13 : i64
    cf.cond_br %480, ^bb41, ^bb48
  ^bb41:  // pred: ^bb40
    cf.br ^bb42(%15 : index)
  ^bb42(%481: index):  // 2 preds: ^bb41, ^bb46
    %482 = builtin.unrealized_conversion_cast %481 : index to i64
    %483 = llvm.icmp "slt" %482, %9 : i64
    cf.cond_br %483, ^bb43, ^bb47
  ^bb43:  // pred: ^bb42
    cf.br ^bb44(%15 : index)
  ^bb44(%484: index):  // 2 preds: ^bb43, ^bb45
    %485 = builtin.unrealized_conversion_cast %484 : index to i64
    %486 = llvm.icmp "slt" %485, %8 : i64
    cf.cond_br %486, ^bb45, ^bb46
  ^bb45:  // pred: ^bb44
    %487 = FDRA.BlockLoad %421 [0, %481, %484, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_4"}
    %488 = FDRA.BlockLoad %477 [0, %481, %484, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_4"}
    FDRA.KernelCall @forward_kernel_4(%487, %488) : (memref<1x64x112x112xf32>, memref<1x64x112x112xf32>) -> ()
    FDRA.BlockStore %488,  %477 [0, %481, %484, 0] : memref<1x64x112x112xf32> -> memref<1x64x112x112xf32> {"forward_kernel_4"}
    %489 = llvm.add %485, %7  : i64
    %490 = builtin.unrealized_conversion_cast %489 : i64 to index
    cf.br ^bb44(%490 : index)
  ^bb46:  // pred: ^bb44
    %491 = llvm.add %482, %13  : i64
    %492 = builtin.unrealized_conversion_cast %491 : i64 to index
    cf.br ^bb42(%492 : index)
  ^bb47:  // pred: ^bb42
    %493 = llvm.add %479, %13  : i64
    %494 = builtin.unrealized_conversion_cast %493 : i64 to index
    cf.br ^bb40(%494 : index)
  ^bb48:  // pred: ^bb40
    %495 = llvm.mlir.constant(1 : index) : i64
    %496 = llvm.mlir.constant(64 : index) : i64
    %497 = llvm.mlir.constant(114 : index) : i64
    %498 = llvm.mlir.constant(114 : index) : i64
    %499 = llvm.mlir.constant(1 : index) : i64
    %500 = llvm.mlir.constant(12996 : index) : i64
    %501 = llvm.mlir.constant(831744 : index) : i64
    %502 = llvm.mlir.constant(831744 : index) : i64
    %503 = llvm.mlir.null : !llvm.ptr
    %504 = llvm.getelementptr %503[%502] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %505 = llvm.ptrtoint %504 : !llvm.ptr to i64
    %506 = llvm.mlir.constant(64 : index) : i64
    %507 = llvm.add %505, %506  : i64
    %508 = llvm.call @malloc(%507) : (i64) -> !llvm.ptr
    %509 = llvm.ptrtoint %508 : !llvm.ptr to i64
    %510 = llvm.mlir.constant(1 : index) : i64
    %511 = llvm.sub %506, %510  : i64
    %512 = llvm.add %509, %511  : i64
    %513 = llvm.urem %512, %506  : i64
    %514 = llvm.sub %512, %513  : i64
    %515 = llvm.inttoptr %514 : i64 to !llvm.ptr
    %516 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %517 = llvm.insertvalue %508, %516[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %518 = llvm.insertvalue %515, %517[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %519 = llvm.mlir.constant(0 : index) : i64
    %520 = llvm.insertvalue %519, %518[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %521 = llvm.insertvalue %495, %520[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %522 = llvm.insertvalue %496, %521[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %523 = llvm.insertvalue %497, %522[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %524 = llvm.insertvalue %498, %523[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %525 = llvm.insertvalue %501, %524[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %526 = llvm.insertvalue %500, %525[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %527 = llvm.insertvalue %498, %526[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %528 = llvm.insertvalue %499, %527[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %529 = builtin.unrealized_conversion_cast %528 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> to memref<1x64x114x114xf32>
    cf.br ^bb49(%15 : index)
  ^bb49(%530: index):  // 2 preds: ^bb48, ^bb56
    %531 = builtin.unrealized_conversion_cast %530 : index to i64
    %532 = llvm.icmp "slt" %531, %13 : i64
    cf.cond_br %532, ^bb50, ^bb57
  ^bb50:  // pred: ^bb49
    cf.br ^bb51(%15 : index)
  ^bb51(%533: index):  // 2 preds: ^bb50, ^bb55
    %534 = builtin.unrealized_conversion_cast %533 : index to i64
    %535 = llvm.icmp "slt" %534, %9 : i64
    cf.cond_br %535, ^bb52, ^bb56
  ^bb52:  // pred: ^bb51
    cf.br ^bb53(%15 : index)
  ^bb53(%536: index):  // 2 preds: ^bb52, ^bb54
    %537 = builtin.unrealized_conversion_cast %536 : index to i64
    %538 = llvm.icmp "slt" %537, %5 : i64
    cf.cond_br %538, ^bb54, ^bb55
  ^bb54:  // pred: ^bb53
    %539 = FDRA.BlockLoad %529 [0, %533, %536, 0] : memref<1x64x114x114xf32> -> memref<1x64x114x114xf32> {"forward_kernel_5"}
    FDRA.KernelCall @forward_kernel_5(%539) : (memref<1x64x114x114xf32>) -> ()
    FDRA.BlockStore %539,  %529 [0, %533, %536, 0] : memref<1x64x114x114xf32> -> memref<1x64x114x114xf32> {"forward_kernel_5"}
    %540 = llvm.add %537, %4  : i64
    %541 = builtin.unrealized_conversion_cast %540 : i64 to index
    cf.br ^bb53(%541 : index)
  ^bb55:  // pred: ^bb53
    %542 = llvm.add %534, %13  : i64
    %543 = builtin.unrealized_conversion_cast %542 : i64 to index
    cf.br ^bb51(%543 : index)
  ^bb56:  // pred: ^bb51
    %544 = llvm.add %531, %13  : i64
    %545 = builtin.unrealized_conversion_cast %544 : i64 to index
    cf.br ^bb49(%545 : index)
  ^bb57:  // pred: ^bb49
    %546 = llvm.mlir.constant(1 : index) : i64
    %547 = llvm.mlir.constant(64 : index) : i64
    %548 = llvm.mlir.constant(114 : index) : i64
    %549 = llvm.mlir.constant(114 : index) : i64
    %550 = llvm.mlir.constant(1 : index) : i64
    %551 = llvm.mlir.constant(12996 : index) : i64
    %552 = llvm.mlir.constant(831744 : index) : i64
    %553 = llvm.mlir.constant(831744 : index) : i64
    %554 = llvm.mlir.null : !llvm.ptr
    %555 = llvm.getelementptr %554[%553] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %556 = llvm.ptrtoint %555 : !llvm.ptr to i64
    %557 = llvm.mlir.constant(64 : index) : i64
    %558 = llvm.add %556, %557  : i64
    %559 = llvm.call @malloc(%558) : (i64) -> !llvm.ptr
    %560 = llvm.ptrtoint %559 : !llvm.ptr to i64
    %561 = llvm.mlir.constant(1 : index) : i64
    %562 = llvm.sub %557, %561  : i64
    %563 = llvm.add %560, %562  : i64
    %564 = llvm.urem %563, %557  : i64
    %565 = llvm.sub %563, %564  : i64
    %566 = llvm.inttoptr %565 : i64 to !llvm.ptr
    %567 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %568 = llvm.insertvalue %559, %567[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %569 = llvm.insertvalue %566, %568[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %570 = llvm.mlir.constant(0 : index) : i64
    %571 = llvm.insertvalue %570, %569[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %572 = llvm.insertvalue %546, %571[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %573 = llvm.insertvalue %547, %572[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %574 = llvm.insertvalue %548, %573[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %575 = llvm.insertvalue %549, %574[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %576 = llvm.insertvalue %552, %575[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %577 = llvm.insertvalue %551, %576[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %578 = llvm.insertvalue %549, %577[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %579 = llvm.insertvalue %550, %578[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %580 = builtin.unrealized_conversion_cast %579 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> to memref<1x64x114x114xf32>
    %581 = llvm.mlir.constant(1 : index) : i64
    %582 = llvm.extractvalue %528[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %583 = llvm.mul %581, %582  : i64
    %584 = llvm.extractvalue %528[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %585 = llvm.mul %583, %584  : i64
    %586 = llvm.extractvalue %528[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %587 = llvm.mul %585, %586  : i64
    %588 = llvm.extractvalue %528[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %589 = llvm.mul %587, %588  : i64
    %590 = llvm.mlir.null : !llvm.ptr
    %591 = llvm.getelementptr %590[1] : (!llvm.ptr) -> !llvm.ptr, f32
    %592 = llvm.ptrtoint %591 : !llvm.ptr to i64
    %593 = llvm.mul %589, %592  : i64
    %594 = llvm.extractvalue %528[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %595 = llvm.extractvalue %528[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %596 = llvm.getelementptr %594[%595] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %597 = llvm.extractvalue %579[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %598 = llvm.extractvalue %579[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %599 = llvm.getelementptr %597[%598] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    "llvm.intr.memcpy"(%599, %596, %593) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> ()
    %600 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %601 = llvm.extractvalue %579[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %602 = llvm.extractvalue %579[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %603 = llvm.insertvalue %601, %600[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %604 = llvm.insertvalue %602, %603[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %605 = llvm.mlir.constant(115 : index) : i64
    %606 = llvm.insertvalue %605, %604[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %607 = llvm.mlir.constant(1 : index) : i64
    %608 = llvm.insertvalue %607, %606[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %609 = llvm.mlir.constant(831744 : index) : i64
    %610 = llvm.insertvalue %609, %608[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %611 = llvm.mlir.constant(64 : index) : i64
    %612 = llvm.insertvalue %611, %610[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %613 = llvm.mlir.constant(12996 : index) : i64
    %614 = llvm.insertvalue %613, %612[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %615 = llvm.mlir.constant(112 : index) : i64
    %616 = llvm.insertvalue %615, %614[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %617 = llvm.mlir.constant(114 : index) : i64
    %618 = llvm.insertvalue %617, %616[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %619 = llvm.mlir.constant(112 : index) : i64
    %620 = llvm.insertvalue %619, %618[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %621 = llvm.mlir.constant(1 : index) : i64
    %622 = llvm.insertvalue %621, %620[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %623 = llvm.intr.stacksave : !llvm.ptr
    %624 = llvm.mlir.constant(4 : i64) : i64
    %625 = llvm.mlir.constant(1 : index) : i64
    %626 = llvm.alloca %625 x !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> : (i64) -> !llvm.ptr
    llvm.store %476, %626 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>, !llvm.ptr
    %627 = llvm.mlir.undef : !llvm.struct<(i64, ptr)>
    %628 = llvm.insertvalue %624, %627[0] : !llvm.struct<(i64, ptr)> 
    %629 = llvm.insertvalue %626, %628[1] : !llvm.struct<(i64, ptr)> 
    %630 = llvm.mlir.constant(4 : i64) : i64
    %631 = llvm.mlir.constant(1 : index) : i64
    %632 = llvm.alloca %631 x !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> : (i64) -> !llvm.ptr
    llvm.store %622, %632 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>, !llvm.ptr
    %633 = llvm.mlir.undef : !llvm.struct<(i64, ptr)>
    %634 = llvm.insertvalue %630, %633[0] : !llvm.struct<(i64, ptr)> 
    %635 = llvm.insertvalue %632, %634[1] : !llvm.struct<(i64, ptr)> 
    %636 = llvm.mlir.constant(1 : index) : i64
    %637 = llvm.alloca %636 x !llvm.struct<(i64, ptr)> : (i64) -> !llvm.ptr
    llvm.store %629, %637 : !llvm.struct<(i64, ptr)>, !llvm.ptr
    %638 = llvm.alloca %636 x !llvm.struct<(i64, ptr)> : (i64) -> !llvm.ptr
    llvm.store %635, %638 : !llvm.struct<(i64, ptr)>, !llvm.ptr
    %639 = llvm.mlir.constant(4 : index) : i64
    llvm.call @memrefCopy(%639, %637, %638) : (i64, !llvm.ptr, !llvm.ptr) -> ()
    llvm.intr.stackrestore %623 : !llvm.ptr
    %640 = llvm.mlir.constant(1 : index) : i64
    %641 = llvm.mlir.constant(64 : index) : i64
    %642 = llvm.mlir.constant(56 : index) : i64
    %643 = llvm.mlir.constant(56 : index) : i64
    %644 = llvm.mlir.constant(1 : index) : i64
    %645 = llvm.mlir.constant(3136 : index) : i64
    %646 = llvm.mlir.constant(200704 : index) : i64
    %647 = llvm.mlir.constant(200704 : index) : i64
    %648 = llvm.mlir.null : !llvm.ptr
    %649 = llvm.getelementptr %648[%647] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %650 = llvm.ptrtoint %649 : !llvm.ptr to i64
    %651 = llvm.mlir.constant(64 : index) : i64
    %652 = llvm.add %650, %651  : i64
    %653 = llvm.call @malloc(%652) : (i64) -> !llvm.ptr
    %654 = llvm.ptrtoint %653 : !llvm.ptr to i64
    %655 = llvm.mlir.constant(1 : index) : i64
    %656 = llvm.sub %651, %655  : i64
    %657 = llvm.add %654, %656  : i64
    %658 = llvm.urem %657, %651  : i64
    %659 = llvm.sub %657, %658  : i64
    %660 = llvm.inttoptr %659 : i64 to !llvm.ptr
    %661 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %662 = llvm.insertvalue %653, %661[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %663 = llvm.insertvalue %660, %662[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %664 = llvm.mlir.constant(0 : index) : i64
    %665 = llvm.insertvalue %664, %663[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %666 = llvm.insertvalue %640, %665[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %667 = llvm.insertvalue %641, %666[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %668 = llvm.insertvalue %642, %667[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %669 = llvm.insertvalue %643, %668[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %670 = llvm.insertvalue %646, %669[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %671 = llvm.insertvalue %645, %670[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %672 = llvm.insertvalue %643, %671[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %673 = llvm.insertvalue %644, %672[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %674 = builtin.unrealized_conversion_cast %673 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> to memref<1x64x56x56xf32>
    cf.br ^bb58(%15 : index)
  ^bb58(%675: index):  // 2 preds: ^bb57, ^bb65
    %676 = builtin.unrealized_conversion_cast %675 : index to i64
    %677 = llvm.icmp "slt" %676, %13 : i64
    cf.cond_br %677, ^bb59, ^bb66
  ^bb59:  // pred: ^bb58
    cf.br ^bb60(%15 : index)
  ^bb60(%678: index):  // 2 preds: ^bb59, ^bb64
    %679 = builtin.unrealized_conversion_cast %678 : index to i64
    %680 = llvm.icmp "slt" %679, %9 : i64
    cf.cond_br %680, ^bb61, ^bb65
  ^bb61:  // pred: ^bb60
    cf.br ^bb62(%15 : index)
  ^bb62(%681: index):  // 2 preds: ^bb61, ^bb63
    %682 = builtin.unrealized_conversion_cast %681 : index to i64
    %683 = llvm.icmp "slt" %682, %3 : i64
    cf.cond_br %683, ^bb63, ^bb64
  ^bb63:  // pred: ^bb62
    %684 = FDRA.BlockLoad %674 [0, %678, %681, 0] : memref<1x64x56x56xf32> -> memref<1x64x56x56xf32> {"forward_kernel_6"}
    FDRA.KernelCall @forward_kernel_6(%684) : (memref<1x64x56x56xf32>) -> ()
    FDRA.BlockStore %684,  %674 [0, %678, %681, 0] : memref<1x64x56x56xf32> -> memref<1x64x56x56xf32> {"forward_kernel_6"}
    %685 = llvm.add %682, %2  : i64
    %686 = builtin.unrealized_conversion_cast %685 : i64 to index
    cf.br ^bb62(%686 : index)
  ^bb64:  // pred: ^bb62
    %687 = llvm.add %679, %13  : i64
    %688 = builtin.unrealized_conversion_cast %687 : i64 to index
    cf.br ^bb60(%688 : index)
  ^bb65:  // pred: ^bb60
    %689 = llvm.add %676, %13  : i64
    %690 = builtin.unrealized_conversion_cast %689 : i64 to index
    cf.br ^bb58(%690 : index)
  ^bb66:  // pred: ^bb58
    %691 = llvm.mlir.constant(1 : index) : i64
    %692 = llvm.mlir.constant(64 : index) : i64
    %693 = llvm.mlir.constant(56 : index) : i64
    %694 = llvm.mlir.constant(56 : index) : i64
    %695 = llvm.mlir.constant(1 : index) : i64
    %696 = llvm.mlir.constant(3136 : index) : i64
    %697 = llvm.mlir.constant(200704 : index) : i64
    %698 = llvm.mlir.constant(200704 : index) : i64
    %699 = llvm.mlir.null : !llvm.ptr
    %700 = llvm.getelementptr %699[%698] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %701 = llvm.ptrtoint %700 : !llvm.ptr to i64
    %702 = llvm.mlir.constant(64 : index) : i64
    %703 = llvm.add %701, %702  : i64
    %704 = llvm.call @malloc(%703) : (i64) -> !llvm.ptr
    %705 = llvm.ptrtoint %704 : !llvm.ptr to i64
    %706 = llvm.mlir.constant(1 : index) : i64
    %707 = llvm.sub %702, %706  : i64
    %708 = llvm.add %705, %707  : i64
    %709 = llvm.urem %708, %702  : i64
    %710 = llvm.sub %708, %709  : i64
    %711 = llvm.inttoptr %710 : i64 to !llvm.ptr
    %712 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %713 = llvm.insertvalue %704, %712[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %714 = llvm.insertvalue %711, %713[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %715 = llvm.mlir.constant(0 : index) : i64
    %716 = llvm.insertvalue %715, %714[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %717 = llvm.insertvalue %691, %716[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %718 = llvm.insertvalue %692, %717[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %719 = llvm.insertvalue %693, %718[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %720 = llvm.insertvalue %694, %719[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %721 = llvm.insertvalue %697, %720[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %722 = llvm.insertvalue %696, %721[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %723 = llvm.insertvalue %694, %722[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %724 = llvm.insertvalue %695, %723[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %725 = builtin.unrealized_conversion_cast %724 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> to memref<1x64x56x56xf32>
    %726 = llvm.mlir.constant(1 : index) : i64
    %727 = llvm.extractvalue %673[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %728 = llvm.mul %726, %727  : i64
    %729 = llvm.extractvalue %673[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %730 = llvm.mul %728, %729  : i64
    %731 = llvm.extractvalue %673[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %732 = llvm.mul %730, %731  : i64
    %733 = llvm.extractvalue %673[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %734 = llvm.mul %732, %733  : i64
    %735 = llvm.mlir.null : !llvm.ptr
    %736 = llvm.getelementptr %735[1] : (!llvm.ptr) -> !llvm.ptr, f32
    %737 = llvm.ptrtoint %736 : !llvm.ptr to i64
    %738 = llvm.mul %734, %737  : i64
    %739 = llvm.extractvalue %673[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %740 = llvm.extractvalue %673[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %741 = llvm.getelementptr %739[%740] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %742 = llvm.extractvalue %724[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %743 = llvm.extractvalue %724[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %744 = llvm.getelementptr %742[%743] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    "llvm.intr.memcpy"(%744, %741, %738) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> ()
    cf.br ^bb67(%15 : index)
  ^bb67(%745: index):  // 2 preds: ^bb66, ^bb74
    %746 = builtin.unrealized_conversion_cast %745 : index to i64
    %747 = llvm.icmp "slt" %746, %13 : i64
    cf.cond_br %747, ^bb68, ^bb75
  ^bb68:  // pred: ^bb67
    cf.br ^bb69(%15 : index)
  ^bb69(%748: index):  // 2 preds: ^bb68, ^bb73
    %749 = builtin.unrealized_conversion_cast %748 : index to i64
    %750 = llvm.icmp "slt" %749, %9 : i64
    cf.cond_br %750, ^bb70, ^bb74
  ^bb70:  // pred: ^bb69
    cf.br ^bb71(%15 : index)
  ^bb71(%751: index):  // 2 preds: ^bb70, ^bb72
    %752 = builtin.unrealized_conversion_cast %751 : index to i64
    %753 = llvm.icmp "slt" %752, %3 : i64
    cf.cond_br %753, ^bb72, ^bb73
  ^bb72:  // pred: ^bb71
    %754 = FDRA.BlockLoad %580 [0, %748, %751 * 2, 0] : memref<1x64x114x114xf32> -> memref<1x64x114x114xf32> {"forward_kernel_7"}
    %755 = FDRA.BlockLoad %725 [0, %748, %751, 0] : memref<1x64x56x56xf32> -> memref<1x64x56x56xf32> {"forward_kernel_7"}
    %756 = FDRA.BlockLoad %725 [0, %748, %751, 0] : memref<1x64x56x56xf32> -> memref<1x64x56x56xf32> {"forward_kernel_7"}
    FDRA.KernelCall @forward_kernel_7(%754, %755, %756) : (memref<1x64x114x114xf32>, memref<1x64x56x56xf32>, memref<1x64x56x56xf32>) -> ()
    FDRA.BlockStore %756,  %725 [0, %748, %751, 0] : memref<1x64x56x56xf32> -> memref<1x64x56x56xf32> {"forward_kernel_7"}
    %757 = llvm.add %752, %1  : i64
    %758 = builtin.unrealized_conversion_cast %757 : i64 to index
    cf.br ^bb71(%758 : index)
  ^bb73:  // pred: ^bb71
    %759 = llvm.add %749, %13  : i64
    %760 = builtin.unrealized_conversion_cast %759 : i64 to index
    cf.br ^bb69(%760 : index)
  ^bb74:  // pred: ^bb69
    %761 = llvm.add %746, %13  : i64
    %762 = builtin.unrealized_conversion_cast %761 : i64 to index
    cf.br ^bb67(%762 : index)
  ^bb75:  // pred: ^bb67
    return %725 : memref<1x64x56x56xf32>
  }
  func.func @forward_kernel_0(%arg0: memref<1x3x230x230xf32>) attributes {Kernel, forward_kernel_0} {
    %0 = builtin.unrealized_conversion_cast %arg0 : memref<1x3x230x230xf32> to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %1 = llvm.mlir.constant(230 : index) : i64
    %2 = llvm.mlir.constant(1 : index) : i64
    %3 = llvm.mlir.constant(5 : index) : i64
    %4 = llvm.mlir.constant(0 : index) : i64
    %5 = builtin.unrealized_conversion_cast %4 : i64 to index
    %6 = llvm.mlir.constant(0.000000e+00 : f32) : f32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2(%5 : index)
  ^bb2(%7: index):  // 2 preds: ^bb1, ^bb6
    %8 = builtin.unrealized_conversion_cast %7 : index to i64
    %9 = builtin.unrealized_conversion_cast %7 : index to i64
    %10 = llvm.icmp "slt" %9, %3 : i64
    cf.cond_br %10, ^bb3, ^bb7
  ^bb3:  // pred: ^bb2
    cf.br ^bb4(%5 : index)
  ^bb4(%11: index):  // 2 preds: ^bb3, ^bb5
    %12 = builtin.unrealized_conversion_cast %11 : index to i64
    %13 = builtin.unrealized_conversion_cast %11 : index to i64
    %14 = llvm.icmp "slt" %13, %1 : i64
    cf.cond_br %14, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    %15 = llvm.extractvalue %0[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %16 = llvm.mlir.constant(158700 : index) : i64
    %17 = llvm.mul %4, %16  : i64
    %18 = llvm.mlir.constant(52900 : index) : i64
    %19 = llvm.mul %4, %18  : i64
    %20 = llvm.add %17, %19  : i64
    %21 = llvm.mlir.constant(230 : index) : i64
    %22 = llvm.mul %8, %21  : i64
    %23 = llvm.add %20, %22  : i64
    %24 = llvm.add %23, %12  : i64
    %25 = llvm.getelementptr %15[%24] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    llvm.store %6, %25 : f32, !llvm.ptr
    %26 = llvm.add %13, %2  : i64
    %27 = builtin.unrealized_conversion_cast %26 : i64 to index
    cf.br ^bb4(%27 : index)
  ^bb6:  // pred: ^bb4
    %28 = llvm.add %9, %2  : i64
    %29 = builtin.unrealized_conversion_cast %28 : i64 to index
    cf.br ^bb2(%29 : index)
  ^bb7:  // pred: ^bb2
    return
  }
  func.func @forward_kernel_1(%arg0: memref<1x64x112x112xf32>) attributes {Kernel, forward_kernel_1} {
    %0 = builtin.unrealized_conversion_cast %arg0 : memref<1x64x112x112xf32> to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %1 = llvm.mlir.constant(112 : index) : i64
    %2 = llvm.mlir.constant(1 : index) : i64
    %3 = llvm.mlir.constant(16 : index) : i64
    %4 = llvm.mlir.constant(0 : index) : i64
    %5 = builtin.unrealized_conversion_cast %4 : i64 to index
    %6 = llvm.mlir.constant(0.000000e+00 : f32) : f32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2(%5 : index)
  ^bb2(%7: index):  // 2 preds: ^bb1, ^bb6
    %8 = builtin.unrealized_conversion_cast %7 : index to i64
    %9 = builtin.unrealized_conversion_cast %7 : index to i64
    %10 = llvm.icmp "slt" %9, %3 : i64
    cf.cond_br %10, ^bb3, ^bb7
  ^bb3:  // pred: ^bb2
    cf.br ^bb4(%5 : index)
  ^bb4(%11: index):  // 2 preds: ^bb3, ^bb5
    %12 = builtin.unrealized_conversion_cast %11 : index to i64
    %13 = builtin.unrealized_conversion_cast %11 : index to i64
    %14 = llvm.icmp "slt" %13, %1 : i64
    cf.cond_br %14, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    %15 = llvm.extractvalue %0[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %16 = llvm.mlir.constant(802816 : index) : i64
    %17 = llvm.mul %4, %16  : i64
    %18 = llvm.mlir.constant(12544 : index) : i64
    %19 = llvm.mul %4, %18  : i64
    %20 = llvm.add %17, %19  : i64
    %21 = llvm.mlir.constant(112 : index) : i64
    %22 = llvm.mul %8, %21  : i64
    %23 = llvm.add %20, %22  : i64
    %24 = llvm.add %23, %12  : i64
    %25 = llvm.getelementptr %15[%24] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    llvm.store %6, %25 : f32, !llvm.ptr
    %26 = llvm.add %13, %2  : i64
    %27 = builtin.unrealized_conversion_cast %26 : i64 to index
    cf.br ^bb4(%27 : index)
  ^bb6:  // pred: ^bb4
    %28 = llvm.add %9, %2  : i64
    %29 = builtin.unrealized_conversion_cast %28 : i64 to index
    cf.br ^bb2(%29 : index)
  ^bb7:  // pred: ^bb2
    return
  }
  func.func @forward_kernel_2(%arg0: memref<1x3x230x230xf32>, %arg1: memref<64x3x7x7xf32>, %arg2: memref<1x64x112x112xf32>, %arg3: memref<1x64x112x112xf32>) attributes {Kernel, forward_kernel_2} {
    %0 = builtin.unrealized_conversion_cast %arg0 : memref<1x3x230x230xf32> to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %1 = builtin.unrealized_conversion_cast %arg1 : memref<64x3x7x7xf32> to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %2 = builtin.unrealized_conversion_cast %arg2 : memref<1x64x112x112xf32> to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %3 = builtin.unrealized_conversion_cast %arg3 : memref<1x64x112x112xf32> to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %4 = llvm.mlir.constant(2 : index) : i64
    %5 = llvm.mlir.constant(7 : index) : i64
    %6 = llvm.mlir.constant(3 : index) : i64
    %7 = llvm.mlir.constant(1 : index) : i64
    %8 = llvm.mlir.constant(8 : index) : i64
    %9 = llvm.mlir.constant(0 : index) : i64
    %10 = builtin.unrealized_conversion_cast %9 : i64 to index
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2(%10 : index)
  ^bb2(%11: index):  // 2 preds: ^bb1, ^bb12
    %12 = builtin.unrealized_conversion_cast %11 : index to i64
    %13 = builtin.unrealized_conversion_cast %11 : index to i64
    %14 = llvm.icmp "slt" %13, %8 : i64
    cf.cond_br %14, ^bb3, ^bb13
  ^bb3:  // pred: ^bb2
    cf.br ^bb4(%10 : index)
  ^bb4(%15: index):  // 2 preds: ^bb3, ^bb11
    %16 = builtin.unrealized_conversion_cast %15 : index to i64
    %17 = builtin.unrealized_conversion_cast %15 : index to i64
    %18 = llvm.icmp "slt" %17, %6 : i64
    cf.cond_br %18, ^bb5, ^bb12
  ^bb5:  // pred: ^bb4
    cf.br ^bb6(%10 : index)
  ^bb6(%19: index):  // 2 preds: ^bb5, ^bb10
    %20 = builtin.unrealized_conversion_cast %19 : index to i64
    %21 = builtin.unrealized_conversion_cast %19 : index to i64
    %22 = llvm.icmp "slt" %21, %5 : i64
    cf.cond_br %22, ^bb7, ^bb11
  ^bb7:  // pred: ^bb6
    cf.br ^bb8(%10 : index)
  ^bb8(%23: index):  // 2 preds: ^bb7, ^bb9
    %24 = builtin.unrealized_conversion_cast %23 : index to i64
    %25 = builtin.unrealized_conversion_cast %23 : index to i64
    %26 = llvm.icmp "slt" %25, %5 : i64
    cf.cond_br %26, ^bb9, ^bb10
  ^bb9:  // pred: ^bb8
    %27 = llvm.mul %13, %4  : i64
    %28 = llvm.add %27, %25  : i64
    %29 = builtin.unrealized_conversion_cast %28 : i64 to index
    %30 = llvm.extractvalue %0[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %31 = llvm.mlir.constant(158700 : index) : i64
    %32 = llvm.mul %9, %31  : i64
    %33 = llvm.mlir.constant(52900 : index) : i64
    %34 = llvm.mul %16, %33  : i64
    %35 = llvm.add %32, %34  : i64
    %36 = llvm.mlir.constant(230 : index) : i64
    %37 = llvm.mul %20, %36  : i64
    %38 = llvm.add %35, %37  : i64
    %39 = llvm.add %38, %28  : i64
    %40 = llvm.getelementptr %30[%39] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %41 = llvm.load %40 : !llvm.ptr -> f32
    %42 = llvm.extractvalue %1[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %43 = llvm.mlir.constant(147 : index) : i64
    %44 = llvm.mul %9, %43  : i64
    %45 = llvm.mlir.constant(49 : index) : i64
    %46 = llvm.mul %16, %45  : i64
    %47 = llvm.add %44, %46  : i64
    %48 = llvm.mlir.constant(7 : index) : i64
    %49 = llvm.mul %20, %48  : i64
    %50 = llvm.add %47, %49  : i64
    %51 = llvm.add %50, %24  : i64
    %52 = llvm.getelementptr %42[%51] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %53 = llvm.load %52 : !llvm.ptr -> f32
    %54 = llvm.extractvalue %2[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %55 = llvm.mlir.constant(802816 : index) : i64
    %56 = llvm.mul %9, %55  : i64
    %57 = llvm.mlir.constant(12544 : index) : i64
    %58 = llvm.mul %9, %57  : i64
    %59 = llvm.add %56, %58  : i64
    %60 = llvm.mlir.constant(112 : index) : i64
    %61 = llvm.mul %9, %60  : i64
    %62 = llvm.add %59, %61  : i64
    %63 = llvm.add %62, %12  : i64
    %64 = llvm.getelementptr %54[%63] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %65 = llvm.load %64 : !llvm.ptr -> f32
    %66 = llvm.fmul %41, %53  : f32
    %67 = llvm.fadd %65, %66  : f32
    %68 = llvm.extractvalue %3[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %69 = llvm.mlir.constant(802816 : index) : i64
    %70 = llvm.mul %9, %69  : i64
    %71 = llvm.mlir.constant(12544 : index) : i64
    %72 = llvm.mul %9, %71  : i64
    %73 = llvm.add %70, %72  : i64
    %74 = llvm.mlir.constant(112 : index) : i64
    %75 = llvm.mul %9, %74  : i64
    %76 = llvm.add %73, %75  : i64
    %77 = llvm.add %76, %12  : i64
    %78 = llvm.getelementptr %68[%77] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    llvm.store %67, %78 : f32, !llvm.ptr
    %79 = llvm.add %25, %7  : i64
    %80 = builtin.unrealized_conversion_cast %79 : i64 to index
    cf.br ^bb8(%80 : index)
  ^bb10:  // pred: ^bb8
    %81 = llvm.add %21, %7  : i64
    %82 = builtin.unrealized_conversion_cast %81 : i64 to index
    cf.br ^bb6(%82 : index)
  ^bb11:  // pred: ^bb6
    %83 = llvm.add %17, %7  : i64
    %84 = builtin.unrealized_conversion_cast %83 : i64 to index
    cf.br ^bb4(%84 : index)
  ^bb12:  // pred: ^bb4
    %85 = llvm.add %13, %7  : i64
    %86 = builtin.unrealized_conversion_cast %85 : i64 to index
    cf.br ^bb2(%86 : index)
  ^bb13:  // pred: ^bb2
    return
  }
  func.func @forward_kernel_3(%arg0: memref<1x64x112x112xf32>, %arg1: memref<64xf32>, %arg2: memref<64xf32>, %arg3: memref<64xf32>, %arg4: memref<64xf32>, %arg5: memref<1x64x112x112xf32>) attributes {Kernel, forward_kernel_3} {
    %0 = builtin.unrealized_conversion_cast %arg0 : memref<1x64x112x112xf32> to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %1 = builtin.unrealized_conversion_cast %arg1 : memref<64xf32> to !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %2 = builtin.unrealized_conversion_cast %arg2 : memref<64xf32> to !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %3 = builtin.unrealized_conversion_cast %arg3 : memref<64xf32> to !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %4 = builtin.unrealized_conversion_cast %arg4 : memref<64xf32> to !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %5 = builtin.unrealized_conversion_cast %arg5 : memref<1x64x112x112xf32> to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %6 = llvm.mlir.constant(112 : index) : i64
    %7 = llvm.mlir.constant(1 : index) : i64
    %8 = llvm.mlir.constant(16 : index) : i64
    %9 = llvm.mlir.constant(0 : index) : i64
    %10 = builtin.unrealized_conversion_cast %9 : i64 to index
    %11 = llvm.mlir.constant(1.500000e+00 : f32) : f32
    %12 = llvm.mlir.constant(1597463007 : i32) : i32
    %13 = llvm.mlir.constant(1 : i32) : i32
    %14 = llvm.mlir.constant(5.000000e-01 : f32) : f32
    %15 = llvm.mlir.constant(1.000000e-05 : f64) : f64
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2(%10 : index)
  ^bb2(%16: index):  // 2 preds: ^bb1, ^bb6
    %17 = builtin.unrealized_conversion_cast %16 : index to i64
    %18 = builtin.unrealized_conversion_cast %16 : index to i64
    %19 = llvm.icmp "slt" %18, %8 : i64
    cf.cond_br %19, ^bb3, ^bb7
  ^bb3:  // pred: ^bb2
    cf.br ^bb4(%10 : index)
  ^bb4(%20: index):  // 2 preds: ^bb3, ^bb5
    %21 = builtin.unrealized_conversion_cast %20 : index to i64
    %22 = builtin.unrealized_conversion_cast %20 : index to i64
    %23 = llvm.icmp "slt" %22, %6 : i64
    cf.cond_br %23, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    %24 = llvm.extractvalue %0[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %25 = llvm.mlir.constant(802816 : index) : i64
    %26 = llvm.mul %9, %25  : i64
    %27 = llvm.mlir.constant(12544 : index) : i64
    %28 = llvm.mul %9, %27  : i64
    %29 = llvm.add %26, %28  : i64
    %30 = llvm.mlir.constant(112 : index) : i64
    %31 = llvm.mul %17, %30  : i64
    %32 = llvm.add %29, %31  : i64
    %33 = llvm.add %32, %21  : i64
    %34 = llvm.getelementptr %24[%33] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %35 = llvm.load %34 : !llvm.ptr -> f32
    %36 = llvm.extractvalue %1[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %37 = llvm.getelementptr %36[%9] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %38 = llvm.load %37 : !llvm.ptr -> f32
    %39 = llvm.extractvalue %2[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %40 = llvm.getelementptr %39[%9] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %41 = llvm.load %40 : !llvm.ptr -> f32
    %42 = llvm.extractvalue %3[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %43 = llvm.getelementptr %42[%9] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %44 = llvm.load %43 : !llvm.ptr -> f32
    %45 = llvm.extractvalue %4[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %46 = llvm.getelementptr %45[%9] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %47 = llvm.load %46 : !llvm.ptr -> f32
    %48 = llvm.fptrunc %15 : f64 to f32
    %49 = llvm.fadd %47, %48  : f32
    %50 = llvm.fmul %49, %14  : f32
    %51 = llvm.bitcast %49 : f32 to i32
    %52 = llvm.lshr %51, %13  : i32
    %53 = llvm.sub %12, %52  : i32
    %54 = llvm.bitcast %53 : i32 to f32
    %55 = llvm.fmul %54, %54  : f32
    %56 = llvm.fmul %55, %50  : f32
    %57 = llvm.fsub %11, %56  : f32
    %58 = llvm.fmul %57, %55  : f32
    %59 = llvm.fsub %35, %44  : f32
    %60 = llvm.fmul %59, %58  : f32
    %61 = llvm.fmul %60, %38  : f32
    %62 = llvm.fadd %61, %41  : f32
    %63 = llvm.extractvalue %5[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %64 = llvm.mlir.constant(802816 : index) : i64
    %65 = llvm.mul %9, %64  : i64
    %66 = llvm.mlir.constant(12544 : index) : i64
    %67 = llvm.mul %9, %66  : i64
    %68 = llvm.add %65, %67  : i64
    %69 = llvm.mlir.constant(112 : index) : i64
    %70 = llvm.mul %17, %69  : i64
    %71 = llvm.add %68, %70  : i64
    %72 = llvm.add %71, %21  : i64
    %73 = llvm.getelementptr %63[%72] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    llvm.store %62, %73 : f32, !llvm.ptr
    %74 = llvm.add %22, %7  : i64
    %75 = builtin.unrealized_conversion_cast %74 : i64 to index
    cf.br ^bb4(%75 : index)
  ^bb6:  // pred: ^bb4
    %76 = llvm.add %18, %7  : i64
    %77 = builtin.unrealized_conversion_cast %76 : i64 to index
    cf.br ^bb2(%77 : index)
  ^bb7:  // pred: ^bb2
    return
  }
  func.func @forward_kernel_4(%arg0: memref<1x64x112x112xf32>, %arg1: memref<1x64x112x112xf32>) attributes {Kernel, forward_kernel_4} {
    %0 = builtin.unrealized_conversion_cast %arg0 : memref<1x64x112x112xf32> to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %1 = builtin.unrealized_conversion_cast %arg1 : memref<1x64x112x112xf32> to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %2 = llvm.mlir.constant(112 : index) : i64
    %3 = llvm.mlir.constant(1 : index) : i64
    %4 = llvm.mlir.constant(16 : index) : i64
    %5 = llvm.mlir.constant(0 : index) : i64
    %6 = builtin.unrealized_conversion_cast %5 : i64 to index
    %7 = llvm.mlir.constant(0.000000e+00 : f32) : f32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2(%6 : index)
  ^bb2(%8: index):  // 2 preds: ^bb1, ^bb6
    %9 = builtin.unrealized_conversion_cast %8 : index to i64
    %10 = builtin.unrealized_conversion_cast %8 : index to i64
    %11 = llvm.icmp "slt" %10, %4 : i64
    cf.cond_br %11, ^bb3, ^bb7
  ^bb3:  // pred: ^bb2
    cf.br ^bb4(%6 : index)
  ^bb4(%12: index):  // 2 preds: ^bb3, ^bb5
    %13 = builtin.unrealized_conversion_cast %12 : index to i64
    %14 = builtin.unrealized_conversion_cast %12 : index to i64
    %15 = llvm.icmp "slt" %14, %2 : i64
    cf.cond_br %15, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    %16 = llvm.extractvalue %0[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %17 = llvm.mlir.constant(802816 : index) : i64
    %18 = llvm.mul %5, %17  : i64
    %19 = llvm.mlir.constant(12544 : index) : i64
    %20 = llvm.mul %5, %19  : i64
    %21 = llvm.add %18, %20  : i64
    %22 = llvm.mlir.constant(112 : index) : i64
    %23 = llvm.mul %9, %22  : i64
    %24 = llvm.add %21, %23  : i64
    %25 = llvm.add %24, %13  : i64
    %26 = llvm.getelementptr %16[%25] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %27 = llvm.load %26 : !llvm.ptr -> f32
    %28 = llvm.fcmp "ugt" %27, %7 : f32
    %29 = llvm.select %28, %27, %7 : i1, f32
    %30 = llvm.extractvalue %1[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %31 = llvm.mlir.constant(802816 : index) : i64
    %32 = llvm.mul %5, %31  : i64
    %33 = llvm.mlir.constant(12544 : index) : i64
    %34 = llvm.mul %5, %33  : i64
    %35 = llvm.add %32, %34  : i64
    %36 = llvm.mlir.constant(112 : index) : i64
    %37 = llvm.mul %9, %36  : i64
    %38 = llvm.add %35, %37  : i64
    %39 = llvm.add %38, %13  : i64
    %40 = llvm.getelementptr %30[%39] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    llvm.store %29, %40 : f32, !llvm.ptr
    %41 = llvm.add %14, %3  : i64
    %42 = builtin.unrealized_conversion_cast %41 : i64 to index
    cf.br ^bb4(%42 : index)
  ^bb6:  // pred: ^bb4
    %43 = llvm.add %10, %3  : i64
    %44 = builtin.unrealized_conversion_cast %43 : i64 to index
    cf.br ^bb2(%44 : index)
  ^bb7:  // pred: ^bb2
    return
  }
  func.func @forward_kernel_5(%arg0: memref<1x64x114x114xf32>) attributes {Kernel, forward_kernel_5} {
    %0 = builtin.unrealized_conversion_cast %arg0 : memref<1x64x114x114xf32> to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %1 = llvm.mlir.constant(114 : index) : i64
    %2 = llvm.mlir.constant(1 : index) : i64
    %3 = llvm.mlir.constant(6 : index) : i64
    %4 = llvm.mlir.constant(0 : index) : i64
    %5 = builtin.unrealized_conversion_cast %4 : i64 to index
    %6 = llvm.mlir.constant(0xFF800000 : f32) : f32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2(%5 : index)
  ^bb2(%7: index):  // 2 preds: ^bb1, ^bb6
    %8 = builtin.unrealized_conversion_cast %7 : index to i64
    %9 = builtin.unrealized_conversion_cast %7 : index to i64
    %10 = llvm.icmp "slt" %9, %3 : i64
    cf.cond_br %10, ^bb3, ^bb7
  ^bb3:  // pred: ^bb2
    cf.br ^bb4(%5 : index)
  ^bb4(%11: index):  // 2 preds: ^bb3, ^bb5
    %12 = builtin.unrealized_conversion_cast %11 : index to i64
    %13 = builtin.unrealized_conversion_cast %11 : index to i64
    %14 = llvm.icmp "slt" %13, %1 : i64
    cf.cond_br %14, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    %15 = llvm.extractvalue %0[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %16 = llvm.mlir.constant(831744 : index) : i64
    %17 = llvm.mul %4, %16  : i64
    %18 = llvm.mlir.constant(12996 : index) : i64
    %19 = llvm.mul %4, %18  : i64
    %20 = llvm.add %17, %19  : i64
    %21 = llvm.mlir.constant(114 : index) : i64
    %22 = llvm.mul %8, %21  : i64
    %23 = llvm.add %20, %22  : i64
    %24 = llvm.add %23, %12  : i64
    %25 = llvm.getelementptr %15[%24] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    llvm.store %6, %25 : f32, !llvm.ptr
    %26 = llvm.add %13, %2  : i64
    %27 = builtin.unrealized_conversion_cast %26 : i64 to index
    cf.br ^bb4(%27 : index)
  ^bb6:  // pred: ^bb4
    %28 = llvm.add %9, %2  : i64
    %29 = builtin.unrealized_conversion_cast %28 : i64 to index
    cf.br ^bb2(%29 : index)
  ^bb7:  // pred: ^bb2
    return
  }
  func.func @forward_kernel_6(%arg0: memref<1x64x56x56xf32>) attributes {Kernel, forward_kernel_6} {
    %0 = builtin.unrealized_conversion_cast %arg0 : memref<1x64x56x56xf32> to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %1 = llvm.mlir.constant(56 : index) : i64
    %2 = llvm.mlir.constant(1 : index) : i64
    %3 = llvm.mlir.constant(28 : index) : i64
    %4 = llvm.mlir.constant(0 : index) : i64
    %5 = builtin.unrealized_conversion_cast %4 : i64 to index
    %6 = llvm.mlir.constant(0xFF800000 : f32) : f32
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2(%5 : index)
  ^bb2(%7: index):  // 2 preds: ^bb1, ^bb6
    %8 = builtin.unrealized_conversion_cast %7 : index to i64
    %9 = builtin.unrealized_conversion_cast %7 : index to i64
    %10 = llvm.icmp "slt" %9, %3 : i64
    cf.cond_br %10, ^bb3, ^bb7
  ^bb3:  // pred: ^bb2
    cf.br ^bb4(%5 : index)
  ^bb4(%11: index):  // 2 preds: ^bb3, ^bb5
    %12 = builtin.unrealized_conversion_cast %11 : index to i64
    %13 = builtin.unrealized_conversion_cast %11 : index to i64
    %14 = llvm.icmp "slt" %13, %1 : i64
    cf.cond_br %14, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    %15 = llvm.extractvalue %0[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %16 = llvm.mlir.constant(200704 : index) : i64
    %17 = llvm.mul %4, %16  : i64
    %18 = llvm.mlir.constant(3136 : index) : i64
    %19 = llvm.mul %4, %18  : i64
    %20 = llvm.add %17, %19  : i64
    %21 = llvm.mlir.constant(56 : index) : i64
    %22 = llvm.mul %8, %21  : i64
    %23 = llvm.add %20, %22  : i64
    %24 = llvm.add %23, %12  : i64
    %25 = llvm.getelementptr %15[%24] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    llvm.store %6, %25 : f32, !llvm.ptr
    %26 = llvm.add %13, %2  : i64
    %27 = builtin.unrealized_conversion_cast %26 : i64 to index
    cf.br ^bb4(%27 : index)
  ^bb6:  // pred: ^bb4
    %28 = llvm.add %9, %2  : i64
    %29 = builtin.unrealized_conversion_cast %28 : i64 to index
    cf.br ^bb2(%29 : index)
  ^bb7:  // pred: ^bb2
    return
  }
  func.func @forward_kernel_7(%arg0: memref<1x64x114x114xf32>, %arg1: memref<1x64x56x56xf32>, %arg2: memref<1x64x56x56xf32>) attributes {Kernel, forward_kernel_7} {
    %0 = builtin.unrealized_conversion_cast %arg0 : memref<1x64x114x114xf32> to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %1 = builtin.unrealized_conversion_cast %arg1 : memref<1x64x56x56xf32> to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %2 = builtin.unrealized_conversion_cast %arg2 : memref<1x64x56x56xf32> to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %3 = llvm.mlir.constant(2 : index) : i64
    %4 = llvm.mlir.constant(3 : index) : i64
    %5 = llvm.mlir.constant(56 : index) : i64
    %6 = llvm.mlir.constant(1 : index) : i64
    %7 = llvm.mlir.constant(4 : index) : i64
    %8 = llvm.mlir.constant(0 : index) : i64
    %9 = builtin.unrealized_conversion_cast %8 : i64 to index
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    cf.br ^bb2(%9 : index)
  ^bb2(%10: index):  // 2 preds: ^bb1, ^bb12
    %11 = builtin.unrealized_conversion_cast %10 : index to i64
    %12 = builtin.unrealized_conversion_cast %10 : index to i64
    %13 = llvm.icmp "slt" %12, %7 : i64
    cf.cond_br %13, ^bb3, ^bb13
  ^bb3:  // pred: ^bb2
    cf.br ^bb4(%9 : index)
  ^bb4(%14: index):  // 2 preds: ^bb3, ^bb11
    %15 = builtin.unrealized_conversion_cast %14 : index to i64
    %16 = builtin.unrealized_conversion_cast %14 : index to i64
    %17 = llvm.icmp "slt" %16, %5 : i64
    cf.cond_br %17, ^bb5, ^bb12
  ^bb5:  // pred: ^bb4
    cf.br ^bb6(%9 : index)
  ^bb6(%18: index):  // 2 preds: ^bb5, ^bb10
    %19 = builtin.unrealized_conversion_cast %18 : index to i64
    %20 = llvm.icmp "slt" %19, %4 : i64
    cf.cond_br %20, ^bb7, ^bb11
  ^bb7:  // pred: ^bb6
    cf.br ^bb8(%9 : index)
  ^bb8(%21: index):  // 2 preds: ^bb7, ^bb9
    %22 = builtin.unrealized_conversion_cast %21 : index to i64
    %23 = llvm.icmp "slt" %22, %4 : i64
    cf.cond_br %23, ^bb9, ^bb10
  ^bb9:  // pred: ^bb8
    %24 = llvm.mul %12, %3  : i64
    %25 = llvm.add %24, %19  : i64
    %26 = builtin.unrealized_conversion_cast %25 : i64 to index
    %27 = llvm.mul %16, %3  : i64
    %28 = llvm.add %27, %22  : i64
    %29 = builtin.unrealized_conversion_cast %28 : i64 to index
    %30 = llvm.extractvalue %0[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %31 = llvm.mlir.constant(831744 : index) : i64
    %32 = llvm.mul %8, %31  : i64
    %33 = llvm.mlir.constant(12996 : index) : i64
    %34 = llvm.mul %8, %33  : i64
    %35 = llvm.add %32, %34  : i64
    %36 = llvm.mlir.constant(114 : index) : i64
    %37 = llvm.mul %25, %36  : i64
    %38 = llvm.add %35, %37  : i64
    %39 = llvm.add %38, %28  : i64
    %40 = llvm.getelementptr %30[%39] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %41 = llvm.load %40 : !llvm.ptr -> f32
    %42 = llvm.extractvalue %1[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %43 = llvm.mlir.constant(200704 : index) : i64
    %44 = llvm.mul %8, %43  : i64
    %45 = llvm.mlir.constant(3136 : index) : i64
    %46 = llvm.mul %8, %45  : i64
    %47 = llvm.add %44, %46  : i64
    %48 = llvm.mlir.constant(56 : index) : i64
    %49 = llvm.mul %11, %48  : i64
    %50 = llvm.add %47, %49  : i64
    %51 = llvm.add %50, %15  : i64
    %52 = llvm.getelementptr %42[%51] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %53 = llvm.load %52 : !llvm.ptr -> f32
    %54 = llvm.fcmp "ugt" %53, %41 : f32
    %55 = llvm.select %54, %53, %41 : i1, f32
    %56 = llvm.fcmp "uno" %41, %41 : f32
    %57 = llvm.select %56, %41, %55 : i1, f32
    %58 = llvm.extractvalue %2[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %59 = llvm.mlir.constant(200704 : index) : i64
    %60 = llvm.mul %8, %59  : i64
    %61 = llvm.mlir.constant(3136 : index) : i64
    %62 = llvm.mul %8, %61  : i64
    %63 = llvm.add %60, %62  : i64
    %64 = llvm.mlir.constant(56 : index) : i64
    %65 = llvm.mul %11, %64  : i64
    %66 = llvm.add %63, %65  : i64
    %67 = llvm.add %66, %15  : i64
    %68 = llvm.getelementptr %58[%67] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    llvm.store %57, %68 : f32, !llvm.ptr
    %69 = llvm.add %22, %6  : i64
    %70 = builtin.unrealized_conversion_cast %69 : i64 to index
    cf.br ^bb8(%70 : index)
  ^bb10:  // pred: ^bb8
    %71 = llvm.add %19, %6  : i64
    %72 = builtin.unrealized_conversion_cast %71 : i64 to index
    cf.br ^bb6(%72 : index)
  ^bb11:  // pred: ^bb6
    %73 = llvm.add %16, %6  : i64
    %74 = builtin.unrealized_conversion_cast %73 : i64 to index
    cf.br ^bb4(%74 : index)
  ^bb12:  // pred: ^bb4
    %75 = llvm.add %12, %6  : i64
    %76 = builtin.unrealized_conversion_cast %75 : i64 to index
    cf.br ^bb2(%76 : index)
  ^bb13:  // pred: ^bb2
    return
  }
}


[debug] promoted: %203 = "llvm.extractvalue"(%201) <{position = array<i64: 1>}> : (!llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>) -> !llvm.ptr
[debug] promoted: %373 = "llvm.extractvalue"(%371) <{position = array<i64: 1>}> : (!llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>) -> !llvm.ptr
[debug] promoted: %542 = "llvm.extractvalue"(%479) <{position = array<i64: 1>}> : (!llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>) -> !llvm.ptr
[debug] promoted: %543 = "llvm.extractvalue"(%502) <{position = array<i64: 1>}> : (!llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>) -> !llvm.ptr
[debug] promoted: %544 = "llvm.extractvalue"(%521) <{position = array<i64: 1>}> : (!llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>) -> !llvm.ptr
[debug] promoted: %545 = "llvm.extractvalue"(%540) <{position = array<i64: 1>}> : (!llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>) -> !llvm.ptr
[debug] promoted: %669 = "llvm.extractvalue"(%626) <{position = array<i64: 1>}> : (!llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>) -> !llvm.ptr
[debug] promoted: %670 = "llvm.extractvalue"(%631) <{position = array<i64: 1>}> : (!llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr
[debug] promoted: %671 = "llvm.extractvalue"(%636) <{position = array<i64: 1>}> : (!llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr
[debug] promoted: %672 = "llvm.extractvalue"(%641) <{position = array<i64: 1>}> : (!llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr
[debug] promoted: %673 = "llvm.extractvalue"(%646) <{position = array<i64: 1>}> : (!llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>) -> !llvm.ptr
[debug] promoted: %674 = "llvm.extractvalue"(%667) <{position = array<i64: 1>}> : (!llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>) -> !llvm.ptr
[debug] promoted: %771 = "llvm.extractvalue"(%748) <{position = array<i64: 1>}> : (!llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>) -> !llvm.ptr
[debug] promoted: %772 = "llvm.extractvalue"(%769) <{position = array<i64: 1>}> : (!llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>) -> !llvm.ptr
[debug] promoted: %848 = "llvm.extractvalue"(%846) <{position = array<i64: 1>}> : (!llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>) -> !llvm.ptr
[debug] promoted: %1018 = "llvm.extractvalue"(%1016) <{position = array<i64: 1>}> : (!llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>) -> !llvm.ptr
[debug] promoted: %1160 = "llvm.extractvalue"(%1116) <{position = array<i64: 1>}> : (!llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>) -> !llvm.ptr
[debug] promoted: %1161 = "llvm.extractvalue"(%1137) <{position = array<i64: 1>}> : (!llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>) -> !llvm.ptr
[debug] promoted: %1162 = "llvm.extractvalue"(%1158) <{position = array<i64: 1>}> : (!llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>) -> !llvm.ptr
// -----// IR Dump After ConvertKernelCallToLLVM (fdra-convert-kernelcall-to-llvm) //----- //
module attributes {torch.debug_module_name = "ResNet"} {
  llvm.func @memrefCopy(i64, !llvm.ptr, !llvm.ptr)
  llvm.func @malloc(i64) -> !llvm.ptr
  llvm.mlir.global private constant @__constant_64xf32_2(dense<[0.230717152, 0.253822476, -1.05429808E-6, -0.664388895, -1.65705547E-8, 0.161521927, 0.454503953, -4.301950e-07, 0.300513744, -8.005240e-06, 0.349418074, 0.311480612, -0.249529764, -3.474890e-05, 0.107726313, 0.218970656, 0.381412596, -0.529882133, -0.628644109, 0.571398079, 0.299846917, 0.584303737, 0.48202154, 0.328526348, 0.196717009, 0.194961801, 0.152145416, 0.085522361, 0.513142824, 0.0152367353, 0.166441768, 0.332394391, 0.249211237, 0.443366677, -0.280169278, -0.0203848016, -2.45068748E-7, 0.321340501, -4.9151744E-8, 0.237767309, 0.232907727, 0.315274626, 0.427762389, 0.293127537, 0.263794243, 0.675975859, 0.429100394, 0.345662743, -8.69090186E-8, 0.247294366, 0.303160846, 0.615772783, 0.39834857, 0.332067341, -0.412187815, 0.378069043, 0.178953409, 0.25747788, -0.449079722, 0.213058949, 0.569339037, 5.727430e-01, -0.402383476, 0.23406373]> : tensor<64xf32>) {addr_space = 0 : i32} : !llvm.array<64 x f32>
  llvm.mlir.global private constant @__constant_64xf32_1(dense<[0.234872743, 0.266257942, -5.10959595E-8, 0.518699706, 3.44040196E-9, 0.222385287, 0.422887057, 1.31532403E-7, 0.25093165, 1.5152026E-6, 0.316871643, 0.250491828, 0.378926098, 1.08618351E-5, 2.752640e-01, 0.236741036, 0.242021769, 0.395314813, 0.469346285, 0.2908957, 0.272684187, 0.27802828, 0.290692091, 0.206927493, 0.258990377, 0.278710574, 0.291149527, 0.316013753, 0.388891488, 0.304111898, 0.267757207, 0.210925162, 0.287084132, 0.332426429, 0.42672804, 0.373260558, 7.48037578E-8, 0.19067812, 1.47401256E-8, 0.223029822, 0.179079413, 0.248600766, 0.27399528, 0.259228647, 0.294202209, 0.299236417, 0.223688841, 0.262799472, 2.20011476E-8, 0.266098082, 0.220890298, 0.284285516, 0.330723315, 0.226809531, 0.365380913, 0.21229881, 0.239653021, 0.24949576, 0.525830686, 0.248247579, 0.295652747, 0.258776665, 0.4832564, 0.26670444]> : tensor<64xf32>) {addr_space = 0 : i32} : !llvm.array<64 x f32>
  llvm.mlir.global private constant @__constant_64xf32_0(dense<[1.01694489, 3.71674347, 5.81334356E-11, 3.28254271, 1.71074404E-13, 0.658226967, 4.37006235, 6.60045282E-12, 0.915522992, 1.93175254E-9, 4.12558556, 2.74399233, 2.8390913, 4.79658588E-8, 11.0722713, 0.500745952, 2.23128176, 4.82570696, 2.69861364, 9.36995506, 3.73391747, 5.48429585, 5.7126689, 0.445444882, 0.436275303, 7.15633583, 13.7179089, 5.25117493, 6.81737518, 1.67235756, 1.65343034, 1.23245978, 4.90762854, 3.07305121, 4.23838568, 4.99363518, 1.44646307E-12, 1.52116203, 1.03519833E-13, 0.351344079, 0.17024748, 1.42054474, 1.90848303, 2.15124035, 2.66084933, 4.84443378, 1.92971194, 1.49994361, 2.94806145E-13, 1.53064024, 0.365027189, 2.93755412, 5.46641159, 0.707924544, 3.33150721, 0.771802961, 2.40678358, 6.5213666, 4.12625027, 1.05063522, 2.95303202, 11.3656216, 4.76904678, 1.65587807]> : tensor<64xf32>) {addr_space = 0 : i32} : !llvm.array<64 x f32>
  llvm.mlir.global private constant @__constant_64xf32(dense<[0.00276811025, -0.0257689245, 2.12544663E-7, -0.0846051499, 2.11205915E-8, 4.96906461E-4, -0.0224083271, -1.15818956E-7, -4.823850e-03, 2.75073347E-7, 3.958230e-02, 0.0319936387, -0.0374896601, -1.37163477E-6, 0.00660019321, 4.378190e-03, 0.0647971481, 0.11175999, 0.0360015705, -0.0750752166, -0.03824009, 0.0843578502, -5.228700e-02, -0.0117988894, 0.00130188058, 0.0321722962, -0.0177843049, -0.0910085887, 0.113187239, -0.0416320041, 0.00873024761, 0.0296931695, -0.0705021694, -0.00348469778, 0.109771468, -0.00173411821, -5.94229412E-8, 0.0293303896, -7.85527287E-9, 0.00673204474, -0.00370999542, 0.0160279572, -0.0278826058, 0.0265925378, 0.0284745526, -0.12734659, 0.0446168408, 0.0263288375, 2.14538591E-8, -1.704500e-02, -0.00356168114, -0.0458412617, 0.0638761446, 0.0152198272, -0.0385114551, -0.0164278317, -0.016568929, 0.0560574941, -0.0803062319, -0.00266457512, -0.0417176671, 0.126112729, -0.0492369682, -0.0132609205]> : tensor<64xf32>) {addr_space = 0 : i32} : !llvm.array<64 x f32>
  llvm.mlir.global private constant @__constant_64x3x7x7xf32(dense<"tensor<64x3x7x7xf32>) {addr_space = 0 : i32} : !llvm.array<64 x array<3 x array<7 x array<7 x f32>>>>
  ml_program.global private mutable @global_seed(dense<0> : tensor<i64>) : tensor<i64>
  llvm.func @forward(%arg0: !llvm.ptr) -> !llvm.ptr {
    %0 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %1 = llvm.insertvalue %arg0, %0[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %2 = llvm.insertvalue %arg0, %1[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %3 = llvm.mlir.constant(0 : index) : i64
    %4 = llvm.insertvalue %3, %2[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %5 = llvm.mlir.constant(1 : index) : i64
    %6 = llvm.insertvalue %5, %4[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %7 = llvm.mlir.constant(150528 : index) : i64
    %8 = llvm.insertvalue %7, %6[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %9 = llvm.mlir.constant(3 : index) : i64
    %10 = llvm.insertvalue %9, %8[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %11 = llvm.mlir.constant(50176 : index) : i64
    %12 = llvm.insertvalue %11, %10[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %13 = llvm.mlir.constant(224 : index) : i64
    %14 = llvm.insertvalue %13, %12[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %15 = llvm.mlir.constant(224 : index) : i64
    %16 = llvm.insertvalue %15, %14[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %17 = llvm.mlir.constant(224 : index) : i64
    %18 = llvm.insertvalue %17, %16[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %19 = llvm.mlir.constant(1 : index) : i64
    %20 = llvm.insertvalue %19, %18[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %21 = builtin.unrealized_conversion_cast %20 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> to memref<1x3x224x224xf32>
    %22 = builtin.unrealized_conversion_cast %21 : memref<1x3x224x224xf32> to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %23 = llvm.mlir.constant(4 : index) : i64
    %24 = llvm.mlir.constant(28 : index) : i64
    %25 = llvm.mlir.constant(56 : index) : i64
    %26 = llvm.mlir.constant(6 : index) : i64
    %27 = llvm.mlir.constant(114 : index) : i64
    %28 = llvm.mlir.constant(8 : index) : i64
    %29 = llvm.mlir.constant(16 : index) : i64
    %30 = llvm.mlir.constant(112 : index) : i64
    %31 = llvm.mlir.constant(64 : index) : i64
    %32 = llvm.mlir.constant(5 : index) : i64
    %33 = llvm.mlir.constant(230 : index) : i64
    %34 = llvm.mlir.constant(3 : index) : i64
    %35 = llvm.mlir.constant(1 : index) : i64
    %36 = llvm.mlir.constant(0 : index) : i64
    %37 = builtin.unrealized_conversion_cast %36 : i64 to index
    %38 = llvm.mlir.constant(64 : index) : i64
    %39 = llvm.mlir.constant(3 : index) : i64
    %40 = llvm.mlir.constant(7 : index) : i64
    %41 = llvm.mlir.constant(7 : index) : i64
    %42 = llvm.mlir.constant(1 : index) : i64
    %43 = llvm.mlir.constant(49 : index) : i64
    %44 = llvm.mlir.constant(147 : index) : i64
    %45 = llvm.mlir.constant(9408 : index) : i64
    %46 = llvm.mlir.null : !llvm.ptr
    %47 = llvm.getelementptr %46[%45] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %48 = llvm.ptrtoint %47 : !llvm.ptr to i64
    %49 = llvm.mlir.addressof @__constant_64x3x7x7xf32 : !llvm.ptr
    %50 = llvm.getelementptr %49[0, 0, 0, 0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<64 x array<3 x array<7 x array<7 x f32>>>>
    %51 = llvm.mlir.constant(3735928559 : index) : i64
    %52 = llvm.inttoptr %51 : i64 to !llvm.ptr
    %53 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %54 = llvm.insertvalue %52, %53[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %55 = llvm.insertvalue %50, %54[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %56 = llvm.mlir.constant(0 : index) : i64
    %57 = llvm.insertvalue %56, %55[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %58 = llvm.insertvalue %38, %57[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %59 = llvm.insertvalue %39, %58[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %60 = llvm.insertvalue %40, %59[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %61 = llvm.insertvalue %41, %60[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %62 = llvm.insertvalue %44, %61[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %63 = llvm.insertvalue %43, %62[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %64 = llvm.insertvalue %41, %63[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %65 = llvm.insertvalue %42, %64[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %66 = builtin.unrealized_conversion_cast %65 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> to memref<64x3x7x7xf32>
    %67 = llvm.mlir.constant(64 : index) : i64
    %68 = llvm.mlir.constant(1 : index) : i64
    %69 = llvm.mlir.null : !llvm.ptr
    %70 = llvm.getelementptr %69[%67] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %71 = llvm.ptrtoint %70 : !llvm.ptr to i64
    %72 = llvm.mlir.addressof @__constant_64xf32 : !llvm.ptr
    %73 = llvm.getelementptr %72[0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<64 x f32>
    %74 = llvm.mlir.constant(3735928559 : index) : i64
    %75 = llvm.inttoptr %74 : i64 to !llvm.ptr
    %76 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %77 = llvm.insertvalue %75, %76[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %78 = llvm.insertvalue %73, %77[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %79 = llvm.mlir.constant(0 : index) : i64
    %80 = llvm.insertvalue %79, %78[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %81 = llvm.insertvalue %67, %80[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %82 = llvm.insertvalue %68, %81[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %83 = builtin.unrealized_conversion_cast %82 : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> to memref<64xf32>
    %84 = llvm.mlir.constant(64 : index) : i64
    %85 = llvm.mlir.constant(1 : index) : i64
    %86 = llvm.mlir.null : !llvm.ptr
    %87 = llvm.getelementptr %86[%84] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %88 = llvm.ptrtoint %87 : !llvm.ptr to i64
    %89 = llvm.mlir.addressof @__constant_64xf32_0 : !llvm.ptr
    %90 = llvm.getelementptr %89[0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<64 x f32>
    %91 = llvm.mlir.constant(3735928559 : index) : i64
    %92 = llvm.inttoptr %91 : i64 to !llvm.ptr
    %93 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %94 = llvm.insertvalue %92, %93[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %95 = llvm.insertvalue %90, %94[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %96 = llvm.mlir.constant(0 : index) : i64
    %97 = llvm.insertvalue %96, %95[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %98 = llvm.insertvalue %84, %97[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %99 = llvm.insertvalue %85, %98[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %100 = builtin.unrealized_conversion_cast %99 : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> to memref<64xf32>
    %101 = llvm.mlir.constant(64 : index) : i64
    %102 = llvm.mlir.constant(1 : index) : i64
    %103 = llvm.mlir.null : !llvm.ptr
    %104 = llvm.getelementptr %103[%101] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %105 = llvm.ptrtoint %104 : !llvm.ptr to i64
    %106 = llvm.mlir.addressof @__constant_64xf32_1 : !llvm.ptr
    %107 = llvm.getelementptr %106[0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<64 x f32>
    %108 = llvm.mlir.constant(3735928559 : index) : i64
    %109 = llvm.inttoptr %108 : i64 to !llvm.ptr
    %110 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %111 = llvm.insertvalue %109, %110[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %112 = llvm.insertvalue %107, %111[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %113 = llvm.mlir.constant(0 : index) : i64
    %114 = llvm.insertvalue %113, %112[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %115 = llvm.insertvalue %101, %114[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %116 = llvm.insertvalue %102, %115[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %117 = builtin.unrealized_conversion_cast %116 : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> to memref<64xf32>
    %118 = llvm.mlir.constant(64 : index) : i64
    %119 = llvm.mlir.constant(1 : index) : i64
    %120 = llvm.mlir.null : !llvm.ptr
    %121 = llvm.getelementptr %120[%118] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %122 = llvm.ptrtoint %121 : !llvm.ptr to i64
    %123 = llvm.mlir.addressof @__constant_64xf32_2 : !llvm.ptr
    %124 = llvm.getelementptr %123[0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<64 x f32>
    %125 = llvm.mlir.constant(3735928559 : index) : i64
    %126 = llvm.inttoptr %125 : i64 to !llvm.ptr
    %127 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %128 = llvm.insertvalue %126, %127[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %129 = llvm.insertvalue %124, %128[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %130 = llvm.mlir.constant(0 : index) : i64
    %131 = llvm.insertvalue %130, %129[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %132 = llvm.insertvalue %118, %131[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %133 = llvm.insertvalue %119, %132[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %134 = builtin.unrealized_conversion_cast %133 : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> to memref<64xf32>
    %135 = llvm.mlir.constant(1 : index) : i64
    %136 = llvm.mlir.constant(3 : index) : i64
    %137 = llvm.mlir.constant(230 : index) : i64
    %138 = llvm.mlir.constant(230 : index) : i64
    %139 = llvm.mlir.constant(1 : index) : i64
    %140 = llvm.mlir.constant(52900 : index) : i64
    %141 = llvm.mlir.constant(158700 : index) : i64
    %142 = llvm.mlir.constant(158700 : index) : i64
    %143 = llvm.mlir.null : !llvm.ptr
    %144 = llvm.getelementptr %143[%142] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %145 = llvm.ptrtoint %144 : !llvm.ptr to i64
    %146 = llvm.mlir.constant(64 : index) : i64
    %147 = llvm.add %145, %146  : i64
    %148 = llvm.call @malloc(%147) : (i64) -> !llvm.ptr
    %149 = llvm.ptrtoint %148 : !llvm.ptr to i64
    %150 = llvm.mlir.constant(1 : index) : i64
    %151 = llvm.sub %146, %150  : i64
    %152 = llvm.add %149, %151  : i64
    %153 = llvm.urem %152, %146  : i64
    %154 = llvm.sub %152, %153  : i64
    %155 = llvm.inttoptr %154 : i64 to !llvm.ptr
    %156 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %157 = llvm.insertvalue %148, %156[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %158 = llvm.insertvalue %155, %157[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %159 = llvm.mlir.constant(0 : index) : i64
    %160 = llvm.insertvalue %159, %158[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %161 = llvm.insertvalue %135, %160[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %162 = llvm.insertvalue %136, %161[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %163 = llvm.insertvalue %137, %162[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %164 = llvm.insertvalue %138, %163[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %165 = llvm.insertvalue %141, %164[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %166 = llvm.insertvalue %140, %165[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %167 = llvm.insertvalue %138, %166[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %168 = llvm.insertvalue %139, %167[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %169 = builtin.unrealized_conversion_cast %168 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> to memref<1x3x230x230xf32>
    llvm.br ^bb1(%36 : i64)
  ^bb1(%170: i64):  // 2 preds: ^bb0, ^bb8
    %171 = builtin.unrealized_conversion_cast %170 : i64 to index
    %172 = builtin.unrealized_conversion_cast %171 : index to i64
    %173 = llvm.icmp "slt" %172, %35 : i64
    llvm.cond_br %173, ^bb2, ^bb9
  ^bb2:  // pred: ^bb1
    llvm.br ^bb3(%36 : i64)
  ^bb3(%174: i64):  // 2 preds: ^bb2, ^bb7
    %175 = builtin.unrealized_conversion_cast %174 : i64 to index
    %176 = builtin.unrealized_conversion_cast %175 : index to i64
    %177 = llvm.icmp "slt" %176, %34 : i64
    llvm.cond_br %177, ^bb4, ^bb8
  ^bb4:  // pred: ^bb3
    llvm.br ^bb5(%36 : i64)
  ^bb5(%178: i64):  // 2 preds: ^bb4, ^bb6
    %179 = builtin.unrealized_conversion_cast %178 : i64 to index
    %180 = builtin.unrealized_conversion_cast %179 : index to i64
    %181 = llvm.icmp "slt" %180, %33 : i64
    llvm.cond_br %181, ^bb6, ^bb7
  ^bb6:  // pred: ^bb5
    %182 = llvm.mlir.constant(0 : index) : i64
    %183 = builtin.unrealized_conversion_cast %182 : i64 to index
    %184 = llvm.mlir.constant(0 : index) : i64
    %185 = builtin.unrealized_conversion_cast %184 : i64 to index
    %186 = llvm.extractvalue %168[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %187 = builtin.unrealized_conversion_cast %183 : index to i64
    %188 = llvm.mlir.constant(158700 : index) : i64
    %189 = llvm.mul %187, %188  : i64
    %190 = builtin.unrealized_conversion_cast %175 : index to i64
    %191 = llvm.mlir.constant(52900 : index) : i64
    %192 = llvm.mul %190, %191  : i64
    %193 = llvm.add %189, %192  : i64
    %194 = builtin.unrealized_conversion_cast %179 : index to i64
    %195 = llvm.mlir.constant(230 : index) : i64
    %196 = llvm.mul %194, %195  : i64
    %197 = llvm.add %193, %196  : i64
    %198 = builtin.unrealized_conversion_cast %185 : index to i64
    %199 = llvm.add %197, %198  : i64
    %200 = llvm.getelementptr %186[%199] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %201 = builtin.unrealized_conversion_cast %200 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %202 = llvm.extractvalue %201[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.call @forward_kernel_0(%202) : (!llvm.ptr) -> ()
    %203 = llvm.add %180, %32  : i64
    %204 = builtin.unrealized_conversion_cast %203 : i64 to index
    llvm.br ^bb5(%203 : i64)
  ^bb7:  // pred: ^bb5
    %205 = llvm.add %176, %35  : i64
    %206 = builtin.unrealized_conversion_cast %205 : i64 to index
    llvm.br ^bb3(%205 : i64)
  ^bb8:  // pred: ^bb3
    %207 = llvm.add %172, %35  : i64
    %208 = builtin.unrealized_conversion_cast %207 : i64 to index
    llvm.br ^bb1(%207 : i64)
  ^bb9:  // pred: ^bb1
    %209 = llvm.mlir.constant(1 : index) : i64
    %210 = llvm.mlir.constant(3 : index) : i64
    %211 = llvm.mlir.constant(230 : index) : i64
    %212 = llvm.mlir.constant(230 : index) : i64
    %213 = llvm.mlir.constant(1 : index) : i64
    %214 = llvm.mlir.constant(52900 : index) : i64
    %215 = llvm.mlir.constant(158700 : index) : i64
    %216 = llvm.mlir.constant(158700 : index) : i64
    %217 = llvm.mlir.null : !llvm.ptr
    %218 = llvm.getelementptr %217[%216] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %219 = llvm.ptrtoint %218 : !llvm.ptr to i64
    %220 = llvm.mlir.constant(64 : index) : i64
    %221 = llvm.add %219, %220  : i64
    %222 = llvm.call @malloc(%221) : (i64) -> !llvm.ptr
    %223 = llvm.ptrtoint %222 : !llvm.ptr to i64
    %224 = llvm.mlir.constant(1 : index) : i64
    %225 = llvm.sub %220, %224  : i64
    %226 = llvm.add %223, %225  : i64
    %227 = llvm.urem %226, %220  : i64
    %228 = llvm.sub %226, %227  : i64
    %229 = llvm.inttoptr %228 : i64 to !llvm.ptr
    %230 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %231 = llvm.insertvalue %222, %230[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %232 = llvm.insertvalue %229, %231[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %233 = llvm.mlir.constant(0 : index) : i64
    %234 = llvm.insertvalue %233, %232[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %235 = llvm.insertvalue %209, %234[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %236 = llvm.insertvalue %210, %235[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %237 = llvm.insertvalue %211, %236[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %238 = llvm.insertvalue %212, %237[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %239 = llvm.insertvalue %215, %238[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %240 = llvm.insertvalue %214, %239[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %241 = llvm.insertvalue %212, %240[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %242 = llvm.insertvalue %213, %241[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %243 = builtin.unrealized_conversion_cast %242 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> to memref<1x3x230x230xf32>
    %244 = llvm.mlir.constant(1 : index) : i64
    %245 = llvm.extractvalue %168[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %246 = llvm.mul %244, %245  : i64
    %247 = llvm.extractvalue %168[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %248 = llvm.mul %246, %247  : i64
    %249 = llvm.extractvalue %168[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %250 = llvm.mul %248, %249  : i64
    %251 = llvm.extractvalue %168[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %252 = llvm.mul %250, %251  : i64
    %253 = llvm.mlir.null : !llvm.ptr
    %254 = llvm.getelementptr %253[1] : (!llvm.ptr) -> !llvm.ptr, f32
    %255 = llvm.ptrtoint %254 : !llvm.ptr to i64
    %256 = llvm.mul %252, %255  : i64
    %257 = llvm.extractvalue %168[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %258 = llvm.extractvalue %168[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %259 = llvm.getelementptr %257[%258] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %260 = llvm.extractvalue %242[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %261 = llvm.extractvalue %242[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %262 = llvm.getelementptr %260[%261] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    "llvm.intr.memcpy"(%262, %259, %256) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> ()
    %263 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %264 = llvm.extractvalue %242[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %265 = llvm.extractvalue %242[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %266 = llvm.insertvalue %264, %263[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %267 = llvm.insertvalue %265, %266[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %268 = llvm.mlir.constant(693 : index) : i64
    %269 = llvm.insertvalue %268, %267[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %270 = llvm.mlir.constant(1 : index) : i64
    %271 = llvm.insertvalue %270, %269[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %272 = llvm.mlir.constant(158700 : index) : i64
    %273 = llvm.insertvalue %272, %271[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %274 = llvm.mlir.constant(3 : index) : i64
    %275 = llvm.insertvalue %274, %273[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %276 = llvm.mlir.constant(52900 : index) : i64
    %277 = llvm.insertvalue %276, %275[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %278 = llvm.mlir.constant(224 : index) : i64
    %279 = llvm.insertvalue %278, %277[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %280 = llvm.mlir.constant(230 : index) : i64
    %281 = llvm.insertvalue %280, %279[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %282 = llvm.mlir.constant(224 : index) : i64
    %283 = llvm.insertvalue %282, %281[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %284 = llvm.mlir.constant(1 : index) : i64
    %285 = llvm.insertvalue %284, %283[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %286 = llvm.intr.stacksave : !llvm.ptr
    %287 = llvm.mlir.constant(4 : i64) : i64
    %288 = llvm.mlir.constant(1 : index) : i64
    %289 = llvm.alloca %288 x !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> : (i64) -> !llvm.ptr
    llvm.store %22, %289 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>, !llvm.ptr
    %290 = llvm.mlir.undef : !llvm.struct<(i64, ptr)>
    %291 = llvm.insertvalue %287, %290[0] : !llvm.struct<(i64, ptr)> 
    %292 = llvm.insertvalue %289, %291[1] : !llvm.struct<(i64, ptr)> 
    %293 = llvm.mlir.constant(4 : i64) : i64
    %294 = llvm.mlir.constant(1 : index) : i64
    %295 = llvm.alloca %294 x !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> : (i64) -> !llvm.ptr
    llvm.store %285, %295 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>, !llvm.ptr
    %296 = llvm.mlir.undef : !llvm.struct<(i64, ptr)>
    %297 = llvm.insertvalue %293, %296[0] : !llvm.struct<(i64, ptr)> 
    %298 = llvm.insertvalue %295, %297[1] : !llvm.struct<(i64, ptr)> 
    %299 = llvm.mlir.constant(1 : index) : i64
    %300 = llvm.alloca %299 x !llvm.struct<(i64, ptr)> : (i64) -> !llvm.ptr
    llvm.store %292, %300 : !llvm.struct<(i64, ptr)>, !llvm.ptr
    %301 = llvm.alloca %299 x !llvm.struct<(i64, ptr)> : (i64) -> !llvm.ptr
    llvm.store %298, %301 : !llvm.struct<(i64, ptr)>, !llvm.ptr
    %302 = llvm.mlir.constant(4 : index) : i64
    llvm.call @memrefCopy(%302, %300, %301) : (i64, !llvm.ptr, !llvm.ptr) -> ()
    llvm.intr.stackrestore %286 : !llvm.ptr
    %303 = llvm.mlir.constant(1 : index) : i64
    %304 = llvm.mlir.constant(64 : index) : i64
    %305 = llvm.mlir.constant(112 : index) : i64
    %306 = llvm.mlir.constant(112 : index) : i64
    %307 = llvm.mlir.constant(1 : index) : i64
    %308 = llvm.mlir.constant(12544 : index) : i64
    %309 = llvm.mlir.constant(802816 : index) : i64
    %310 = llvm.mlir.constant(802816 : index) : i64
    %311 = llvm.mlir.null : !llvm.ptr
    %312 = llvm.getelementptr %311[%310] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %313 = llvm.ptrtoint %312 : !llvm.ptr to i64
    %314 = llvm.mlir.constant(64 : index) : i64
    %315 = llvm.add %313, %314  : i64
    %316 = llvm.call @malloc(%315) : (i64) -> !llvm.ptr
    %317 = llvm.ptrtoint %316 : !llvm.ptr to i64
    %318 = llvm.mlir.constant(1 : index) : i64
    %319 = llvm.sub %314, %318  : i64
    %320 = llvm.add %317, %319  : i64
    %321 = llvm.urem %320, %314  : i64
    %322 = llvm.sub %320, %321  : i64
    %323 = llvm.inttoptr %322 : i64 to !llvm.ptr
    %324 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %325 = llvm.insertvalue %316, %324[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %326 = llvm.insertvalue %323, %325[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %327 = llvm.mlir.constant(0 : index) : i64
    %328 = llvm.insertvalue %327, %326[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %329 = llvm.insertvalue %303, %328[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %330 = llvm.insertvalue %304, %329[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %331 = llvm.insertvalue %305, %330[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %332 = llvm.insertvalue %306, %331[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %333 = llvm.insertvalue %309, %332[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %334 = llvm.insertvalue %308, %333[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %335 = llvm.insertvalue %306, %334[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %336 = llvm.insertvalue %307, %335[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %337 = builtin.unrealized_conversion_cast %336 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> to memref<1x64x112x112xf32>
    llvm.br ^bb10(%36 : i64)
  ^bb10(%338: i64):  // 2 preds: ^bb9, ^bb17
    %339 = builtin.unrealized_conversion_cast %338 : i64 to index
    %340 = builtin.unrealized_conversion_cast %339 : index to i64
    %341 = llvm.icmp "slt" %340, %35 : i64
    llvm.cond_br %341, ^bb11, ^bb18
  ^bb11:  // pred: ^bb10
    llvm.br ^bb12(%36 : i64)
  ^bb12(%342: i64):  // 2 preds: ^bb11, ^bb16
    %343 = builtin.unrealized_conversion_cast %342 : i64 to index
    %344 = builtin.unrealized_conversion_cast %343 : index to i64
    %345 = llvm.icmp "slt" %344, %31 : i64
    llvm.cond_br %345, ^bb13, ^bb17
  ^bb13:  // pred: ^bb12
    llvm.br ^bb14(%36 : i64)
  ^bb14(%346: i64):  // 2 preds: ^bb13, ^bb15
    %347 = builtin.unrealized_conversion_cast %346 : i64 to index
    %348 = builtin.unrealized_conversion_cast %347 : index to i64
    %349 = llvm.icmp "slt" %348, %30 : i64
    llvm.cond_br %349, ^bb15, ^bb16
  ^bb15:  // pred: ^bb14
    %350 = llvm.mlir.constant(0 : index) : i64
    %351 = builtin.unrealized_conversion_cast %350 : i64 to index
    %352 = llvm.mlir.constant(0 : index) : i64
    %353 = builtin.unrealized_conversion_cast %352 : i64 to index
    %354 = llvm.extractvalue %336[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %355 = builtin.unrealized_conversion_cast %351 : index to i64
    %356 = llvm.mlir.constant(802816 : index) : i64
    %357 = llvm.mul %355, %356  : i64
    %358 = builtin.unrealized_conversion_cast %343 : index to i64
    %359 = llvm.mlir.constant(12544 : index) : i64
    %360 = llvm.mul %358, %359  : i64
    %361 = llvm.add %357, %360  : i64
    %362 = builtin.unrealized_conversion_cast %347 : index to i64
    %363 = llvm.mlir.constant(112 : index) : i64
    %364 = llvm.mul %362, %363  : i64
    %365 = llvm.add %361, %364  : i64
    %366 = builtin.unrealized_conversion_cast %353 : index to i64
    %367 = llvm.add %365, %366  : i64
    %368 = llvm.getelementptr %354[%367] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %369 = builtin.unrealized_conversion_cast %368 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %370 = llvm.extractvalue %369[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.call @forward_kernel_1(%370) : (!llvm.ptr) -> ()
    %371 = llvm.add %348, %29  : i64
    %372 = builtin.unrealized_conversion_cast %371 : i64 to index
    llvm.br ^bb14(%371 : i64)
  ^bb16:  // pred: ^bb14
    %373 = llvm.add %344, %35  : i64
    %374 = builtin.unrealized_conversion_cast %373 : i64 to index
    llvm.br ^bb12(%373 : i64)
  ^bb17:  // pred: ^bb12
    %375 = llvm.add %340, %35  : i64
    %376 = builtin.unrealized_conversion_cast %375 : i64 to index
    llvm.br ^bb10(%375 : i64)
  ^bb18:  // pred: ^bb10
    %377 = llvm.mlir.constant(1 : index) : i64
    %378 = llvm.mlir.constant(64 : index) : i64
    %379 = llvm.mlir.constant(112 : index) : i64
    %380 = llvm.mlir.constant(112 : index) : i64
    %381 = llvm.mlir.constant(1 : index) : i64
    %382 = llvm.mlir.constant(12544 : index) : i64
    %383 = llvm.mlir.constant(802816 : index) : i64
    %384 = llvm.mlir.constant(802816 : index) : i64
    %385 = llvm.mlir.null : !llvm.ptr
    %386 = llvm.getelementptr %385[%384] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %387 = llvm.ptrtoint %386 : !llvm.ptr to i64
    %388 = llvm.mlir.constant(64 : index) : i64
    %389 = llvm.add %387, %388  : i64
    %390 = llvm.call @malloc(%389) : (i64) -> !llvm.ptr
    %391 = llvm.ptrtoint %390 : !llvm.ptr to i64
    %392 = llvm.mlir.constant(1 : index) : i64
    %393 = llvm.sub %388, %392  : i64
    %394 = llvm.add %391, %393  : i64
    %395 = llvm.urem %394, %388  : i64
    %396 = llvm.sub %394, %395  : i64
    %397 = llvm.inttoptr %396 : i64 to !llvm.ptr
    %398 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %399 = llvm.insertvalue %390, %398[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %400 = llvm.insertvalue %397, %399[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %401 = llvm.mlir.constant(0 : index) : i64
    %402 = llvm.insertvalue %401, %400[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %403 = llvm.insertvalue %377, %402[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %404 = llvm.insertvalue %378, %403[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %405 = llvm.insertvalue %379, %404[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %406 = llvm.insertvalue %380, %405[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %407 = llvm.insertvalue %383, %406[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %408 = llvm.insertvalue %382, %407[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %409 = llvm.insertvalue %380, %408[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %410 = llvm.insertvalue %381, %409[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %411 = builtin.unrealized_conversion_cast %410 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> to memref<1x64x112x112xf32>
    %412 = llvm.mlir.constant(1 : index) : i64
    %413 = llvm.extractvalue %336[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %414 = llvm.mul %412, %413  : i64
    %415 = llvm.extractvalue %336[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %416 = llvm.mul %414, %415  : i64
    %417 = llvm.extractvalue %336[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %418 = llvm.mul %416, %417  : i64
    %419 = llvm.extractvalue %336[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %420 = llvm.mul %418, %419  : i64
    %421 = llvm.mlir.null : !llvm.ptr
    %422 = llvm.getelementptr %421[1] : (!llvm.ptr) -> !llvm.ptr, f32
    %423 = llvm.ptrtoint %422 : !llvm.ptr to i64
    %424 = llvm.mul %420, %423  : i64
    %425 = llvm.extractvalue %336[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %426 = llvm.extractvalue %336[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %427 = llvm.getelementptr %425[%426] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %428 = llvm.extractvalue %410[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %429 = llvm.extractvalue %410[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %430 = llvm.getelementptr %428[%429] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    "llvm.intr.memcpy"(%430, %427, %424) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> ()
    llvm.br ^bb19(%36 : i64)
  ^bb19(%431: i64):  // 2 preds: ^bb18, ^bb29
    %432 = builtin.unrealized_conversion_cast %431 : i64 to index
    %433 = builtin.unrealized_conversion_cast %432 : index to i64
    %434 = llvm.icmp "slt" %433, %35 : i64
    llvm.cond_br %434, ^bb20, ^bb30
  ^bb20:  // pred: ^bb19
    llvm.br ^bb21(%36 : i64)
  ^bb21(%435: i64):  // 2 preds: ^bb20, ^bb28
    %436 = builtin.unrealized_conversion_cast %435 : i64 to index
    %437 = builtin.unrealized_conversion_cast %436 : index to i64
    %438 = llvm.icmp "slt" %437, %31 : i64
    llvm.cond_br %438, ^bb22, ^bb29
  ^bb22:  // pred: ^bb21
    llvm.br ^bb23(%36 : i64)
  ^bb23(%439: i64):  // 2 preds: ^bb22, ^bb27
    %440 = builtin.unrealized_conversion_cast %439 : i64 to index
    %441 = builtin.unrealized_conversion_cast %440 : index to i64
    %442 = llvm.icmp "slt" %441, %30 : i64
    llvm.cond_br %442, ^bb24, ^bb28
  ^bb24:  // pred: ^bb23
    llvm.br ^bb25(%36 : i64)
  ^bb25(%443: i64):  // 2 preds: ^bb24, ^bb26
    %444 = builtin.unrealized_conversion_cast %443 : i64 to index
    %445 = builtin.unrealized_conversion_cast %444 : index to i64
    %446 = llvm.icmp "slt" %445, %30 : i64
    llvm.cond_br %446, ^bb26, ^bb27
  ^bb26:  // pred: ^bb25
    %447 = llvm.mlir.constant(0 : index) : i64
    %448 = builtin.unrealized_conversion_cast %447 : i64 to index
    %449 = llvm.mlir.constant(0 : index) : i64
    %450 = builtin.unrealized_conversion_cast %449 : i64 to index
    %451 = llvm.mlir.constant(2 : index) : i64
    %452 = llvm.mul %439, %451  : i64
    %453 = builtin.unrealized_conversion_cast %452 : i64 to index
    %454 = llvm.mlir.constant(2 : index) : i64
    %455 = llvm.mul %443, %454  : i64
    %456 = builtin.unrealized_conversion_cast %455 : i64 to index
    %457 = llvm.extractvalue %242[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %458 = builtin.unrealized_conversion_cast %448 : index to i64
    %459 = llvm.mlir.constant(158700 : index) : i64
    %460 = llvm.mul %458, %459  : i64
    %461 = builtin.unrealized_conversion_cast %450 : index to i64
    %462 = llvm.mlir.constant(52900 : index) : i64
    %463 = llvm.mul %461, %462  : i64
    %464 = llvm.add %460, %463  : i64
    %465 = builtin.unrealized_conversion_cast %453 : index to i64
    %466 = llvm.mlir.constant(230 : index) : i64
    %467 = llvm.mul %465, %466  : i64
    %468 = llvm.add %464, %467  : i64
    %469 = builtin.unrealized_conversion_cast %456 : index to i64
    %470 = llvm.add %468, %469  : i64
    %471 = llvm.getelementptr %457[%470] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %472 = builtin.unrealized_conversion_cast %471 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %473 = llvm.mlir.constant(0 : index) : i64
    %474 = builtin.unrealized_conversion_cast %473 : i64 to index
    %475 = llvm.mlir.constant(0 : index) : i64
    %476 = builtin.unrealized_conversion_cast %475 : i64 to index
    %477 = llvm.mlir.constant(0 : index) : i64
    %478 = builtin.unrealized_conversion_cast %477 : i64 to index
    %479 = llvm.extractvalue %65[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %480 = builtin.unrealized_conversion_cast %436 : index to i64
    %481 = llvm.mlir.constant(147 : index) : i64
    %482 = llvm.mul %480, %481  : i64
    %483 = builtin.unrealized_conversion_cast %474 : index to i64
    %484 = llvm.mlir.constant(49 : index) : i64
    %485 = llvm.mul %483, %484  : i64
    %486 = llvm.add %482, %485  : i64
    %487 = builtin.unrealized_conversion_cast %476 : index to i64
    %488 = llvm.mlir.constant(7 : index) : i64
    %489 = llvm.mul %487, %488  : i64
    %490 = llvm.add %486, %489  : i64
    %491 = builtin.unrealized_conversion_cast %478 : index to i64
    %492 = llvm.add %490, %491  : i64
    %493 = llvm.getelementptr %479[%492] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %494 = builtin.unrealized_conversion_cast %493 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %495 = llvm.mlir.constant(0 : index) : i64
    %496 = builtin.unrealized_conversion_cast %495 : i64 to index
    %497 = llvm.extractvalue %410[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %498 = builtin.unrealized_conversion_cast %496 : index to i64
    %499 = llvm.mlir.constant(802816 : index) : i64
    %500 = llvm.mul %498, %499  : i64
    %501 = builtin.unrealized_conversion_cast %436 : index to i64
    %502 = llvm.mlir.constant(12544 : index) : i64
    %503 = llvm.mul %501, %502  : i64
    %504 = llvm.add %500, %503  : i64
    %505 = builtin.unrealized_conversion_cast %440 : index to i64
    %506 = llvm.mlir.constant(112 : index) : i64
    %507 = llvm.mul %505, %506  : i64
    %508 = llvm.add %504, %507  : i64
    %509 = builtin.unrealized_conversion_cast %444 : index to i64
    %510 = llvm.add %508, %509  : i64
    %511 = llvm.getelementptr %497[%510] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %512 = builtin.unrealized_conversion_cast %511 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %513 = llvm.mlir.constant(0 : index) : i64
    %514 = builtin.unrealized_conversion_cast %513 : i64 to index
    %515 = llvm.extractvalue %410[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %516 = builtin.unrealized_conversion_cast %514 : index to i64
    %517 = llvm.mlir.constant(802816 : index) : i64
    %518 = llvm.mul %516, %517  : i64
    %519 = builtin.unrealized_conversion_cast %436 : index to i64
    %520 = llvm.mlir.constant(12544 : index) : i64
    %521 = llvm.mul %519, %520  : i64
    %522 = llvm.add %518, %521  : i64
    %523 = builtin.unrealized_conversion_cast %440 : index to i64
    %524 = llvm.mlir.constant(112 : index) : i64
    %525 = llvm.mul %523, %524  : i64
    %526 = llvm.add %522, %525  : i64
    %527 = builtin.unrealized_conversion_cast %444 : index to i64
    %528 = llvm.add %526, %527  : i64
    %529 = llvm.getelementptr %515[%528] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %530 = builtin.unrealized_conversion_cast %529 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %531 = llvm.extractvalue %472[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %532 = llvm.extractvalue %494[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %533 = llvm.extractvalue %512[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %534 = llvm.extractvalue %530[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.call @forward_kernel_2(%531, %532, %533, %534) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> ()
    %535 = llvm.add %445, %28  : i64
    %536 = builtin.unrealized_conversion_cast %535 : i64 to index
    llvm.br ^bb25(%535 : i64)
  ^bb27:  // pred: ^bb25
    %537 = llvm.add %441, %35  : i64
    %538 = builtin.unrealized_conversion_cast %537 : i64 to index
    llvm.br ^bb23(%537 : i64)
  ^bb28:  // pred: ^bb23
    %539 = llvm.add %437, %35  : i64
    %540 = builtin.unrealized_conversion_cast %539 : i64 to index
    llvm.br ^bb21(%539 : i64)
  ^bb29:  // pred: ^bb21
    %541 = llvm.add %433, %35  : i64
    %542 = builtin.unrealized_conversion_cast %541 : i64 to index
    llvm.br ^bb19(%541 : i64)
  ^bb30:  // pred: ^bb19
    %543 = llvm.mlir.constant(1 : index) : i64
    %544 = llvm.mlir.constant(64 : index) : i64
    %545 = llvm.mlir.constant(112 : index) : i64
    %546 = llvm.mlir.constant(112 : index) : i64
    %547 = llvm.mlir.constant(1 : index) : i64
    %548 = llvm.mlir.constant(12544 : index) : i64
    %549 = llvm.mlir.constant(802816 : index) : i64
    %550 = llvm.mlir.constant(802816 : index) : i64
    %551 = llvm.mlir.null : !llvm.ptr
    %552 = llvm.getelementptr %551[%550] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %553 = llvm.ptrtoint %552 : !llvm.ptr to i64
    %554 = llvm.mlir.constant(64 : index) : i64
    %555 = llvm.add %553, %554  : i64
    %556 = llvm.call @malloc(%555) : (i64) -> !llvm.ptr
    %557 = llvm.ptrtoint %556 : !llvm.ptr to i64
    %558 = llvm.mlir.constant(1 : index) : i64
    %559 = llvm.sub %554, %558  : i64
    %560 = llvm.add %557, %559  : i64
    %561 = llvm.urem %560, %554  : i64
    %562 = llvm.sub %560, %561  : i64
    %563 = llvm.inttoptr %562 : i64 to !llvm.ptr
    %564 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %565 = llvm.insertvalue %556, %564[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %566 = llvm.insertvalue %563, %565[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %567 = llvm.mlir.constant(0 : index) : i64
    %568 = llvm.insertvalue %567, %566[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %569 = llvm.insertvalue %543, %568[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %570 = llvm.insertvalue %544, %569[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %571 = llvm.insertvalue %545, %570[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %572 = llvm.insertvalue %546, %571[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %573 = llvm.insertvalue %549, %572[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %574 = llvm.insertvalue %548, %573[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %575 = llvm.insertvalue %546, %574[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %576 = llvm.insertvalue %547, %575[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %577 = builtin.unrealized_conversion_cast %576 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> to memref<1x64x112x112xf32>
    llvm.br ^bb31(%36 : i64)
  ^bb31(%578: i64):  // 2 preds: ^bb30, ^bb38
    %579 = builtin.unrealized_conversion_cast %578 : i64 to index
    %580 = builtin.unrealized_conversion_cast %579 : index to i64
    %581 = llvm.icmp "slt" %580, %35 : i64
    llvm.cond_br %581, ^bb32, ^bb39
  ^bb32:  // pred: ^bb31
    llvm.br ^bb33(%36 : i64)
  ^bb33(%582: i64):  // 2 preds: ^bb32, ^bb37
    %583 = builtin.unrealized_conversion_cast %582 : i64 to index
    %584 = builtin.unrealized_conversion_cast %583 : index to i64
    %585 = llvm.icmp "slt" %584, %31 : i64
    llvm.cond_br %585, ^bb34, ^bb38
  ^bb34:  // pred: ^bb33
    llvm.br ^bb35(%36 : i64)
  ^bb35(%586: i64):  // 2 preds: ^bb34, ^bb36
    %587 = builtin.unrealized_conversion_cast %586 : i64 to index
    %588 = builtin.unrealized_conversion_cast %587 : index to i64
    %589 = llvm.icmp "slt" %588, %30 : i64
    llvm.cond_br %589, ^bb36, ^bb37
  ^bb36:  // pred: ^bb35
    %590 = llvm.mlir.constant(0 : index) : i64
    %591 = builtin.unrealized_conversion_cast %590 : i64 to index
    %592 = llvm.mlir.constant(0 : index) : i64
    %593 = builtin.unrealized_conversion_cast %592 : i64 to index
    %594 = llvm.extractvalue %410[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %595 = builtin.unrealized_conversion_cast %591 : index to i64
    %596 = llvm.mlir.constant(802816 : index) : i64
    %597 = llvm.mul %595, %596  : i64
    %598 = builtin.unrealized_conversion_cast %583 : index to i64
    %599 = llvm.mlir.constant(12544 : index) : i64
    %600 = llvm.mul %598, %599  : i64
    %601 = llvm.add %597, %600  : i64
    %602 = builtin.unrealized_conversion_cast %587 : index to i64
    %603 = llvm.mlir.constant(112 : index) : i64
    %604 = llvm.mul %602, %603  : i64
    %605 = llvm.add %601, %604  : i64
    %606 = builtin.unrealized_conversion_cast %593 : index to i64
    %607 = llvm.add %605, %606  : i64
    %608 = llvm.getelementptr %594[%607] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %609 = builtin.unrealized_conversion_cast %608 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %610 = llvm.extractvalue %116[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %611 = builtin.unrealized_conversion_cast %583 : index to i64
    %612 = llvm.getelementptr %610[%611] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %613 = builtin.unrealized_conversion_cast %612 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %614 = llvm.extractvalue %133[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %615 = builtin.unrealized_conversion_cast %583 : index to i64
    %616 = llvm.getelementptr %614[%615] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %617 = builtin.unrealized_conversion_cast %616 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %618 = llvm.extractvalue %82[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %619 = builtin.unrealized_conversion_cast %583 : index to i64
    %620 = llvm.getelementptr %618[%619] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %621 = builtin.unrealized_conversion_cast %620 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %622 = llvm.extractvalue %99[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %623 = builtin.unrealized_conversion_cast %583 : index to i64
    %624 = llvm.getelementptr %622[%623] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %625 = builtin.unrealized_conversion_cast %624 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %626 = llvm.mlir.constant(0 : index) : i64
    %627 = builtin.unrealized_conversion_cast %626 : i64 to index
    %628 = llvm.mlir.constant(0 : index) : i64
    %629 = builtin.unrealized_conversion_cast %628 : i64 to index
    %630 = llvm.extractvalue %576[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %631 = builtin.unrealized_conversion_cast %627 : index to i64
    %632 = llvm.mlir.constant(802816 : index) : i64
    %633 = llvm.mul %631, %632  : i64
    %634 = builtin.unrealized_conversion_cast %583 : index to i64
    %635 = llvm.mlir.constant(12544 : index) : i64
    %636 = llvm.mul %634, %635  : i64
    %637 = llvm.add %633, %636  : i64
    %638 = builtin.unrealized_conversion_cast %587 : index to i64
    %639 = llvm.mlir.constant(112 : index) : i64
    %640 = llvm.mul %638, %639  : i64
    %641 = llvm.add %637, %640  : i64
    %642 = builtin.unrealized_conversion_cast %629 : index to i64
    %643 = llvm.add %641, %642  : i64
    %644 = llvm.getelementptr %630[%643] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %645 = builtin.unrealized_conversion_cast %644 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %646 = llvm.extractvalue %609[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %647 = llvm.extractvalue %613[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %648 = llvm.extractvalue %617[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %649 = llvm.extractvalue %621[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %650 = llvm.extractvalue %625[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %651 = llvm.extractvalue %645[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.call @forward_kernel_3(%646, %647, %648, %649, %650, %651) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> ()
    %652 = llvm.add %588, %29  : i64
    %653 = builtin.unrealized_conversion_cast %652 : i64 to index
    llvm.br ^bb35(%652 : i64)
  ^bb37:  // pred: ^bb35
    %654 = llvm.add %584, %35  : i64
    %655 = builtin.unrealized_conversion_cast %654 : i64 to index
    llvm.br ^bb33(%654 : i64)
  ^bb38:  // pred: ^bb33
    %656 = llvm.add %580, %35  : i64
    %657 = builtin.unrealized_conversion_cast %656 : i64 to index
    llvm.br ^bb31(%656 : i64)
  ^bb39:  // pred: ^bb31
    %658 = llvm.mlir.constant(1 : index) : i64
    %659 = llvm.mlir.constant(64 : index) : i64
    %660 = llvm.mlir.constant(112 : index) : i64
    %661 = llvm.mlir.constant(112 : index) : i64
    %662 = llvm.mlir.constant(1 : index) : i64
    %663 = llvm.mlir.constant(12544 : index) : i64
    %664 = llvm.mlir.constant(802816 : index) : i64
    %665 = llvm.mlir.constant(802816 : index) : i64
    %666 = llvm.mlir.null : !llvm.ptr
    %667 = llvm.getelementptr %666[%665] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %668 = llvm.ptrtoint %667 : !llvm.ptr to i64
    %669 = llvm.mlir.constant(64 : index) : i64
    %670 = llvm.add %668, %669  : i64
    %671 = llvm.call @malloc(%670) : (i64) -> !llvm.ptr
    %672 = llvm.ptrtoint %671 : !llvm.ptr to i64
    %673 = llvm.mlir.constant(1 : index) : i64
    %674 = llvm.sub %669, %673  : i64
    %675 = llvm.add %672, %674  : i64
    %676 = llvm.urem %675, %669  : i64
    %677 = llvm.sub %675, %676  : i64
    %678 = llvm.inttoptr %677 : i64 to !llvm.ptr
    %679 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %680 = llvm.insertvalue %671, %679[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %681 = llvm.insertvalue %678, %680[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %682 = llvm.mlir.constant(0 : index) : i64
    %683 = llvm.insertvalue %682, %681[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %684 = llvm.insertvalue %658, %683[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %685 = llvm.insertvalue %659, %684[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %686 = llvm.insertvalue %660, %685[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %687 = llvm.insertvalue %661, %686[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %688 = llvm.insertvalue %664, %687[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %689 = llvm.insertvalue %663, %688[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %690 = llvm.insertvalue %661, %689[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %691 = llvm.insertvalue %662, %690[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %692 = builtin.unrealized_conversion_cast %691 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> to memref<1x64x112x112xf32>
    llvm.br ^bb40(%36 : i64)
  ^bb40(%693: i64):  // 2 preds: ^bb39, ^bb47
    %694 = builtin.unrealized_conversion_cast %693 : i64 to index
    %695 = builtin.unrealized_conversion_cast %694 : index to i64
    %696 = llvm.icmp "slt" %695, %35 : i64
    llvm.cond_br %696, ^bb41, ^bb48
  ^bb41:  // pred: ^bb40
    llvm.br ^bb42(%36 : i64)
  ^bb42(%697: i64):  // 2 preds: ^bb41, ^bb46
    %698 = builtin.unrealized_conversion_cast %697 : i64 to index
    %699 = builtin.unrealized_conversion_cast %698 : index to i64
    %700 = llvm.icmp "slt" %699, %31 : i64
    llvm.cond_br %700, ^bb43, ^bb47
  ^bb43:  // pred: ^bb42
    llvm.br ^bb44(%36 : i64)
  ^bb44(%701: i64):  // 2 preds: ^bb43, ^bb45
    %702 = builtin.unrealized_conversion_cast %701 : i64 to index
    %703 = builtin.unrealized_conversion_cast %702 : index to i64
    %704 = llvm.icmp "slt" %703, %30 : i64
    llvm.cond_br %704, ^bb45, ^bb46
  ^bb45:  // pred: ^bb44
    %705 = llvm.mlir.constant(0 : index) : i64
    %706 = builtin.unrealized_conversion_cast %705 : i64 to index
    %707 = llvm.mlir.constant(0 : index) : i64
    %708 = builtin.unrealized_conversion_cast %707 : i64 to index
    %709 = llvm.extractvalue %576[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %710 = builtin.unrealized_conversion_cast %706 : index to i64
    %711 = llvm.mlir.constant(802816 : index) : i64
    %712 = llvm.mul %710, %711  : i64
    %713 = builtin.unrealized_conversion_cast %698 : index to i64
    %714 = llvm.mlir.constant(12544 : index) : i64
    %715 = llvm.mul %713, %714  : i64
    %716 = llvm.add %712, %715  : i64
    %717 = builtin.unrealized_conversion_cast %702 : index to i64
    %718 = llvm.mlir.constant(112 : index) : i64
    %719 = llvm.mul %717, %718  : i64
    %720 = llvm.add %716, %719  : i64
    %721 = builtin.unrealized_conversion_cast %708 : index to i64
    %722 = llvm.add %720, %721  : i64
    %723 = llvm.getelementptr %709[%722] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %724 = builtin.unrealized_conversion_cast %723 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %725 = llvm.mlir.constant(0 : index) : i64
    %726 = builtin.unrealized_conversion_cast %725 : i64 to index
    %727 = llvm.mlir.constant(0 : index) : i64
    %728 = builtin.unrealized_conversion_cast %727 : i64 to index
    %729 = llvm.extractvalue %691[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %730 = builtin.unrealized_conversion_cast %726 : index to i64
    %731 = llvm.mlir.constant(802816 : index) : i64
    %732 = llvm.mul %730, %731  : i64
    %733 = builtin.unrealized_conversion_cast %698 : index to i64
    %734 = llvm.mlir.constant(12544 : index) : i64
    %735 = llvm.mul %733, %734  : i64
    %736 = llvm.add %732, %735  : i64
    %737 = builtin.unrealized_conversion_cast %702 : index to i64
    %738 = llvm.mlir.constant(112 : index) : i64
    %739 = llvm.mul %737, %738  : i64
    %740 = llvm.add %736, %739  : i64
    %741 = builtin.unrealized_conversion_cast %728 : index to i64
    %742 = llvm.add %740, %741  : i64
    %743 = llvm.getelementptr %729[%742] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %744 = builtin.unrealized_conversion_cast %743 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %745 = llvm.extractvalue %724[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %746 = llvm.extractvalue %744[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.call @forward_kernel_4(%745, %746) : (!llvm.ptr, !llvm.ptr) -> ()
    %747 = llvm.add %703, %29  : i64
    %748 = builtin.unrealized_conversion_cast %747 : i64 to index
    llvm.br ^bb44(%747 : i64)
  ^bb46:  // pred: ^bb44
    %749 = llvm.add %699, %35  : i64
    %750 = builtin.unrealized_conversion_cast %749 : i64 to index
    llvm.br ^bb42(%749 : i64)
  ^bb47:  // pred: ^bb42
    %751 = llvm.add %695, %35  : i64
    %752 = builtin.unrealized_conversion_cast %751 : i64 to index
    llvm.br ^bb40(%751 : i64)
  ^bb48:  // pred: ^bb40
    %753 = llvm.mlir.constant(1 : index) : i64
    %754 = llvm.mlir.constant(64 : index) : i64
    %755 = llvm.mlir.constant(114 : index) : i64
    %756 = llvm.mlir.constant(114 : index) : i64
    %757 = llvm.mlir.constant(1 : index) : i64
    %758 = llvm.mlir.constant(12996 : index) : i64
    %759 = llvm.mlir.constant(831744 : index) : i64
    %760 = llvm.mlir.constant(831744 : index) : i64
    %761 = llvm.mlir.null : !llvm.ptr
    %762 = llvm.getelementptr %761[%760] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %763 = llvm.ptrtoint %762 : !llvm.ptr to i64
    %764 = llvm.mlir.constant(64 : index) : i64
    %765 = llvm.add %763, %764  : i64
    %766 = llvm.call @malloc(%765) : (i64) -> !llvm.ptr
    %767 = llvm.ptrtoint %766 : !llvm.ptr to i64
    %768 = llvm.mlir.constant(1 : index) : i64
    %769 = llvm.sub %764, %768  : i64
    %770 = llvm.add %767, %769  : i64
    %771 = llvm.urem %770, %764  : i64
    %772 = llvm.sub %770, %771  : i64
    %773 = llvm.inttoptr %772 : i64 to !llvm.ptr
    %774 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %775 = llvm.insertvalue %766, %774[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %776 = llvm.insertvalue %773, %775[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %777 = llvm.mlir.constant(0 : index) : i64
    %778 = llvm.insertvalue %777, %776[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %779 = llvm.insertvalue %753, %778[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %780 = llvm.insertvalue %754, %779[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %781 = llvm.insertvalue %755, %780[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %782 = llvm.insertvalue %756, %781[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %783 = llvm.insertvalue %759, %782[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %784 = llvm.insertvalue %758, %783[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %785 = llvm.insertvalue %756, %784[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %786 = llvm.insertvalue %757, %785[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %787 = builtin.unrealized_conversion_cast %786 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> to memref<1x64x114x114xf32>
    llvm.br ^bb49(%36 : i64)
  ^bb49(%788: i64):  // 2 preds: ^bb48, ^bb56
    %789 = builtin.unrealized_conversion_cast %788 : i64 to index
    %790 = builtin.unrealized_conversion_cast %789 : index to i64
    %791 = llvm.icmp "slt" %790, %35 : i64
    llvm.cond_br %791, ^bb50, ^bb57
  ^bb50:  // pred: ^bb49
    llvm.br ^bb51(%36 : i64)
  ^bb51(%792: i64):  // 2 preds: ^bb50, ^bb55
    %793 = builtin.unrealized_conversion_cast %792 : i64 to index
    %794 = builtin.unrealized_conversion_cast %793 : index to i64
    %795 = llvm.icmp "slt" %794, %31 : i64
    llvm.cond_br %795, ^bb52, ^bb56
  ^bb52:  // pred: ^bb51
    llvm.br ^bb53(%36 : i64)
  ^bb53(%796: i64):  // 2 preds: ^bb52, ^bb54
    %797 = builtin.unrealized_conversion_cast %796 : i64 to index
    %798 = builtin.unrealized_conversion_cast %797 : index to i64
    %799 = llvm.icmp "slt" %798, %27 : i64
    llvm.cond_br %799, ^bb54, ^bb55
  ^bb54:  // pred: ^bb53
    %800 = llvm.mlir.constant(0 : index) : i64
    %801 = builtin.unrealized_conversion_cast %800 : i64 to index
    %802 = llvm.mlir.constant(0 : index) : i64
    %803 = builtin.unrealized_conversion_cast %802 : i64 to index
    %804 = llvm.extractvalue %786[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %805 = builtin.unrealized_conversion_cast %801 : index to i64
    %806 = llvm.mlir.constant(831744 : index) : i64
    %807 = llvm.mul %805, %806  : i64
    %808 = builtin.unrealized_conversion_cast %793 : index to i64
    %809 = llvm.mlir.constant(12996 : index) : i64
    %810 = llvm.mul %808, %809  : i64
    %811 = llvm.add %807, %810  : i64
    %812 = builtin.unrealized_conversion_cast %797 : index to i64
    %813 = llvm.mlir.constant(114 : index) : i64
    %814 = llvm.mul %812, %813  : i64
    %815 = llvm.add %811, %814  : i64
    %816 = builtin.unrealized_conversion_cast %803 : index to i64
    %817 = llvm.add %815, %816  : i64
    %818 = llvm.getelementptr %804[%817] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %819 = builtin.unrealized_conversion_cast %818 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %820 = llvm.extractvalue %819[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.call @forward_kernel_5(%820) : (!llvm.ptr) -> ()
    %821 = llvm.add %798, %26  : i64
    %822 = builtin.unrealized_conversion_cast %821 : i64 to index
    llvm.br ^bb53(%821 : i64)
  ^bb55:  // pred: ^bb53
    %823 = llvm.add %794, %35  : i64
    %824 = builtin.unrealized_conversion_cast %823 : i64 to index
    llvm.br ^bb51(%823 : i64)
  ^bb56:  // pred: ^bb51
    %825 = llvm.add %790, %35  : i64
    %826 = builtin.unrealized_conversion_cast %825 : i64 to index
    llvm.br ^bb49(%825 : i64)
  ^bb57:  // pred: ^bb49
    %827 = llvm.mlir.constant(1 : index) : i64
    %828 = llvm.mlir.constant(64 : index) : i64
    %829 = llvm.mlir.constant(114 : index) : i64
    %830 = llvm.mlir.constant(114 : index) : i64
    %831 = llvm.mlir.constant(1 : index) : i64
    %832 = llvm.mlir.constant(12996 : index) : i64
    %833 = llvm.mlir.constant(831744 : index) : i64
    %834 = llvm.mlir.constant(831744 : index) : i64
    %835 = llvm.mlir.null : !llvm.ptr
    %836 = llvm.getelementptr %835[%834] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %837 = llvm.ptrtoint %836 : !llvm.ptr to i64
    %838 = llvm.mlir.constant(64 : index) : i64
    %839 = llvm.add %837, %838  : i64
    %840 = llvm.call @malloc(%839) : (i64) -> !llvm.ptr
    %841 = llvm.ptrtoint %840 : !llvm.ptr to i64
    %842 = llvm.mlir.constant(1 : index) : i64
    %843 = llvm.sub %838, %842  : i64
    %844 = llvm.add %841, %843  : i64
    %845 = llvm.urem %844, %838  : i64
    %846 = llvm.sub %844, %845  : i64
    %847 = llvm.inttoptr %846 : i64 to !llvm.ptr
    %848 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %849 = llvm.insertvalue %840, %848[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %850 = llvm.insertvalue %847, %849[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %851 = llvm.mlir.constant(0 : index) : i64
    %852 = llvm.insertvalue %851, %850[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %853 = llvm.insertvalue %827, %852[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %854 = llvm.insertvalue %828, %853[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %855 = llvm.insertvalue %829, %854[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %856 = llvm.insertvalue %830, %855[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %857 = llvm.insertvalue %833, %856[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %858 = llvm.insertvalue %832, %857[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %859 = llvm.insertvalue %830, %858[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %860 = llvm.insertvalue %831, %859[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %861 = builtin.unrealized_conversion_cast %860 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> to memref<1x64x114x114xf32>
    %862 = llvm.mlir.constant(1 : index) : i64
    %863 = llvm.extractvalue %786[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %864 = llvm.mul %862, %863  : i64
    %865 = llvm.extractvalue %786[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %866 = llvm.mul %864, %865  : i64
    %867 = llvm.extractvalue %786[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %868 = llvm.mul %866, %867  : i64
    %869 = llvm.extractvalue %786[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %870 = llvm.mul %868, %869  : i64
    %871 = llvm.mlir.null : !llvm.ptr
    %872 = llvm.getelementptr %871[1] : (!llvm.ptr) -> !llvm.ptr, f32
    %873 = llvm.ptrtoint %872 : !llvm.ptr to i64
    %874 = llvm.mul %870, %873  : i64
    %875 = llvm.extractvalue %786[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %876 = llvm.extractvalue %786[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %877 = llvm.getelementptr %875[%876] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %878 = llvm.extractvalue %860[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %879 = llvm.extractvalue %860[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %880 = llvm.getelementptr %878[%879] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    "llvm.intr.memcpy"(%880, %877, %874) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> ()
    %881 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %882 = llvm.extractvalue %860[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %883 = llvm.extractvalue %860[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %884 = llvm.insertvalue %882, %881[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %885 = llvm.insertvalue %883, %884[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %886 = llvm.mlir.constant(115 : index) : i64
    %887 = llvm.insertvalue %886, %885[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %888 = llvm.mlir.constant(1 : index) : i64
    %889 = llvm.insertvalue %888, %887[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %890 = llvm.mlir.constant(831744 : index) : i64
    %891 = llvm.insertvalue %890, %889[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %892 = llvm.mlir.constant(64 : index) : i64
    %893 = llvm.insertvalue %892, %891[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %894 = llvm.mlir.constant(12996 : index) : i64
    %895 = llvm.insertvalue %894, %893[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %896 = llvm.mlir.constant(112 : index) : i64
    %897 = llvm.insertvalue %896, %895[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %898 = llvm.mlir.constant(114 : index) : i64
    %899 = llvm.insertvalue %898, %897[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %900 = llvm.mlir.constant(112 : index) : i64
    %901 = llvm.insertvalue %900, %899[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %902 = llvm.mlir.constant(1 : index) : i64
    %903 = llvm.insertvalue %902, %901[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %904 = llvm.intr.stacksave : !llvm.ptr
    %905 = llvm.mlir.constant(4 : i64) : i64
    %906 = llvm.mlir.constant(1 : index) : i64
    %907 = llvm.alloca %906 x !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> : (i64) -> !llvm.ptr
    llvm.store %691, %907 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>, !llvm.ptr
    %908 = llvm.mlir.undef : !llvm.struct<(i64, ptr)>
    %909 = llvm.insertvalue %905, %908[0] : !llvm.struct<(i64, ptr)> 
    %910 = llvm.insertvalue %907, %909[1] : !llvm.struct<(i64, ptr)> 
    %911 = llvm.mlir.constant(4 : i64) : i64
    %912 = llvm.mlir.constant(1 : index) : i64
    %913 = llvm.alloca %912 x !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> : (i64) -> !llvm.ptr
    llvm.store %903, %913 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>, !llvm.ptr
    %914 = llvm.mlir.undef : !llvm.struct<(i64, ptr)>
    %915 = llvm.insertvalue %911, %914[0] : !llvm.struct<(i64, ptr)> 
    %916 = llvm.insertvalue %913, %915[1] : !llvm.struct<(i64, ptr)> 
    %917 = llvm.mlir.constant(1 : index) : i64
    %918 = llvm.alloca %917 x !llvm.struct<(i64, ptr)> : (i64) -> !llvm.ptr
    llvm.store %910, %918 : !llvm.struct<(i64, ptr)>, !llvm.ptr
    %919 = llvm.alloca %917 x !llvm.struct<(i64, ptr)> : (i64) -> !llvm.ptr
    llvm.store %916, %919 : !llvm.struct<(i64, ptr)>, !llvm.ptr
    %920 = llvm.mlir.constant(4 : index) : i64
    llvm.call @memrefCopy(%920, %918, %919) : (i64, !llvm.ptr, !llvm.ptr) -> ()
    llvm.intr.stackrestore %904 : !llvm.ptr
    %921 = llvm.mlir.constant(1 : index) : i64
    %922 = llvm.mlir.constant(64 : index) : i64
    %923 = llvm.mlir.constant(56 : index) : i64
    %924 = llvm.mlir.constant(56 : index) : i64
    %925 = llvm.mlir.constant(1 : index) : i64
    %926 = llvm.mlir.constant(3136 : index) : i64
    %927 = llvm.mlir.constant(200704 : index) : i64
    %928 = llvm.mlir.constant(200704 : index) : i64
    %929 = llvm.mlir.null : !llvm.ptr
    %930 = llvm.getelementptr %929[%928] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %931 = llvm.ptrtoint %930 : !llvm.ptr to i64
    %932 = llvm.mlir.constant(64 : index) : i64
    %933 = llvm.add %931, %932  : i64
    %934 = llvm.call @malloc(%933) : (i64) -> !llvm.ptr
    %935 = llvm.ptrtoint %934 : !llvm.ptr to i64
    %936 = llvm.mlir.constant(1 : index) : i64
    %937 = llvm.sub %932, %936  : i64
    %938 = llvm.add %935, %937  : i64
    %939 = llvm.urem %938, %932  : i64
    %940 = llvm.sub %938, %939  : i64
    %941 = llvm.inttoptr %940 : i64 to !llvm.ptr
    %942 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %943 = llvm.insertvalue %934, %942[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %944 = llvm.insertvalue %941, %943[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %945 = llvm.mlir.constant(0 : index) : i64
    %946 = llvm.insertvalue %945, %944[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %947 = llvm.insertvalue %921, %946[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %948 = llvm.insertvalue %922, %947[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %949 = llvm.insertvalue %923, %948[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %950 = llvm.insertvalue %924, %949[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %951 = llvm.insertvalue %927, %950[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %952 = llvm.insertvalue %926, %951[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %953 = llvm.insertvalue %924, %952[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %954 = llvm.insertvalue %925, %953[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %955 = builtin.unrealized_conversion_cast %954 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> to memref<1x64x56x56xf32>
    llvm.br ^bb58(%36 : i64)
  ^bb58(%956: i64):  // 2 preds: ^bb57, ^bb65
    %957 = builtin.unrealized_conversion_cast %956 : i64 to index
    %958 = builtin.unrealized_conversion_cast %957 : index to i64
    %959 = llvm.icmp "slt" %958, %35 : i64
    llvm.cond_br %959, ^bb59, ^bb66
  ^bb59:  // pred: ^bb58
    llvm.br ^bb60(%36 : i64)
  ^bb60(%960: i64):  // 2 preds: ^bb59, ^bb64
    %961 = builtin.unrealized_conversion_cast %960 : i64 to index
    %962 = builtin.unrealized_conversion_cast %961 : index to i64
    %963 = llvm.icmp "slt" %962, %31 : i64
    llvm.cond_br %963, ^bb61, ^bb65
  ^bb61:  // pred: ^bb60
    llvm.br ^bb62(%36 : i64)
  ^bb62(%964: i64):  // 2 preds: ^bb61, ^bb63
    %965 = builtin.unrealized_conversion_cast %964 : i64 to index
    %966 = builtin.unrealized_conversion_cast %965 : index to i64
    %967 = llvm.icmp "slt" %966, %25 : i64
    llvm.cond_br %967, ^bb63, ^bb64
  ^bb63:  // pred: ^bb62
    %968 = llvm.mlir.constant(0 : index) : i64
    %969 = builtin.unrealized_conversion_cast %968 : i64 to index
    %970 = llvm.mlir.constant(0 : index) : i64
    %971 = builtin.unrealized_conversion_cast %970 : i64 to index
    %972 = llvm.extractvalue %954[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %973 = builtin.unrealized_conversion_cast %969 : index to i64
    %974 = llvm.mlir.constant(200704 : index) : i64
    %975 = llvm.mul %973, %974  : i64
    %976 = builtin.unrealized_conversion_cast %961 : index to i64
    %977 = llvm.mlir.constant(3136 : index) : i64
    %978 = llvm.mul %976, %977  : i64
    %979 = llvm.add %975, %978  : i64
    %980 = builtin.unrealized_conversion_cast %965 : index to i64
    %981 = llvm.mlir.constant(56 : index) : i64
    %982 = llvm.mul %980, %981  : i64
    %983 = llvm.add %979, %982  : i64
    %984 = builtin.unrealized_conversion_cast %971 : index to i64
    %985 = llvm.add %983, %984  : i64
    %986 = llvm.getelementptr %972[%985] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %987 = builtin.unrealized_conversion_cast %986 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %988 = llvm.extractvalue %987[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.call @forward_kernel_6(%988) : (!llvm.ptr) -> ()
    %989 = llvm.add %966, %24  : i64
    %990 = builtin.unrealized_conversion_cast %989 : i64 to index
    llvm.br ^bb62(%989 : i64)
  ^bb64:  // pred: ^bb62
    %991 = llvm.add %962, %35  : i64
    %992 = builtin.unrealized_conversion_cast %991 : i64 to index
    llvm.br ^bb60(%991 : i64)
  ^bb65:  // pred: ^bb60
    %993 = llvm.add %958, %35  : i64
    %994 = builtin.unrealized_conversion_cast %993 : i64 to index
    llvm.br ^bb58(%993 : i64)
  ^bb66:  // pred: ^bb58
    %995 = llvm.mlir.constant(1 : index) : i64
    %996 = llvm.mlir.constant(64 : index) : i64
    %997 = llvm.mlir.constant(56 : index) : i64
    %998 = llvm.mlir.constant(56 : index) : i64
    %999 = llvm.mlir.constant(1 : index) : i64
    %1000 = llvm.mlir.constant(3136 : index) : i64
    %1001 = llvm.mlir.constant(200704 : index) : i64
    %1002 = llvm.mlir.constant(200704 : index) : i64
    %1003 = llvm.mlir.null : !llvm.ptr
    %1004 = llvm.getelementptr %1003[%1002] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %1005 = llvm.ptrtoint %1004 : !llvm.ptr to i64
    %1006 = llvm.mlir.constant(64 : index) : i64
    %1007 = llvm.add %1005, %1006  : i64
    %1008 = llvm.call @malloc(%1007) : (i64) -> !llvm.ptr
    %1009 = llvm.ptrtoint %1008 : !llvm.ptr to i64
    %1010 = llvm.mlir.constant(1 : index) : i64
    %1011 = llvm.sub %1006, %1010  : i64
    %1012 = llvm.add %1009, %1011  : i64
    %1013 = llvm.urem %1012, %1006  : i64
    %1014 = llvm.sub %1012, %1013  : i64
    %1015 = llvm.inttoptr %1014 : i64 to !llvm.ptr
    %1016 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %1017 = llvm.insertvalue %1008, %1016[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1018 = llvm.insertvalue %1015, %1017[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1019 = llvm.mlir.constant(0 : index) : i64
    %1020 = llvm.insertvalue %1019, %1018[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1021 = llvm.insertvalue %995, %1020[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1022 = llvm.insertvalue %996, %1021[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1023 = llvm.insertvalue %997, %1022[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1024 = llvm.insertvalue %998, %1023[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1025 = llvm.insertvalue %1001, %1024[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1026 = llvm.insertvalue %1000, %1025[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1027 = llvm.insertvalue %998, %1026[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1028 = llvm.insertvalue %999, %1027[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1029 = builtin.unrealized_conversion_cast %1028 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> to memref<1x64x56x56xf32>
    %1030 = llvm.mlir.constant(1 : index) : i64
    %1031 = llvm.extractvalue %954[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1032 = llvm.mul %1030, %1031  : i64
    %1033 = llvm.extractvalue %954[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1034 = llvm.mul %1032, %1033  : i64
    %1035 = llvm.extractvalue %954[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1036 = llvm.mul %1034, %1035  : i64
    %1037 = llvm.extractvalue %954[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1038 = llvm.mul %1036, %1037  : i64
    %1039 = llvm.mlir.null : !llvm.ptr
    %1040 = llvm.getelementptr %1039[1] : (!llvm.ptr) -> !llvm.ptr, f32
    %1041 = llvm.ptrtoint %1040 : !llvm.ptr to i64
    %1042 = llvm.mul %1038, %1041  : i64
    %1043 = llvm.extractvalue %954[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1044 = llvm.extractvalue %954[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1045 = llvm.getelementptr %1043[%1044] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %1046 = llvm.extractvalue %1028[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1047 = llvm.extractvalue %1028[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1048 = llvm.getelementptr %1046[%1047] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    "llvm.intr.memcpy"(%1048, %1045, %1042) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> ()
    llvm.br ^bb67(%36 : i64)
  ^bb67(%1049: i64):  // 2 preds: ^bb66, ^bb74
    %1050 = builtin.unrealized_conversion_cast %1049 : i64 to index
    %1051 = builtin.unrealized_conversion_cast %1050 : index to i64
    %1052 = llvm.icmp "slt" %1051, %35 : i64
    llvm.cond_br %1052, ^bb68, ^bb75
  ^bb68:  // pred: ^bb67
    llvm.br ^bb69(%36 : i64)
  ^bb69(%1053: i64):  // 2 preds: ^bb68, ^bb73
    %1054 = builtin.unrealized_conversion_cast %1053 : i64 to index
    %1055 = builtin.unrealized_conversion_cast %1054 : index to i64
    %1056 = llvm.icmp "slt" %1055, %31 : i64
    llvm.cond_br %1056, ^bb70, ^bb74
  ^bb70:  // pred: ^bb69
    llvm.br ^bb71(%36 : i64)
  ^bb71(%1057: i64):  // 2 preds: ^bb70, ^bb72
    %1058 = builtin.unrealized_conversion_cast %1057 : i64 to index
    %1059 = builtin.unrealized_conversion_cast %1058 : index to i64
    %1060 = llvm.icmp "slt" %1059, %25 : i64
    llvm.cond_br %1060, ^bb72, ^bb73
  ^bb72:  // pred: ^bb71
    %1061 = llvm.mlir.constant(0 : index) : i64
    %1062 = builtin.unrealized_conversion_cast %1061 : i64 to index
    %1063 = llvm.mlir.constant(2 : index) : i64
    %1064 = llvm.mul %1057, %1063  : i64
    %1065 = builtin.unrealized_conversion_cast %1064 : i64 to index
    %1066 = llvm.mlir.constant(0 : index) : i64
    %1067 = builtin.unrealized_conversion_cast %1066 : i64 to index
    %1068 = llvm.extractvalue %860[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1069 = builtin.unrealized_conversion_cast %1062 : index to i64
    %1070 = llvm.mlir.constant(831744 : index) : i64
    %1071 = llvm.mul %1069, %1070  : i64
    %1072 = builtin.unrealized_conversion_cast %1054 : index to i64
    %1073 = llvm.mlir.constant(12996 : index) : i64
    %1074 = llvm.mul %1072, %1073  : i64
    %1075 = llvm.add %1071, %1074  : i64
    %1076 = builtin.unrealized_conversion_cast %1065 : index to i64
    %1077 = llvm.mlir.constant(114 : index) : i64
    %1078 = llvm.mul %1076, %1077  : i64
    %1079 = llvm.add %1075, %1078  : i64
    %1080 = builtin.unrealized_conversion_cast %1067 : index to i64
    %1081 = llvm.add %1079, %1080  : i64
    %1082 = llvm.getelementptr %1068[%1081] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %1083 = builtin.unrealized_conversion_cast %1082 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %1084 = llvm.mlir.constant(0 : index) : i64
    %1085 = builtin.unrealized_conversion_cast %1084 : i64 to index
    %1086 = llvm.mlir.constant(0 : index) : i64
    %1087 = builtin.unrealized_conversion_cast %1086 : i64 to index
    %1088 = llvm.extractvalue %1028[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1089 = builtin.unrealized_conversion_cast %1085 : index to i64
    %1090 = llvm.mlir.constant(200704 : index) : i64
    %1091 = llvm.mul %1089, %1090  : i64
    %1092 = builtin.unrealized_conversion_cast %1054 : index to i64
    %1093 = llvm.mlir.constant(3136 : index) : i64
    %1094 = llvm.mul %1092, %1093  : i64
    %1095 = llvm.add %1091, %1094  : i64
    %1096 = builtin.unrealized_conversion_cast %1058 : index to i64
    %1097 = llvm.mlir.constant(56 : index) : i64
    %1098 = llvm.mul %1096, %1097  : i64
    %1099 = llvm.add %1095, %1098  : i64
    %1100 = builtin.unrealized_conversion_cast %1087 : index to i64
    %1101 = llvm.add %1099, %1100  : i64
    %1102 = llvm.getelementptr %1088[%1101] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %1103 = builtin.unrealized_conversion_cast %1102 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %1104 = llvm.mlir.constant(0 : index) : i64
    %1105 = builtin.unrealized_conversion_cast %1104 : i64 to index
    %1106 = llvm.mlir.constant(0 : index) : i64
    %1107 = builtin.unrealized_conversion_cast %1106 : i64 to index
    %1108 = llvm.extractvalue %1028[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1109 = builtin.unrealized_conversion_cast %1105 : index to i64
    %1110 = llvm.mlir.constant(200704 : index) : i64
    %1111 = llvm.mul %1109, %1110  : i64
    %1112 = builtin.unrealized_conversion_cast %1054 : index to i64
    %1113 = llvm.mlir.constant(3136 : index) : i64
    %1114 = llvm.mul %1112, %1113  : i64
    %1115 = llvm.add %1111, %1114  : i64
    %1116 = builtin.unrealized_conversion_cast %1058 : index to i64
    %1117 = llvm.mlir.constant(56 : index) : i64
    %1118 = llvm.mul %1116, %1117  : i64
    %1119 = llvm.add %1115, %1118  : i64
    %1120 = builtin.unrealized_conversion_cast %1107 : index to i64
    %1121 = llvm.add %1119, %1120  : i64
    %1122 = llvm.getelementptr %1108[%1121] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %1123 = builtin.unrealized_conversion_cast %1122 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %1124 = llvm.extractvalue %1083[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1125 = llvm.extractvalue %1103[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1126 = llvm.extractvalue %1123[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.call @forward_kernel_7(%1124, %1125, %1126) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> ()
    %1127 = llvm.add %1059, %23  : i64
    %1128 = builtin.unrealized_conversion_cast %1127 : i64 to index
    llvm.br ^bb71(%1127 : i64)
  ^bb73:  // pred: ^bb71
    %1129 = llvm.add %1055, %35  : i64
    %1130 = builtin.unrealized_conversion_cast %1129 : i64 to index
    llvm.br ^bb69(%1129 : i64)
  ^bb74:  // pred: ^bb69
    %1131 = llvm.add %1051, %35  : i64
    %1132 = builtin.unrealized_conversion_cast %1131 : i64 to index
    llvm.br ^bb67(%1131 : i64)
  ^bb75:  // pred: ^bb67
    %1133 = llvm.extractvalue %1028[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.return %1133 : !llvm.ptr
  }
  llvm.func @forward_kernel_0(!llvm.ptr) attributes {Kernel, forward_kernel_0}
  llvm.func @forward_kernel_1(!llvm.ptr) attributes {Kernel, forward_kernel_1}
  llvm.func @forward_kernel_2(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) attributes {Kernel, forward_kernel_2}
  llvm.func @forward_kernel_3(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) attributes {Kernel, forward_kernel_3}
  llvm.func @forward_kernel_4(!llvm.ptr, !llvm.ptr) attributes {Kernel, forward_kernel_4}
  llvm.func @forward_kernel_5(!llvm.ptr) attributes {Kernel, forward_kernel_5}
  llvm.func @forward_kernel_6(!llvm.ptr) attributes {Kernel, forward_kernel_6}
  llvm.func @forward_kernel_7(!llvm.ptr, !llvm.ptr, !llvm.ptr) attributes {Kernel, forward_kernel_7}
}


// -----// IR Dump After ConvertFuncToLLVMPass (convert-func-to-llvm) //----- //
module attributes {llvm.data_layout = "", torch.debug_module_name = "ResNet"} {
  llvm.func @memrefCopy(i64, !llvm.ptr, !llvm.ptr)
  llvm.func @malloc(i64) -> !llvm.ptr
  llvm.mlir.global private constant @__constant_64xf32_2(dense<[0.230717152, 0.253822476, -1.05429808E-6, -0.664388895, -1.65705547E-8, 0.161521927, 0.454503953, -4.301950e-07, 0.300513744, -8.005240e-06, 0.349418074, 0.311480612, -0.249529764, -3.474890e-05, 0.107726313, 0.218970656, 0.381412596, -0.529882133, -0.628644109, 0.571398079, 0.299846917, 0.584303737, 0.48202154, 0.328526348, 0.196717009, 0.194961801, 0.152145416, 0.085522361, 0.513142824, 0.0152367353, 0.166441768, 0.332394391, 0.249211237, 0.443366677, -0.280169278, -0.0203848016, -2.45068748E-7, 0.321340501, -4.9151744E-8, 0.237767309, 0.232907727, 0.315274626, 0.427762389, 0.293127537, 0.263794243, 0.675975859, 0.429100394, 0.345662743, -8.69090186E-8, 0.247294366, 0.303160846, 0.615772783, 0.39834857, 0.332067341, -0.412187815, 0.378069043, 0.178953409, 0.25747788, -0.449079722, 0.213058949, 0.569339037, 5.727430e-01, -0.402383476, 0.23406373]> : tensor<64xf32>) {addr_space = 0 : i32} : !llvm.array<64 x f32>
  llvm.mlir.global private constant @__constant_64xf32_1(dense<[0.234872743, 0.266257942, -5.10959595E-8, 0.518699706, 3.44040196E-9, 0.222385287, 0.422887057, 1.31532403E-7, 0.25093165, 1.5152026E-6, 0.316871643, 0.250491828, 0.378926098, 1.08618351E-5, 2.752640e-01, 0.236741036, 0.242021769, 0.395314813, 0.469346285, 0.2908957, 0.272684187, 0.27802828, 0.290692091, 0.206927493, 0.258990377, 0.278710574, 0.291149527, 0.316013753, 0.388891488, 0.304111898, 0.267757207, 0.210925162, 0.287084132, 0.332426429, 0.42672804, 0.373260558, 7.48037578E-8, 0.19067812, 1.47401256E-8, 0.223029822, 0.179079413, 0.248600766, 0.27399528, 0.259228647, 0.294202209, 0.299236417, 0.223688841, 0.262799472, 2.20011476E-8, 0.266098082, 0.220890298, 0.284285516, 0.330723315, 0.226809531, 0.365380913, 0.21229881, 0.239653021, 0.24949576, 0.525830686, 0.248247579, 0.295652747, 0.258776665, 0.4832564, 0.26670444]> : tensor<64xf32>) {addr_space = 0 : i32} : !llvm.array<64 x f32>
  llvm.mlir.global private constant @__constant_64xf32_0(dense<[1.01694489, 3.71674347, 5.81334356E-11, 3.28254271, 1.71074404E-13, 0.658226967, 4.37006235, 6.60045282E-12, 0.915522992, 1.93175254E-9, 4.12558556, 2.74399233, 2.8390913, 4.79658588E-8, 11.0722713, 0.500745952, 2.23128176, 4.82570696, 2.69861364, 9.36995506, 3.73391747, 5.48429585, 5.7126689, 0.445444882, 0.436275303, 7.15633583, 13.7179089, 5.25117493, 6.81737518, 1.67235756, 1.65343034, 1.23245978, 4.90762854, 3.07305121, 4.23838568, 4.99363518, 1.44646307E-12, 1.52116203, 1.03519833E-13, 0.351344079, 0.17024748, 1.42054474, 1.90848303, 2.15124035, 2.66084933, 4.84443378, 1.92971194, 1.49994361, 2.94806145E-13, 1.53064024, 0.365027189, 2.93755412, 5.46641159, 0.707924544, 3.33150721, 0.771802961, 2.40678358, 6.5213666, 4.12625027, 1.05063522, 2.95303202, 11.3656216, 4.76904678, 1.65587807]> : tensor<64xf32>) {addr_space = 0 : i32} : !llvm.array<64 x f32>
  llvm.mlir.global private constant @__constant_64xf32(dense<[0.00276811025, -0.0257689245, 2.12544663E-7, -0.0846051499, 2.11205915E-8, 4.96906461E-4, -0.0224083271, -1.15818956E-7, -4.823850e-03, 2.75073347E-7, 3.958230e-02, 0.0319936387, -0.0374896601, -1.37163477E-6, 0.00660019321, 4.378190e-03, 0.0647971481, 0.11175999, 0.0360015705, -0.0750752166, -0.03824009, 0.0843578502, -5.228700e-02, -0.0117988894, 0.00130188058, 0.0321722962, -0.0177843049, -0.0910085887, 0.113187239, -0.0416320041, 0.00873024761, 0.0296931695, -0.0705021694, -0.00348469778, 0.109771468, -0.00173411821, -5.94229412E-8, 0.0293303896, -7.85527287E-9, 0.00673204474, -0.00370999542, 0.0160279572, -0.0278826058, 0.0265925378, 0.0284745526, -0.12734659, 0.0446168408, 0.0263288375, 2.14538591E-8, -1.704500e-02, -0.00356168114, -0.0458412617, 0.0638761446, 0.0152198272, -0.0385114551, -0.0164278317, -0.016568929, 0.0560574941, -0.0803062319, -0.00266457512, -0.0417176671, 0.126112729, -0.0492369682, -0.0132609205]> : tensor<64xf32>) {addr_space = 0 : i32} : !llvm.array<64 x f32>
  llvm.mlir.global private constant @__constant_64x3x7x7xf32(dense<"tensor<64x3x7x7xf32>) {addr_space = 0 : i32} : !llvm.array<64 x array<3 x array<7 x array<7 x f32>>>>
  ml_program.global private mutable @global_seed(dense<0> : tensor<i64>) : tensor<i64>
  llvm.func @forward(%arg0: !llvm.ptr) -> !llvm.ptr {
    %0 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %1 = llvm.insertvalue %arg0, %0[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %2 = llvm.insertvalue %arg0, %1[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %3 = llvm.mlir.constant(0 : index) : i64
    %4 = llvm.insertvalue %3, %2[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %5 = llvm.mlir.constant(1 : index) : i64
    %6 = llvm.insertvalue %5, %4[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %7 = llvm.mlir.constant(150528 : index) : i64
    %8 = llvm.insertvalue %7, %6[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %9 = llvm.mlir.constant(3 : index) : i64
    %10 = llvm.insertvalue %9, %8[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %11 = llvm.mlir.constant(50176 : index) : i64
    %12 = llvm.insertvalue %11, %10[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %13 = llvm.mlir.constant(224 : index) : i64
    %14 = llvm.insertvalue %13, %12[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %15 = llvm.mlir.constant(224 : index) : i64
    %16 = llvm.insertvalue %15, %14[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %17 = llvm.mlir.constant(224 : index) : i64
    %18 = llvm.insertvalue %17, %16[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %19 = llvm.mlir.constant(1 : index) : i64
    %20 = llvm.insertvalue %19, %18[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %21 = builtin.unrealized_conversion_cast %20 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> to memref<1x3x224x224xf32>
    %22 = builtin.unrealized_conversion_cast %21 : memref<1x3x224x224xf32> to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %23 = llvm.mlir.constant(4 : index) : i64
    %24 = llvm.mlir.constant(28 : index) : i64
    %25 = llvm.mlir.constant(56 : index) : i64
    %26 = llvm.mlir.constant(6 : index) : i64
    %27 = llvm.mlir.constant(114 : index) : i64
    %28 = llvm.mlir.constant(8 : index) : i64
    %29 = llvm.mlir.constant(16 : index) : i64
    %30 = llvm.mlir.constant(112 : index) : i64
    %31 = llvm.mlir.constant(64 : index) : i64
    %32 = llvm.mlir.constant(5 : index) : i64
    %33 = llvm.mlir.constant(230 : index) : i64
    %34 = llvm.mlir.constant(3 : index) : i64
    %35 = llvm.mlir.constant(1 : index) : i64
    %36 = llvm.mlir.constant(0 : index) : i64
    %37 = builtin.unrealized_conversion_cast %36 : i64 to index
    %38 = llvm.mlir.constant(64 : index) : i64
    %39 = llvm.mlir.constant(3 : index) : i64
    %40 = llvm.mlir.constant(7 : index) : i64
    %41 = llvm.mlir.constant(7 : index) : i64
    %42 = llvm.mlir.constant(1 : index) : i64
    %43 = llvm.mlir.constant(49 : index) : i64
    %44 = llvm.mlir.constant(147 : index) : i64
    %45 = llvm.mlir.constant(9408 : index) : i64
    %46 = llvm.mlir.null : !llvm.ptr
    %47 = llvm.getelementptr %46[%45] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %48 = llvm.ptrtoint %47 : !llvm.ptr to i64
    %49 = llvm.mlir.addressof @__constant_64x3x7x7xf32 : !llvm.ptr
    %50 = llvm.getelementptr %49[0, 0, 0, 0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<64 x array<3 x array<7 x array<7 x f32>>>>
    %51 = llvm.mlir.constant(3735928559 : index) : i64
    %52 = llvm.inttoptr %51 : i64 to !llvm.ptr
    %53 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %54 = llvm.insertvalue %52, %53[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %55 = llvm.insertvalue %50, %54[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %56 = llvm.mlir.constant(0 : index) : i64
    %57 = llvm.insertvalue %56, %55[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %58 = llvm.insertvalue %38, %57[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %59 = llvm.insertvalue %39, %58[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %60 = llvm.insertvalue %40, %59[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %61 = llvm.insertvalue %41, %60[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %62 = llvm.insertvalue %44, %61[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %63 = llvm.insertvalue %43, %62[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %64 = llvm.insertvalue %41, %63[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %65 = llvm.insertvalue %42, %64[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %66 = builtin.unrealized_conversion_cast %65 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> to memref<64x3x7x7xf32>
    %67 = llvm.mlir.constant(64 : index) : i64
    %68 = llvm.mlir.constant(1 : index) : i64
    %69 = llvm.mlir.null : !llvm.ptr
    %70 = llvm.getelementptr %69[%67] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %71 = llvm.ptrtoint %70 : !llvm.ptr to i64
    %72 = llvm.mlir.addressof @__constant_64xf32 : !llvm.ptr
    %73 = llvm.getelementptr %72[0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<64 x f32>
    %74 = llvm.mlir.constant(3735928559 : index) : i64
    %75 = llvm.inttoptr %74 : i64 to !llvm.ptr
    %76 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %77 = llvm.insertvalue %75, %76[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %78 = llvm.insertvalue %73, %77[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %79 = llvm.mlir.constant(0 : index) : i64
    %80 = llvm.insertvalue %79, %78[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %81 = llvm.insertvalue %67, %80[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %82 = llvm.insertvalue %68, %81[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %83 = builtin.unrealized_conversion_cast %82 : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> to memref<64xf32>
    %84 = llvm.mlir.constant(64 : index) : i64
    %85 = llvm.mlir.constant(1 : index) : i64
    %86 = llvm.mlir.null : !llvm.ptr
    %87 = llvm.getelementptr %86[%84] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %88 = llvm.ptrtoint %87 : !llvm.ptr to i64
    %89 = llvm.mlir.addressof @__constant_64xf32_0 : !llvm.ptr
    %90 = llvm.getelementptr %89[0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<64 x f32>
    %91 = llvm.mlir.constant(3735928559 : index) : i64
    %92 = llvm.inttoptr %91 : i64 to !llvm.ptr
    %93 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %94 = llvm.insertvalue %92, %93[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %95 = llvm.insertvalue %90, %94[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %96 = llvm.mlir.constant(0 : index) : i64
    %97 = llvm.insertvalue %96, %95[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %98 = llvm.insertvalue %84, %97[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %99 = llvm.insertvalue %85, %98[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %100 = builtin.unrealized_conversion_cast %99 : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> to memref<64xf32>
    %101 = llvm.mlir.constant(64 : index) : i64
    %102 = llvm.mlir.constant(1 : index) : i64
    %103 = llvm.mlir.null : !llvm.ptr
    %104 = llvm.getelementptr %103[%101] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %105 = llvm.ptrtoint %104 : !llvm.ptr to i64
    %106 = llvm.mlir.addressof @__constant_64xf32_1 : !llvm.ptr
    %107 = llvm.getelementptr %106[0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<64 x f32>
    %108 = llvm.mlir.constant(3735928559 : index) : i64
    %109 = llvm.inttoptr %108 : i64 to !llvm.ptr
    %110 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %111 = llvm.insertvalue %109, %110[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %112 = llvm.insertvalue %107, %111[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %113 = llvm.mlir.constant(0 : index) : i64
    %114 = llvm.insertvalue %113, %112[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %115 = llvm.insertvalue %101, %114[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %116 = llvm.insertvalue %102, %115[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %117 = builtin.unrealized_conversion_cast %116 : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> to memref<64xf32>
    %118 = llvm.mlir.constant(64 : index) : i64
    %119 = llvm.mlir.constant(1 : index) : i64
    %120 = llvm.mlir.null : !llvm.ptr
    %121 = llvm.getelementptr %120[%118] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %122 = llvm.ptrtoint %121 : !llvm.ptr to i64
    %123 = llvm.mlir.addressof @__constant_64xf32_2 : !llvm.ptr
    %124 = llvm.getelementptr %123[0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<64 x f32>
    %125 = llvm.mlir.constant(3735928559 : index) : i64
    %126 = llvm.inttoptr %125 : i64 to !llvm.ptr
    %127 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %128 = llvm.insertvalue %126, %127[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %129 = llvm.insertvalue %124, %128[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %130 = llvm.mlir.constant(0 : index) : i64
    %131 = llvm.insertvalue %130, %129[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %132 = llvm.insertvalue %118, %131[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %133 = llvm.insertvalue %119, %132[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %134 = builtin.unrealized_conversion_cast %133 : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> to memref<64xf32>
    %135 = llvm.mlir.constant(1 : index) : i64
    %136 = llvm.mlir.constant(3 : index) : i64
    %137 = llvm.mlir.constant(230 : index) : i64
    %138 = llvm.mlir.constant(230 : index) : i64
    %139 = llvm.mlir.constant(1 : index) : i64
    %140 = llvm.mlir.constant(52900 : index) : i64
    %141 = llvm.mlir.constant(158700 : index) : i64
    %142 = llvm.mlir.constant(158700 : index) : i64
    %143 = llvm.mlir.null : !llvm.ptr
    %144 = llvm.getelementptr %143[%142] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %145 = llvm.ptrtoint %144 : !llvm.ptr to i64
    %146 = llvm.mlir.constant(64 : index) : i64
    %147 = llvm.add %145, %146  : i64
    %148 = llvm.call @malloc(%147) : (i64) -> !llvm.ptr
    %149 = llvm.ptrtoint %148 : !llvm.ptr to i64
    %150 = llvm.mlir.constant(1 : index) : i64
    %151 = llvm.sub %146, %150  : i64
    %152 = llvm.add %149, %151  : i64
    %153 = llvm.urem %152, %146  : i64
    %154 = llvm.sub %152, %153  : i64
    %155 = llvm.inttoptr %154 : i64 to !llvm.ptr
    %156 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %157 = llvm.insertvalue %148, %156[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %158 = llvm.insertvalue %155, %157[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %159 = llvm.mlir.constant(0 : index) : i64
    %160 = llvm.insertvalue %159, %158[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %161 = llvm.insertvalue %135, %160[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %162 = llvm.insertvalue %136, %161[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %163 = llvm.insertvalue %137, %162[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %164 = llvm.insertvalue %138, %163[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %165 = llvm.insertvalue %141, %164[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %166 = llvm.insertvalue %140, %165[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %167 = llvm.insertvalue %138, %166[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %168 = llvm.insertvalue %139, %167[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %169 = builtin.unrealized_conversion_cast %168 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> to memref<1x3x230x230xf32>
    llvm.br ^bb1(%36 : i64)
  ^bb1(%170: i64):  // 2 preds: ^bb0, ^bb8
    %171 = builtin.unrealized_conversion_cast %170 : i64 to index
    %172 = builtin.unrealized_conversion_cast %171 : index to i64
    %173 = llvm.icmp "slt" %172, %35 : i64
    llvm.cond_br %173, ^bb2, ^bb9
  ^bb2:  // pred: ^bb1
    llvm.br ^bb3(%36 : i64)
  ^bb3(%174: i64):  // 2 preds: ^bb2, ^bb7
    %175 = builtin.unrealized_conversion_cast %174 : i64 to index
    %176 = builtin.unrealized_conversion_cast %175 : index to i64
    %177 = llvm.icmp "slt" %176, %34 : i64
    llvm.cond_br %177, ^bb4, ^bb8
  ^bb4:  // pred: ^bb3
    llvm.br ^bb5(%36 : i64)
  ^bb5(%178: i64):  // 2 preds: ^bb4, ^bb6
    %179 = builtin.unrealized_conversion_cast %178 : i64 to index
    %180 = builtin.unrealized_conversion_cast %179 : index to i64
    %181 = llvm.icmp "slt" %180, %33 : i64
    llvm.cond_br %181, ^bb6, ^bb7
  ^bb6:  // pred: ^bb5
    %182 = llvm.mlir.constant(0 : index) : i64
    %183 = builtin.unrealized_conversion_cast %182 : i64 to index
    %184 = llvm.mlir.constant(0 : index) : i64
    %185 = builtin.unrealized_conversion_cast %184 : i64 to index
    %186 = llvm.extractvalue %168[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %187 = builtin.unrealized_conversion_cast %183 : index to i64
    %188 = llvm.mlir.constant(158700 : index) : i64
    %189 = llvm.mul %187, %188  : i64
    %190 = builtin.unrealized_conversion_cast %175 : index to i64
    %191 = llvm.mlir.constant(52900 : index) : i64
    %192 = llvm.mul %190, %191  : i64
    %193 = llvm.add %189, %192  : i64
    %194 = builtin.unrealized_conversion_cast %179 : index to i64
    %195 = llvm.mlir.constant(230 : index) : i64
    %196 = llvm.mul %194, %195  : i64
    %197 = llvm.add %193, %196  : i64
    %198 = builtin.unrealized_conversion_cast %185 : index to i64
    %199 = llvm.add %197, %198  : i64
    %200 = llvm.getelementptr %186[%199] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %201 = builtin.unrealized_conversion_cast %200 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %202 = llvm.extractvalue %201[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.call @forward_kernel_0(%202) : (!llvm.ptr) -> ()
    %203 = llvm.add %180, %32  : i64
    %204 = builtin.unrealized_conversion_cast %203 : i64 to index
    llvm.br ^bb5(%203 : i64)
  ^bb7:  // pred: ^bb5
    %205 = llvm.add %176, %35  : i64
    %206 = builtin.unrealized_conversion_cast %205 : i64 to index
    llvm.br ^bb3(%205 : i64)
  ^bb8:  // pred: ^bb3
    %207 = llvm.add %172, %35  : i64
    %208 = builtin.unrealized_conversion_cast %207 : i64 to index
    llvm.br ^bb1(%207 : i64)
  ^bb9:  // pred: ^bb1
    %209 = llvm.mlir.constant(1 : index) : i64
    %210 = llvm.mlir.constant(3 : index) : i64
    %211 = llvm.mlir.constant(230 : index) : i64
    %212 = llvm.mlir.constant(230 : index) : i64
    %213 = llvm.mlir.constant(1 : index) : i64
    %214 = llvm.mlir.constant(52900 : index) : i64
    %215 = llvm.mlir.constant(158700 : index) : i64
    %216 = llvm.mlir.constant(158700 : index) : i64
    %217 = llvm.mlir.null : !llvm.ptr
    %218 = llvm.getelementptr %217[%216] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %219 = llvm.ptrtoint %218 : !llvm.ptr to i64
    %220 = llvm.mlir.constant(64 : index) : i64
    %221 = llvm.add %219, %220  : i64
    %222 = llvm.call @malloc(%221) : (i64) -> !llvm.ptr
    %223 = llvm.ptrtoint %222 : !llvm.ptr to i64
    %224 = llvm.mlir.constant(1 : index) : i64
    %225 = llvm.sub %220, %224  : i64
    %226 = llvm.add %223, %225  : i64
    %227 = llvm.urem %226, %220  : i64
    %228 = llvm.sub %226, %227  : i64
    %229 = llvm.inttoptr %228 : i64 to !llvm.ptr
    %230 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %231 = llvm.insertvalue %222, %230[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %232 = llvm.insertvalue %229, %231[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %233 = llvm.mlir.constant(0 : index) : i64
    %234 = llvm.insertvalue %233, %232[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %235 = llvm.insertvalue %209, %234[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %236 = llvm.insertvalue %210, %235[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %237 = llvm.insertvalue %211, %236[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %238 = llvm.insertvalue %212, %237[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %239 = llvm.insertvalue %215, %238[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %240 = llvm.insertvalue %214, %239[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %241 = llvm.insertvalue %212, %240[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %242 = llvm.insertvalue %213, %241[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %243 = builtin.unrealized_conversion_cast %242 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> to memref<1x3x230x230xf32>
    %244 = llvm.mlir.constant(1 : index) : i64
    %245 = llvm.extractvalue %168[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %246 = llvm.mul %244, %245  : i64
    %247 = llvm.extractvalue %168[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %248 = llvm.mul %246, %247  : i64
    %249 = llvm.extractvalue %168[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %250 = llvm.mul %248, %249  : i64
    %251 = llvm.extractvalue %168[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %252 = llvm.mul %250, %251  : i64
    %253 = llvm.mlir.null : !llvm.ptr
    %254 = llvm.getelementptr %253[1] : (!llvm.ptr) -> !llvm.ptr, f32
    %255 = llvm.ptrtoint %254 : !llvm.ptr to i64
    %256 = llvm.mul %252, %255  : i64
    %257 = llvm.extractvalue %168[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %258 = llvm.extractvalue %168[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %259 = llvm.getelementptr %257[%258] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %260 = llvm.extractvalue %242[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %261 = llvm.extractvalue %242[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %262 = llvm.getelementptr %260[%261] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    "llvm.intr.memcpy"(%262, %259, %256) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> ()
    %263 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %264 = llvm.extractvalue %242[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %265 = llvm.extractvalue %242[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %266 = llvm.insertvalue %264, %263[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %267 = llvm.insertvalue %265, %266[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %268 = llvm.mlir.constant(693 : index) : i64
    %269 = llvm.insertvalue %268, %267[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %270 = llvm.mlir.constant(1 : index) : i64
    %271 = llvm.insertvalue %270, %269[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %272 = llvm.mlir.constant(158700 : index) : i64
    %273 = llvm.insertvalue %272, %271[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %274 = llvm.mlir.constant(3 : index) : i64
    %275 = llvm.insertvalue %274, %273[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %276 = llvm.mlir.constant(52900 : index) : i64
    %277 = llvm.insertvalue %276, %275[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %278 = llvm.mlir.constant(224 : index) : i64
    %279 = llvm.insertvalue %278, %277[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %280 = llvm.mlir.constant(230 : index) : i64
    %281 = llvm.insertvalue %280, %279[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %282 = llvm.mlir.constant(224 : index) : i64
    %283 = llvm.insertvalue %282, %281[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %284 = llvm.mlir.constant(1 : index) : i64
    %285 = llvm.insertvalue %284, %283[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %286 = llvm.intr.stacksave : !llvm.ptr
    %287 = llvm.mlir.constant(4 : i64) : i64
    %288 = llvm.mlir.constant(1 : index) : i64
    %289 = llvm.alloca %288 x !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> : (i64) -> !llvm.ptr
    llvm.store %22, %289 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>, !llvm.ptr
    %290 = llvm.mlir.undef : !llvm.struct<(i64, ptr)>
    %291 = llvm.insertvalue %287, %290[0] : !llvm.struct<(i64, ptr)> 
    %292 = llvm.insertvalue %289, %291[1] : !llvm.struct<(i64, ptr)> 
    %293 = llvm.mlir.constant(4 : i64) : i64
    %294 = llvm.mlir.constant(1 : index) : i64
    %295 = llvm.alloca %294 x !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> : (i64) -> !llvm.ptr
    llvm.store %285, %295 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>, !llvm.ptr
    %296 = llvm.mlir.undef : !llvm.struct<(i64, ptr)>
    %297 = llvm.insertvalue %293, %296[0] : !llvm.struct<(i64, ptr)> 
    %298 = llvm.insertvalue %295, %297[1] : !llvm.struct<(i64, ptr)> 
    %299 = llvm.mlir.constant(1 : index) : i64
    %300 = llvm.alloca %299 x !llvm.struct<(i64, ptr)> : (i64) -> !llvm.ptr
    llvm.store %292, %300 : !llvm.struct<(i64, ptr)>, !llvm.ptr
    %301 = llvm.alloca %299 x !llvm.struct<(i64, ptr)> : (i64) -> !llvm.ptr
    llvm.store %298, %301 : !llvm.struct<(i64, ptr)>, !llvm.ptr
    %302 = llvm.mlir.constant(4 : index) : i64
    llvm.call @memrefCopy(%302, %300, %301) : (i64, !llvm.ptr, !llvm.ptr) -> ()
    llvm.intr.stackrestore %286 : !llvm.ptr
    %303 = llvm.mlir.constant(1 : index) : i64
    %304 = llvm.mlir.constant(64 : index) : i64
    %305 = llvm.mlir.constant(112 : index) : i64
    %306 = llvm.mlir.constant(112 : index) : i64
    %307 = llvm.mlir.constant(1 : index) : i64
    %308 = llvm.mlir.constant(12544 : index) : i64
    %309 = llvm.mlir.constant(802816 : index) : i64
    %310 = llvm.mlir.constant(802816 : index) : i64
    %311 = llvm.mlir.null : !llvm.ptr
    %312 = llvm.getelementptr %311[%310] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %313 = llvm.ptrtoint %312 : !llvm.ptr to i64
    %314 = llvm.mlir.constant(64 : index) : i64
    %315 = llvm.add %313, %314  : i64
    %316 = llvm.call @malloc(%315) : (i64) -> !llvm.ptr
    %317 = llvm.ptrtoint %316 : !llvm.ptr to i64
    %318 = llvm.mlir.constant(1 : index) : i64
    %319 = llvm.sub %314, %318  : i64
    %320 = llvm.add %317, %319  : i64
    %321 = llvm.urem %320, %314  : i64
    %322 = llvm.sub %320, %321  : i64
    %323 = llvm.inttoptr %322 : i64 to !llvm.ptr
    %324 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %325 = llvm.insertvalue %316, %324[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %326 = llvm.insertvalue %323, %325[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %327 = llvm.mlir.constant(0 : index) : i64
    %328 = llvm.insertvalue %327, %326[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %329 = llvm.insertvalue %303, %328[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %330 = llvm.insertvalue %304, %329[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %331 = llvm.insertvalue %305, %330[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %332 = llvm.insertvalue %306, %331[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %333 = llvm.insertvalue %309, %332[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %334 = llvm.insertvalue %308, %333[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %335 = llvm.insertvalue %306, %334[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %336 = llvm.insertvalue %307, %335[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %337 = builtin.unrealized_conversion_cast %336 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> to memref<1x64x112x112xf32>
    llvm.br ^bb10(%36 : i64)
  ^bb10(%338: i64):  // 2 preds: ^bb9, ^bb17
    %339 = builtin.unrealized_conversion_cast %338 : i64 to index
    %340 = builtin.unrealized_conversion_cast %339 : index to i64
    %341 = llvm.icmp "slt" %340, %35 : i64
    llvm.cond_br %341, ^bb11, ^bb18
  ^bb11:  // pred: ^bb10
    llvm.br ^bb12(%36 : i64)
  ^bb12(%342: i64):  // 2 preds: ^bb11, ^bb16
    %343 = builtin.unrealized_conversion_cast %342 : i64 to index
    %344 = builtin.unrealized_conversion_cast %343 : index to i64
    %345 = llvm.icmp "slt" %344, %31 : i64
    llvm.cond_br %345, ^bb13, ^bb17
  ^bb13:  // pred: ^bb12
    llvm.br ^bb14(%36 : i64)
  ^bb14(%346: i64):  // 2 preds: ^bb13, ^bb15
    %347 = builtin.unrealized_conversion_cast %346 : i64 to index
    %348 = builtin.unrealized_conversion_cast %347 : index to i64
    %349 = llvm.icmp "slt" %348, %30 : i64
    llvm.cond_br %349, ^bb15, ^bb16
  ^bb15:  // pred: ^bb14
    %350 = llvm.mlir.constant(0 : index) : i64
    %351 = builtin.unrealized_conversion_cast %350 : i64 to index
    %352 = llvm.mlir.constant(0 : index) : i64
    %353 = builtin.unrealized_conversion_cast %352 : i64 to index
    %354 = llvm.extractvalue %336[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %355 = builtin.unrealized_conversion_cast %351 : index to i64
    %356 = llvm.mlir.constant(802816 : index) : i64
    %357 = llvm.mul %355, %356  : i64
    %358 = builtin.unrealized_conversion_cast %343 : index to i64
    %359 = llvm.mlir.constant(12544 : index) : i64
    %360 = llvm.mul %358, %359  : i64
    %361 = llvm.add %357, %360  : i64
    %362 = builtin.unrealized_conversion_cast %347 : index to i64
    %363 = llvm.mlir.constant(112 : index) : i64
    %364 = llvm.mul %362, %363  : i64
    %365 = llvm.add %361, %364  : i64
    %366 = builtin.unrealized_conversion_cast %353 : index to i64
    %367 = llvm.add %365, %366  : i64
    %368 = llvm.getelementptr %354[%367] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %369 = builtin.unrealized_conversion_cast %368 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %370 = llvm.extractvalue %369[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.call @forward_kernel_1(%370) : (!llvm.ptr) -> ()
    %371 = llvm.add %348, %29  : i64
    %372 = builtin.unrealized_conversion_cast %371 : i64 to index
    llvm.br ^bb14(%371 : i64)
  ^bb16:  // pred: ^bb14
    %373 = llvm.add %344, %35  : i64
    %374 = builtin.unrealized_conversion_cast %373 : i64 to index
    llvm.br ^bb12(%373 : i64)
  ^bb17:  // pred: ^bb12
    %375 = llvm.add %340, %35  : i64
    %376 = builtin.unrealized_conversion_cast %375 : i64 to index
    llvm.br ^bb10(%375 : i64)
  ^bb18:  // pred: ^bb10
    %377 = llvm.mlir.constant(1 : index) : i64
    %378 = llvm.mlir.constant(64 : index) : i64
    %379 = llvm.mlir.constant(112 : index) : i64
    %380 = llvm.mlir.constant(112 : index) : i64
    %381 = llvm.mlir.constant(1 : index) : i64
    %382 = llvm.mlir.constant(12544 : index) : i64
    %383 = llvm.mlir.constant(802816 : index) : i64
    %384 = llvm.mlir.constant(802816 : index) : i64
    %385 = llvm.mlir.null : !llvm.ptr
    %386 = llvm.getelementptr %385[%384] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %387 = llvm.ptrtoint %386 : !llvm.ptr to i64
    %388 = llvm.mlir.constant(64 : index) : i64
    %389 = llvm.add %387, %388  : i64
    %390 = llvm.call @malloc(%389) : (i64) -> !llvm.ptr
    %391 = llvm.ptrtoint %390 : !llvm.ptr to i64
    %392 = llvm.mlir.constant(1 : index) : i64
    %393 = llvm.sub %388, %392  : i64
    %394 = llvm.add %391, %393  : i64
    %395 = llvm.urem %394, %388  : i64
    %396 = llvm.sub %394, %395  : i64
    %397 = llvm.inttoptr %396 : i64 to !llvm.ptr
    %398 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %399 = llvm.insertvalue %390, %398[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %400 = llvm.insertvalue %397, %399[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %401 = llvm.mlir.constant(0 : index) : i64
    %402 = llvm.insertvalue %401, %400[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %403 = llvm.insertvalue %377, %402[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %404 = llvm.insertvalue %378, %403[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %405 = llvm.insertvalue %379, %404[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %406 = llvm.insertvalue %380, %405[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %407 = llvm.insertvalue %383, %406[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %408 = llvm.insertvalue %382, %407[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %409 = llvm.insertvalue %380, %408[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %410 = llvm.insertvalue %381, %409[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %411 = builtin.unrealized_conversion_cast %410 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> to memref<1x64x112x112xf32>
    %412 = llvm.mlir.constant(1 : index) : i64
    %413 = llvm.extractvalue %336[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %414 = llvm.mul %412, %413  : i64
    %415 = llvm.extractvalue %336[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %416 = llvm.mul %414, %415  : i64
    %417 = llvm.extractvalue %336[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %418 = llvm.mul %416, %417  : i64
    %419 = llvm.extractvalue %336[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %420 = llvm.mul %418, %419  : i64
    %421 = llvm.mlir.null : !llvm.ptr
    %422 = llvm.getelementptr %421[1] : (!llvm.ptr) -> !llvm.ptr, f32
    %423 = llvm.ptrtoint %422 : !llvm.ptr to i64
    %424 = llvm.mul %420, %423  : i64
    %425 = llvm.extractvalue %336[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %426 = llvm.extractvalue %336[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %427 = llvm.getelementptr %425[%426] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %428 = llvm.extractvalue %410[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %429 = llvm.extractvalue %410[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %430 = llvm.getelementptr %428[%429] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    "llvm.intr.memcpy"(%430, %427, %424) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> ()
    llvm.br ^bb19(%36 : i64)
  ^bb19(%431: i64):  // 2 preds: ^bb18, ^bb29
    %432 = builtin.unrealized_conversion_cast %431 : i64 to index
    %433 = builtin.unrealized_conversion_cast %432 : index to i64
    %434 = llvm.icmp "slt" %433, %35 : i64
    llvm.cond_br %434, ^bb20, ^bb30
  ^bb20:  // pred: ^bb19
    llvm.br ^bb21(%36 : i64)
  ^bb21(%435: i64):  // 2 preds: ^bb20, ^bb28
    %436 = builtin.unrealized_conversion_cast %435 : i64 to index
    %437 = builtin.unrealized_conversion_cast %436 : index to i64
    %438 = llvm.icmp "slt" %437, %31 : i64
    llvm.cond_br %438, ^bb22, ^bb29
  ^bb22:  // pred: ^bb21
    llvm.br ^bb23(%36 : i64)
  ^bb23(%439: i64):  // 2 preds: ^bb22, ^bb27
    %440 = builtin.unrealized_conversion_cast %439 : i64 to index
    %441 = builtin.unrealized_conversion_cast %440 : index to i64
    %442 = llvm.icmp "slt" %441, %30 : i64
    llvm.cond_br %442, ^bb24, ^bb28
  ^bb24:  // pred: ^bb23
    llvm.br ^bb25(%36 : i64)
  ^bb25(%443: i64):  // 2 preds: ^bb24, ^bb26
    %444 = builtin.unrealized_conversion_cast %443 : i64 to index
    %445 = builtin.unrealized_conversion_cast %444 : index to i64
    %446 = llvm.icmp "slt" %445, %30 : i64
    llvm.cond_br %446, ^bb26, ^bb27
  ^bb26:  // pred: ^bb25
    %447 = llvm.mlir.constant(0 : index) : i64
    %448 = builtin.unrealized_conversion_cast %447 : i64 to index
    %449 = llvm.mlir.constant(0 : index) : i64
    %450 = builtin.unrealized_conversion_cast %449 : i64 to index
    %451 = llvm.mlir.constant(2 : index) : i64
    %452 = llvm.mul %439, %451  : i64
    %453 = builtin.unrealized_conversion_cast %452 : i64 to index
    %454 = llvm.mlir.constant(2 : index) : i64
    %455 = llvm.mul %443, %454  : i64
    %456 = builtin.unrealized_conversion_cast %455 : i64 to index
    %457 = llvm.extractvalue %242[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %458 = builtin.unrealized_conversion_cast %448 : index to i64
    %459 = llvm.mlir.constant(158700 : index) : i64
    %460 = llvm.mul %458, %459  : i64
    %461 = builtin.unrealized_conversion_cast %450 : index to i64
    %462 = llvm.mlir.constant(52900 : index) : i64
    %463 = llvm.mul %461, %462  : i64
    %464 = llvm.add %460, %463  : i64
    %465 = builtin.unrealized_conversion_cast %453 : index to i64
    %466 = llvm.mlir.constant(230 : index) : i64
    %467 = llvm.mul %465, %466  : i64
    %468 = llvm.add %464, %467  : i64
    %469 = builtin.unrealized_conversion_cast %456 : index to i64
    %470 = llvm.add %468, %469  : i64
    %471 = llvm.getelementptr %457[%470] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %472 = builtin.unrealized_conversion_cast %471 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %473 = llvm.mlir.constant(0 : index) : i64
    %474 = builtin.unrealized_conversion_cast %473 : i64 to index
    %475 = llvm.mlir.constant(0 : index) : i64
    %476 = builtin.unrealized_conversion_cast %475 : i64 to index
    %477 = llvm.mlir.constant(0 : index) : i64
    %478 = builtin.unrealized_conversion_cast %477 : i64 to index
    %479 = llvm.extractvalue %65[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %480 = builtin.unrealized_conversion_cast %436 : index to i64
    %481 = llvm.mlir.constant(147 : index) : i64
    %482 = llvm.mul %480, %481  : i64
    %483 = builtin.unrealized_conversion_cast %474 : index to i64
    %484 = llvm.mlir.constant(49 : index) : i64
    %485 = llvm.mul %483, %484  : i64
    %486 = llvm.add %482, %485  : i64
    %487 = builtin.unrealized_conversion_cast %476 : index to i64
    %488 = llvm.mlir.constant(7 : index) : i64
    %489 = llvm.mul %487, %488  : i64
    %490 = llvm.add %486, %489  : i64
    %491 = builtin.unrealized_conversion_cast %478 : index to i64
    %492 = llvm.add %490, %491  : i64
    %493 = llvm.getelementptr %479[%492] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %494 = builtin.unrealized_conversion_cast %493 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %495 = llvm.mlir.constant(0 : index) : i64
    %496 = builtin.unrealized_conversion_cast %495 : i64 to index
    %497 = llvm.extractvalue %410[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %498 = builtin.unrealized_conversion_cast %496 : index to i64
    %499 = llvm.mlir.constant(802816 : index) : i64
    %500 = llvm.mul %498, %499  : i64
    %501 = builtin.unrealized_conversion_cast %436 : index to i64
    %502 = llvm.mlir.constant(12544 : index) : i64
    %503 = llvm.mul %501, %502  : i64
    %504 = llvm.add %500, %503  : i64
    %505 = builtin.unrealized_conversion_cast %440 : index to i64
    %506 = llvm.mlir.constant(112 : index) : i64
    %507 = llvm.mul %505, %506  : i64
    %508 = llvm.add %504, %507  : i64
    %509 = builtin.unrealized_conversion_cast %444 : index to i64
    %510 = llvm.add %508, %509  : i64
    %511 = llvm.getelementptr %497[%510] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %512 = builtin.unrealized_conversion_cast %511 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %513 = llvm.mlir.constant(0 : index) : i64
    %514 = builtin.unrealized_conversion_cast %513 : i64 to index
    %515 = llvm.extractvalue %410[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %516 = builtin.unrealized_conversion_cast %514 : index to i64
    %517 = llvm.mlir.constant(802816 : index) : i64
    %518 = llvm.mul %516, %517  : i64
    %519 = builtin.unrealized_conversion_cast %436 : index to i64
    %520 = llvm.mlir.constant(12544 : index) : i64
    %521 = llvm.mul %519, %520  : i64
    %522 = llvm.add %518, %521  : i64
    %523 = builtin.unrealized_conversion_cast %440 : index to i64
    %524 = llvm.mlir.constant(112 : index) : i64
    %525 = llvm.mul %523, %524  : i64
    %526 = llvm.add %522, %525  : i64
    %527 = builtin.unrealized_conversion_cast %444 : index to i64
    %528 = llvm.add %526, %527  : i64
    %529 = llvm.getelementptr %515[%528] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %530 = builtin.unrealized_conversion_cast %529 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %531 = llvm.extractvalue %472[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %532 = llvm.extractvalue %494[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %533 = llvm.extractvalue %512[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %534 = llvm.extractvalue %530[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.call @forward_kernel_2(%531, %532, %533, %534) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> ()
    %535 = llvm.add %445, %28  : i64
    %536 = builtin.unrealized_conversion_cast %535 : i64 to index
    llvm.br ^bb25(%535 : i64)
  ^bb27:  // pred: ^bb25
    %537 = llvm.add %441, %35  : i64
    %538 = builtin.unrealized_conversion_cast %537 : i64 to index
    llvm.br ^bb23(%537 : i64)
  ^bb28:  // pred: ^bb23
    %539 = llvm.add %437, %35  : i64
    %540 = builtin.unrealized_conversion_cast %539 : i64 to index
    llvm.br ^bb21(%539 : i64)
  ^bb29:  // pred: ^bb21
    %541 = llvm.add %433, %35  : i64
    %542 = builtin.unrealized_conversion_cast %541 : i64 to index
    llvm.br ^bb19(%541 : i64)
  ^bb30:  // pred: ^bb19
    %543 = llvm.mlir.constant(1 : index) : i64
    %544 = llvm.mlir.constant(64 : index) : i64
    %545 = llvm.mlir.constant(112 : index) : i64
    %546 = llvm.mlir.constant(112 : index) : i64
    %547 = llvm.mlir.constant(1 : index) : i64
    %548 = llvm.mlir.constant(12544 : index) : i64
    %549 = llvm.mlir.constant(802816 : index) : i64
    %550 = llvm.mlir.constant(802816 : index) : i64
    %551 = llvm.mlir.null : !llvm.ptr
    %552 = llvm.getelementptr %551[%550] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %553 = llvm.ptrtoint %552 : !llvm.ptr to i64
    %554 = llvm.mlir.constant(64 : index) : i64
    %555 = llvm.add %553, %554  : i64
    %556 = llvm.call @malloc(%555) : (i64) -> !llvm.ptr
    %557 = llvm.ptrtoint %556 : !llvm.ptr to i64
    %558 = llvm.mlir.constant(1 : index) : i64
    %559 = llvm.sub %554, %558  : i64
    %560 = llvm.add %557, %559  : i64
    %561 = llvm.urem %560, %554  : i64
    %562 = llvm.sub %560, %561  : i64
    %563 = llvm.inttoptr %562 : i64 to !llvm.ptr
    %564 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %565 = llvm.insertvalue %556, %564[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %566 = llvm.insertvalue %563, %565[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %567 = llvm.mlir.constant(0 : index) : i64
    %568 = llvm.insertvalue %567, %566[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %569 = llvm.insertvalue %543, %568[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %570 = llvm.insertvalue %544, %569[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %571 = llvm.insertvalue %545, %570[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %572 = llvm.insertvalue %546, %571[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %573 = llvm.insertvalue %549, %572[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %574 = llvm.insertvalue %548, %573[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %575 = llvm.insertvalue %546, %574[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %576 = llvm.insertvalue %547, %575[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %577 = builtin.unrealized_conversion_cast %576 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> to memref<1x64x112x112xf32>
    llvm.br ^bb31(%36 : i64)
  ^bb31(%578: i64):  // 2 preds: ^bb30, ^bb38
    %579 = builtin.unrealized_conversion_cast %578 : i64 to index
    %580 = builtin.unrealized_conversion_cast %579 : index to i64
    %581 = llvm.icmp "slt" %580, %35 : i64
    llvm.cond_br %581, ^bb32, ^bb39
  ^bb32:  // pred: ^bb31
    llvm.br ^bb33(%36 : i64)
  ^bb33(%582: i64):  // 2 preds: ^bb32, ^bb37
    %583 = builtin.unrealized_conversion_cast %582 : i64 to index
    %584 = builtin.unrealized_conversion_cast %583 : index to i64
    %585 = llvm.icmp "slt" %584, %31 : i64
    llvm.cond_br %585, ^bb34, ^bb38
  ^bb34:  // pred: ^bb33
    llvm.br ^bb35(%36 : i64)
  ^bb35(%586: i64):  // 2 preds: ^bb34, ^bb36
    %587 = builtin.unrealized_conversion_cast %586 : i64 to index
    %588 = builtin.unrealized_conversion_cast %587 : index to i64
    %589 = llvm.icmp "slt" %588, %30 : i64
    llvm.cond_br %589, ^bb36, ^bb37
  ^bb36:  // pred: ^bb35
    %590 = llvm.mlir.constant(0 : index) : i64
    %591 = builtin.unrealized_conversion_cast %590 : i64 to index
    %592 = llvm.mlir.constant(0 : index) : i64
    %593 = builtin.unrealized_conversion_cast %592 : i64 to index
    %594 = llvm.extractvalue %410[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %595 = builtin.unrealized_conversion_cast %591 : index to i64
    %596 = llvm.mlir.constant(802816 : index) : i64
    %597 = llvm.mul %595, %596  : i64
    %598 = builtin.unrealized_conversion_cast %583 : index to i64
    %599 = llvm.mlir.constant(12544 : index) : i64
    %600 = llvm.mul %598, %599  : i64
    %601 = llvm.add %597, %600  : i64
    %602 = builtin.unrealized_conversion_cast %587 : index to i64
    %603 = llvm.mlir.constant(112 : index) : i64
    %604 = llvm.mul %602, %603  : i64
    %605 = llvm.add %601, %604  : i64
    %606 = builtin.unrealized_conversion_cast %593 : index to i64
    %607 = llvm.add %605, %606  : i64
    %608 = llvm.getelementptr %594[%607] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %609 = builtin.unrealized_conversion_cast %608 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %610 = llvm.extractvalue %116[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %611 = builtin.unrealized_conversion_cast %583 : index to i64
    %612 = llvm.getelementptr %610[%611] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %613 = builtin.unrealized_conversion_cast %612 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %614 = llvm.extractvalue %133[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %615 = builtin.unrealized_conversion_cast %583 : index to i64
    %616 = llvm.getelementptr %614[%615] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %617 = builtin.unrealized_conversion_cast %616 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %618 = llvm.extractvalue %82[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %619 = builtin.unrealized_conversion_cast %583 : index to i64
    %620 = llvm.getelementptr %618[%619] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %621 = builtin.unrealized_conversion_cast %620 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %622 = llvm.extractvalue %99[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %623 = builtin.unrealized_conversion_cast %583 : index to i64
    %624 = llvm.getelementptr %622[%623] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %625 = builtin.unrealized_conversion_cast %624 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %626 = llvm.mlir.constant(0 : index) : i64
    %627 = builtin.unrealized_conversion_cast %626 : i64 to index
    %628 = llvm.mlir.constant(0 : index) : i64
    %629 = builtin.unrealized_conversion_cast %628 : i64 to index
    %630 = llvm.extractvalue %576[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %631 = builtin.unrealized_conversion_cast %627 : index to i64
    %632 = llvm.mlir.constant(802816 : index) : i64
    %633 = llvm.mul %631, %632  : i64
    %634 = builtin.unrealized_conversion_cast %583 : index to i64
    %635 = llvm.mlir.constant(12544 : index) : i64
    %636 = llvm.mul %634, %635  : i64
    %637 = llvm.add %633, %636  : i64
    %638 = builtin.unrealized_conversion_cast %587 : index to i64
    %639 = llvm.mlir.constant(112 : index) : i64
    %640 = llvm.mul %638, %639  : i64
    %641 = llvm.add %637, %640  : i64
    %642 = builtin.unrealized_conversion_cast %629 : index to i64
    %643 = llvm.add %641, %642  : i64
    %644 = llvm.getelementptr %630[%643] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %645 = builtin.unrealized_conversion_cast %644 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %646 = llvm.extractvalue %609[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %647 = llvm.extractvalue %613[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %648 = llvm.extractvalue %617[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %649 = llvm.extractvalue %621[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %650 = llvm.extractvalue %625[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %651 = llvm.extractvalue %645[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.call @forward_kernel_3(%646, %647, %648, %649, %650, %651) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> ()
    %652 = llvm.add %588, %29  : i64
    %653 = builtin.unrealized_conversion_cast %652 : i64 to index
    llvm.br ^bb35(%652 : i64)
  ^bb37:  // pred: ^bb35
    %654 = llvm.add %584, %35  : i64
    %655 = builtin.unrealized_conversion_cast %654 : i64 to index
    llvm.br ^bb33(%654 : i64)
  ^bb38:  // pred: ^bb33
    %656 = llvm.add %580, %35  : i64
    %657 = builtin.unrealized_conversion_cast %656 : i64 to index
    llvm.br ^bb31(%656 : i64)
  ^bb39:  // pred: ^bb31
    %658 = llvm.mlir.constant(1 : index) : i64
    %659 = llvm.mlir.constant(64 : index) : i64
    %660 = llvm.mlir.constant(112 : index) : i64
    %661 = llvm.mlir.constant(112 : index) : i64
    %662 = llvm.mlir.constant(1 : index) : i64
    %663 = llvm.mlir.constant(12544 : index) : i64
    %664 = llvm.mlir.constant(802816 : index) : i64
    %665 = llvm.mlir.constant(802816 : index) : i64
    %666 = llvm.mlir.null : !llvm.ptr
    %667 = llvm.getelementptr %666[%665] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %668 = llvm.ptrtoint %667 : !llvm.ptr to i64
    %669 = llvm.mlir.constant(64 : index) : i64
    %670 = llvm.add %668, %669  : i64
    %671 = llvm.call @malloc(%670) : (i64) -> !llvm.ptr
    %672 = llvm.ptrtoint %671 : !llvm.ptr to i64
    %673 = llvm.mlir.constant(1 : index) : i64
    %674 = llvm.sub %669, %673  : i64
    %675 = llvm.add %672, %674  : i64
    %676 = llvm.urem %675, %669  : i64
    %677 = llvm.sub %675, %676  : i64
    %678 = llvm.inttoptr %677 : i64 to !llvm.ptr
    %679 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %680 = llvm.insertvalue %671, %679[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %681 = llvm.insertvalue %678, %680[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %682 = llvm.mlir.constant(0 : index) : i64
    %683 = llvm.insertvalue %682, %681[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %684 = llvm.insertvalue %658, %683[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %685 = llvm.insertvalue %659, %684[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %686 = llvm.insertvalue %660, %685[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %687 = llvm.insertvalue %661, %686[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %688 = llvm.insertvalue %664, %687[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %689 = llvm.insertvalue %663, %688[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %690 = llvm.insertvalue %661, %689[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %691 = llvm.insertvalue %662, %690[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %692 = builtin.unrealized_conversion_cast %691 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> to memref<1x64x112x112xf32>
    llvm.br ^bb40(%36 : i64)
  ^bb40(%693: i64):  // 2 preds: ^bb39, ^bb47
    %694 = builtin.unrealized_conversion_cast %693 : i64 to index
    %695 = builtin.unrealized_conversion_cast %694 : index to i64
    %696 = llvm.icmp "slt" %695, %35 : i64
    llvm.cond_br %696, ^bb41, ^bb48
  ^bb41:  // pred: ^bb40
    llvm.br ^bb42(%36 : i64)
  ^bb42(%697: i64):  // 2 preds: ^bb41, ^bb46
    %698 = builtin.unrealized_conversion_cast %697 : i64 to index
    %699 = builtin.unrealized_conversion_cast %698 : index to i64
    %700 = llvm.icmp "slt" %699, %31 : i64
    llvm.cond_br %700, ^bb43, ^bb47
  ^bb43:  // pred: ^bb42
    llvm.br ^bb44(%36 : i64)
  ^bb44(%701: i64):  // 2 preds: ^bb43, ^bb45
    %702 = builtin.unrealized_conversion_cast %701 : i64 to index
    %703 = builtin.unrealized_conversion_cast %702 : index to i64
    %704 = llvm.icmp "slt" %703, %30 : i64
    llvm.cond_br %704, ^bb45, ^bb46
  ^bb45:  // pred: ^bb44
    %705 = llvm.mlir.constant(0 : index) : i64
    %706 = builtin.unrealized_conversion_cast %705 : i64 to index
    %707 = llvm.mlir.constant(0 : index) : i64
    %708 = builtin.unrealized_conversion_cast %707 : i64 to index
    %709 = llvm.extractvalue %576[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %710 = builtin.unrealized_conversion_cast %706 : index to i64
    %711 = llvm.mlir.constant(802816 : index) : i64
    %712 = llvm.mul %710, %711  : i64
    %713 = builtin.unrealized_conversion_cast %698 : index to i64
    %714 = llvm.mlir.constant(12544 : index) : i64
    %715 = llvm.mul %713, %714  : i64
    %716 = llvm.add %712, %715  : i64
    %717 = builtin.unrealized_conversion_cast %702 : index to i64
    %718 = llvm.mlir.constant(112 : index) : i64
    %719 = llvm.mul %717, %718  : i64
    %720 = llvm.add %716, %719  : i64
    %721 = builtin.unrealized_conversion_cast %708 : index to i64
    %722 = llvm.add %720, %721  : i64
    %723 = llvm.getelementptr %709[%722] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %724 = builtin.unrealized_conversion_cast %723 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %725 = llvm.mlir.constant(0 : index) : i64
    %726 = builtin.unrealized_conversion_cast %725 : i64 to index
    %727 = llvm.mlir.constant(0 : index) : i64
    %728 = builtin.unrealized_conversion_cast %727 : i64 to index
    %729 = llvm.extractvalue %691[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %730 = builtin.unrealized_conversion_cast %726 : index to i64
    %731 = llvm.mlir.constant(802816 : index) : i64
    %732 = llvm.mul %730, %731  : i64
    %733 = builtin.unrealized_conversion_cast %698 : index to i64
    %734 = llvm.mlir.constant(12544 : index) : i64
    %735 = llvm.mul %733, %734  : i64
    %736 = llvm.add %732, %735  : i64
    %737 = builtin.unrealized_conversion_cast %702 : index to i64
    %738 = llvm.mlir.constant(112 : index) : i64
    %739 = llvm.mul %737, %738  : i64
    %740 = llvm.add %736, %739  : i64
    %741 = builtin.unrealized_conversion_cast %728 : index to i64
    %742 = llvm.add %740, %741  : i64
    %743 = llvm.getelementptr %729[%742] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %744 = builtin.unrealized_conversion_cast %743 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %745 = llvm.extractvalue %724[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %746 = llvm.extractvalue %744[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.call @forward_kernel_4(%745, %746) : (!llvm.ptr, !llvm.ptr) -> ()
    %747 = llvm.add %703, %29  : i64
    %748 = builtin.unrealized_conversion_cast %747 : i64 to index
    llvm.br ^bb44(%747 : i64)
  ^bb46:  // pred: ^bb44
    %749 = llvm.add %699, %35  : i64
    %750 = builtin.unrealized_conversion_cast %749 : i64 to index
    llvm.br ^bb42(%749 : i64)
  ^bb47:  // pred: ^bb42
    %751 = llvm.add %695, %35  : i64
    %752 = builtin.unrealized_conversion_cast %751 : i64 to index
    llvm.br ^bb40(%751 : i64)
  ^bb48:  // pred: ^bb40
    %753 = llvm.mlir.constant(1 : index) : i64
    %754 = llvm.mlir.constant(64 : index) : i64
    %755 = llvm.mlir.constant(114 : index) : i64
    %756 = llvm.mlir.constant(114 : index) : i64
    %757 = llvm.mlir.constant(1 : index) : i64
    %758 = llvm.mlir.constant(12996 : index) : i64
    %759 = llvm.mlir.constant(831744 : index) : i64
    %760 = llvm.mlir.constant(831744 : index) : i64
    %761 = llvm.mlir.null : !llvm.ptr
    %762 = llvm.getelementptr %761[%760] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %763 = llvm.ptrtoint %762 : !llvm.ptr to i64
    %764 = llvm.mlir.constant(64 : index) : i64
    %765 = llvm.add %763, %764  : i64
    %766 = llvm.call @malloc(%765) : (i64) -> !llvm.ptr
    %767 = llvm.ptrtoint %766 : !llvm.ptr to i64
    %768 = llvm.mlir.constant(1 : index) : i64
    %769 = llvm.sub %764, %768  : i64
    %770 = llvm.add %767, %769  : i64
    %771 = llvm.urem %770, %764  : i64
    %772 = llvm.sub %770, %771  : i64
    %773 = llvm.inttoptr %772 : i64 to !llvm.ptr
    %774 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %775 = llvm.insertvalue %766, %774[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %776 = llvm.insertvalue %773, %775[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %777 = llvm.mlir.constant(0 : index) : i64
    %778 = llvm.insertvalue %777, %776[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %779 = llvm.insertvalue %753, %778[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %780 = llvm.insertvalue %754, %779[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %781 = llvm.insertvalue %755, %780[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %782 = llvm.insertvalue %756, %781[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %783 = llvm.insertvalue %759, %782[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %784 = llvm.insertvalue %758, %783[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %785 = llvm.insertvalue %756, %784[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %786 = llvm.insertvalue %757, %785[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %787 = builtin.unrealized_conversion_cast %786 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> to memref<1x64x114x114xf32>
    llvm.br ^bb49(%36 : i64)
  ^bb49(%788: i64):  // 2 preds: ^bb48, ^bb56
    %789 = builtin.unrealized_conversion_cast %788 : i64 to index
    %790 = builtin.unrealized_conversion_cast %789 : index to i64
    %791 = llvm.icmp "slt" %790, %35 : i64
    llvm.cond_br %791, ^bb50, ^bb57
  ^bb50:  // pred: ^bb49
    llvm.br ^bb51(%36 : i64)
  ^bb51(%792: i64):  // 2 preds: ^bb50, ^bb55
    %793 = builtin.unrealized_conversion_cast %792 : i64 to index
    %794 = builtin.unrealized_conversion_cast %793 : index to i64
    %795 = llvm.icmp "slt" %794, %31 : i64
    llvm.cond_br %795, ^bb52, ^bb56
  ^bb52:  // pred: ^bb51
    llvm.br ^bb53(%36 : i64)
  ^bb53(%796: i64):  // 2 preds: ^bb52, ^bb54
    %797 = builtin.unrealized_conversion_cast %796 : i64 to index
    %798 = builtin.unrealized_conversion_cast %797 : index to i64
    %799 = llvm.icmp "slt" %798, %27 : i64
    llvm.cond_br %799, ^bb54, ^bb55
  ^bb54:  // pred: ^bb53
    %800 = llvm.mlir.constant(0 : index) : i64
    %801 = builtin.unrealized_conversion_cast %800 : i64 to index
    %802 = llvm.mlir.constant(0 : index) : i64
    %803 = builtin.unrealized_conversion_cast %802 : i64 to index
    %804 = llvm.extractvalue %786[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %805 = builtin.unrealized_conversion_cast %801 : index to i64
    %806 = llvm.mlir.constant(831744 : index) : i64
    %807 = llvm.mul %805, %806  : i64
    %808 = builtin.unrealized_conversion_cast %793 : index to i64
    %809 = llvm.mlir.constant(12996 : index) : i64
    %810 = llvm.mul %808, %809  : i64
    %811 = llvm.add %807, %810  : i64
    %812 = builtin.unrealized_conversion_cast %797 : index to i64
    %813 = llvm.mlir.constant(114 : index) : i64
    %814 = llvm.mul %812, %813  : i64
    %815 = llvm.add %811, %814  : i64
    %816 = builtin.unrealized_conversion_cast %803 : index to i64
    %817 = llvm.add %815, %816  : i64
    %818 = llvm.getelementptr %804[%817] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %819 = builtin.unrealized_conversion_cast %818 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %820 = llvm.extractvalue %819[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.call @forward_kernel_5(%820) : (!llvm.ptr) -> ()
    %821 = llvm.add %798, %26  : i64
    %822 = builtin.unrealized_conversion_cast %821 : i64 to index
    llvm.br ^bb53(%821 : i64)
  ^bb55:  // pred: ^bb53
    %823 = llvm.add %794, %35  : i64
    %824 = builtin.unrealized_conversion_cast %823 : i64 to index
    llvm.br ^bb51(%823 : i64)
  ^bb56:  // pred: ^bb51
    %825 = llvm.add %790, %35  : i64
    %826 = builtin.unrealized_conversion_cast %825 : i64 to index
    llvm.br ^bb49(%825 : i64)
  ^bb57:  // pred: ^bb49
    %827 = llvm.mlir.constant(1 : index) : i64
    %828 = llvm.mlir.constant(64 : index) : i64
    %829 = llvm.mlir.constant(114 : index) : i64
    %830 = llvm.mlir.constant(114 : index) : i64
    %831 = llvm.mlir.constant(1 : index) : i64
    %832 = llvm.mlir.constant(12996 : index) : i64
    %833 = llvm.mlir.constant(831744 : index) : i64
    %834 = llvm.mlir.constant(831744 : index) : i64
    %835 = llvm.mlir.null : !llvm.ptr
    %836 = llvm.getelementptr %835[%834] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %837 = llvm.ptrtoint %836 : !llvm.ptr to i64
    %838 = llvm.mlir.constant(64 : index) : i64
    %839 = llvm.add %837, %838  : i64
    %840 = llvm.call @malloc(%839) : (i64) -> !llvm.ptr
    %841 = llvm.ptrtoint %840 : !llvm.ptr to i64
    %842 = llvm.mlir.constant(1 : index) : i64
    %843 = llvm.sub %838, %842  : i64
    %844 = llvm.add %841, %843  : i64
    %845 = llvm.urem %844, %838  : i64
    %846 = llvm.sub %844, %845  : i64
    %847 = llvm.inttoptr %846 : i64 to !llvm.ptr
    %848 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %849 = llvm.insertvalue %840, %848[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %850 = llvm.insertvalue %847, %849[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %851 = llvm.mlir.constant(0 : index) : i64
    %852 = llvm.insertvalue %851, %850[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %853 = llvm.insertvalue %827, %852[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %854 = llvm.insertvalue %828, %853[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %855 = llvm.insertvalue %829, %854[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %856 = llvm.insertvalue %830, %855[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %857 = llvm.insertvalue %833, %856[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %858 = llvm.insertvalue %832, %857[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %859 = llvm.insertvalue %830, %858[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %860 = llvm.insertvalue %831, %859[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %861 = builtin.unrealized_conversion_cast %860 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> to memref<1x64x114x114xf32>
    %862 = llvm.mlir.constant(1 : index) : i64
    %863 = llvm.extractvalue %786[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %864 = llvm.mul %862, %863  : i64
    %865 = llvm.extractvalue %786[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %866 = llvm.mul %864, %865  : i64
    %867 = llvm.extractvalue %786[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %868 = llvm.mul %866, %867  : i64
    %869 = llvm.extractvalue %786[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %870 = llvm.mul %868, %869  : i64
    %871 = llvm.mlir.null : !llvm.ptr
    %872 = llvm.getelementptr %871[1] : (!llvm.ptr) -> !llvm.ptr, f32
    %873 = llvm.ptrtoint %872 : !llvm.ptr to i64
    %874 = llvm.mul %870, %873  : i64
    %875 = llvm.extractvalue %786[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %876 = llvm.extractvalue %786[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %877 = llvm.getelementptr %875[%876] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %878 = llvm.extractvalue %860[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %879 = llvm.extractvalue %860[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %880 = llvm.getelementptr %878[%879] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    "llvm.intr.memcpy"(%880, %877, %874) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> ()
    %881 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %882 = llvm.extractvalue %860[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %883 = llvm.extractvalue %860[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %884 = llvm.insertvalue %882, %881[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %885 = llvm.insertvalue %883, %884[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %886 = llvm.mlir.constant(115 : index) : i64
    %887 = llvm.insertvalue %886, %885[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %888 = llvm.mlir.constant(1 : index) : i64
    %889 = llvm.insertvalue %888, %887[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %890 = llvm.mlir.constant(831744 : index) : i64
    %891 = llvm.insertvalue %890, %889[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %892 = llvm.mlir.constant(64 : index) : i64
    %893 = llvm.insertvalue %892, %891[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %894 = llvm.mlir.constant(12996 : index) : i64
    %895 = llvm.insertvalue %894, %893[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %896 = llvm.mlir.constant(112 : index) : i64
    %897 = llvm.insertvalue %896, %895[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %898 = llvm.mlir.constant(114 : index) : i64
    %899 = llvm.insertvalue %898, %897[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %900 = llvm.mlir.constant(112 : index) : i64
    %901 = llvm.insertvalue %900, %899[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %902 = llvm.mlir.constant(1 : index) : i64
    %903 = llvm.insertvalue %902, %901[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %904 = llvm.intr.stacksave : !llvm.ptr
    %905 = llvm.mlir.constant(4 : i64) : i64
    %906 = llvm.mlir.constant(1 : index) : i64
    %907 = llvm.alloca %906 x !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> : (i64) -> !llvm.ptr
    llvm.store %691, %907 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>, !llvm.ptr
    %908 = llvm.mlir.undef : !llvm.struct<(i64, ptr)>
    %909 = llvm.insertvalue %905, %908[0] : !llvm.struct<(i64, ptr)> 
    %910 = llvm.insertvalue %907, %909[1] : !llvm.struct<(i64, ptr)> 
    %911 = llvm.mlir.constant(4 : i64) : i64
    %912 = llvm.mlir.constant(1 : index) : i64
    %913 = llvm.alloca %912 x !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> : (i64) -> !llvm.ptr
    llvm.store %903, %913 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>, !llvm.ptr
    %914 = llvm.mlir.undef : !llvm.struct<(i64, ptr)>
    %915 = llvm.insertvalue %911, %914[0] : !llvm.struct<(i64, ptr)> 
    %916 = llvm.insertvalue %913, %915[1] : !llvm.struct<(i64, ptr)> 
    %917 = llvm.mlir.constant(1 : index) : i64
    %918 = llvm.alloca %917 x !llvm.struct<(i64, ptr)> : (i64) -> !llvm.ptr
    llvm.store %910, %918 : !llvm.struct<(i64, ptr)>, !llvm.ptr
    %919 = llvm.alloca %917 x !llvm.struct<(i64, ptr)> : (i64) -> !llvm.ptr
    llvm.store %916, %919 : !llvm.struct<(i64, ptr)>, !llvm.ptr
    %920 = llvm.mlir.constant(4 : index) : i64
    llvm.call @memrefCopy(%920, %918, %919) : (i64, !llvm.ptr, !llvm.ptr) -> ()
    llvm.intr.stackrestore %904 : !llvm.ptr
    %921 = llvm.mlir.constant(1 : index) : i64
    %922 = llvm.mlir.constant(64 : index) : i64
    %923 = llvm.mlir.constant(56 : index) : i64
    %924 = llvm.mlir.constant(56 : index) : i64
    %925 = llvm.mlir.constant(1 : index) : i64
    %926 = llvm.mlir.constant(3136 : index) : i64
    %927 = llvm.mlir.constant(200704 : index) : i64
    %928 = llvm.mlir.constant(200704 : index) : i64
    %929 = llvm.mlir.null : !llvm.ptr
    %930 = llvm.getelementptr %929[%928] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %931 = llvm.ptrtoint %930 : !llvm.ptr to i64
    %932 = llvm.mlir.constant(64 : index) : i64
    %933 = llvm.add %931, %932  : i64
    %934 = llvm.call @malloc(%933) : (i64) -> !llvm.ptr
    %935 = llvm.ptrtoint %934 : !llvm.ptr to i64
    %936 = llvm.mlir.constant(1 : index) : i64
    %937 = llvm.sub %932, %936  : i64
    %938 = llvm.add %935, %937  : i64
    %939 = llvm.urem %938, %932  : i64
    %940 = llvm.sub %938, %939  : i64
    %941 = llvm.inttoptr %940 : i64 to !llvm.ptr
    %942 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %943 = llvm.insertvalue %934, %942[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %944 = llvm.insertvalue %941, %943[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %945 = llvm.mlir.constant(0 : index) : i64
    %946 = llvm.insertvalue %945, %944[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %947 = llvm.insertvalue %921, %946[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %948 = llvm.insertvalue %922, %947[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %949 = llvm.insertvalue %923, %948[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %950 = llvm.insertvalue %924, %949[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %951 = llvm.insertvalue %927, %950[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %952 = llvm.insertvalue %926, %951[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %953 = llvm.insertvalue %924, %952[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %954 = llvm.insertvalue %925, %953[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %955 = builtin.unrealized_conversion_cast %954 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> to memref<1x64x56x56xf32>
    llvm.br ^bb58(%36 : i64)
  ^bb58(%956: i64):  // 2 preds: ^bb57, ^bb65
    %957 = builtin.unrealized_conversion_cast %956 : i64 to index
    %958 = builtin.unrealized_conversion_cast %957 : index to i64
    %959 = llvm.icmp "slt" %958, %35 : i64
    llvm.cond_br %959, ^bb59, ^bb66
  ^bb59:  // pred: ^bb58
    llvm.br ^bb60(%36 : i64)
  ^bb60(%960: i64):  // 2 preds: ^bb59, ^bb64
    %961 = builtin.unrealized_conversion_cast %960 : i64 to index
    %962 = builtin.unrealized_conversion_cast %961 : index to i64
    %963 = llvm.icmp "slt" %962, %31 : i64
    llvm.cond_br %963, ^bb61, ^bb65
  ^bb61:  // pred: ^bb60
    llvm.br ^bb62(%36 : i64)
  ^bb62(%964: i64):  // 2 preds: ^bb61, ^bb63
    %965 = builtin.unrealized_conversion_cast %964 : i64 to index
    %966 = builtin.unrealized_conversion_cast %965 : index to i64
    %967 = llvm.icmp "slt" %966, %25 : i64
    llvm.cond_br %967, ^bb63, ^bb64
  ^bb63:  // pred: ^bb62
    %968 = llvm.mlir.constant(0 : index) : i64
    %969 = builtin.unrealized_conversion_cast %968 : i64 to index
    %970 = llvm.mlir.constant(0 : index) : i64
    %971 = builtin.unrealized_conversion_cast %970 : i64 to index
    %972 = llvm.extractvalue %954[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %973 = builtin.unrealized_conversion_cast %969 : index to i64
    %974 = llvm.mlir.constant(200704 : index) : i64
    %975 = llvm.mul %973, %974  : i64
    %976 = builtin.unrealized_conversion_cast %961 : index to i64
    %977 = llvm.mlir.constant(3136 : index) : i64
    %978 = llvm.mul %976, %977  : i64
    %979 = llvm.add %975, %978  : i64
    %980 = builtin.unrealized_conversion_cast %965 : index to i64
    %981 = llvm.mlir.constant(56 : index) : i64
    %982 = llvm.mul %980, %981  : i64
    %983 = llvm.add %979, %982  : i64
    %984 = builtin.unrealized_conversion_cast %971 : index to i64
    %985 = llvm.add %983, %984  : i64
    %986 = llvm.getelementptr %972[%985] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %987 = builtin.unrealized_conversion_cast %986 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %988 = llvm.extractvalue %987[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.call @forward_kernel_6(%988) : (!llvm.ptr) -> ()
    %989 = llvm.add %966, %24  : i64
    %990 = builtin.unrealized_conversion_cast %989 : i64 to index
    llvm.br ^bb62(%989 : i64)
  ^bb64:  // pred: ^bb62
    %991 = llvm.add %962, %35  : i64
    %992 = builtin.unrealized_conversion_cast %991 : i64 to index
    llvm.br ^bb60(%991 : i64)
  ^bb65:  // pred: ^bb60
    %993 = llvm.add %958, %35  : i64
    %994 = builtin.unrealized_conversion_cast %993 : i64 to index
    llvm.br ^bb58(%993 : i64)
  ^bb66:  // pred: ^bb58
    %995 = llvm.mlir.constant(1 : index) : i64
    %996 = llvm.mlir.constant(64 : index) : i64
    %997 = llvm.mlir.constant(56 : index) : i64
    %998 = llvm.mlir.constant(56 : index) : i64
    %999 = llvm.mlir.constant(1 : index) : i64
    %1000 = llvm.mlir.constant(3136 : index) : i64
    %1001 = llvm.mlir.constant(200704 : index) : i64
    %1002 = llvm.mlir.constant(200704 : index) : i64
    %1003 = llvm.mlir.null : !llvm.ptr
    %1004 = llvm.getelementptr %1003[%1002] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %1005 = llvm.ptrtoint %1004 : !llvm.ptr to i64
    %1006 = llvm.mlir.constant(64 : index) : i64
    %1007 = llvm.add %1005, %1006  : i64
    %1008 = llvm.call @malloc(%1007) : (i64) -> !llvm.ptr
    %1009 = llvm.ptrtoint %1008 : !llvm.ptr to i64
    %1010 = llvm.mlir.constant(1 : index) : i64
    %1011 = llvm.sub %1006, %1010  : i64
    %1012 = llvm.add %1009, %1011  : i64
    %1013 = llvm.urem %1012, %1006  : i64
    %1014 = llvm.sub %1012, %1013  : i64
    %1015 = llvm.inttoptr %1014 : i64 to !llvm.ptr
    %1016 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %1017 = llvm.insertvalue %1008, %1016[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1018 = llvm.insertvalue %1015, %1017[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1019 = llvm.mlir.constant(0 : index) : i64
    %1020 = llvm.insertvalue %1019, %1018[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1021 = llvm.insertvalue %995, %1020[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1022 = llvm.insertvalue %996, %1021[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1023 = llvm.insertvalue %997, %1022[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1024 = llvm.insertvalue %998, %1023[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1025 = llvm.insertvalue %1001, %1024[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1026 = llvm.insertvalue %1000, %1025[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1027 = llvm.insertvalue %998, %1026[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1028 = llvm.insertvalue %999, %1027[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1029 = builtin.unrealized_conversion_cast %1028 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> to memref<1x64x56x56xf32>
    %1030 = llvm.mlir.constant(1 : index) : i64
    %1031 = llvm.extractvalue %954[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1032 = llvm.mul %1030, %1031  : i64
    %1033 = llvm.extractvalue %954[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1034 = llvm.mul %1032, %1033  : i64
    %1035 = llvm.extractvalue %954[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1036 = llvm.mul %1034, %1035  : i64
    %1037 = llvm.extractvalue %954[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1038 = llvm.mul %1036, %1037  : i64
    %1039 = llvm.mlir.null : !llvm.ptr
    %1040 = llvm.getelementptr %1039[1] : (!llvm.ptr) -> !llvm.ptr, f32
    %1041 = llvm.ptrtoint %1040 : !llvm.ptr to i64
    %1042 = llvm.mul %1038, %1041  : i64
    %1043 = llvm.extractvalue %954[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1044 = llvm.extractvalue %954[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1045 = llvm.getelementptr %1043[%1044] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %1046 = llvm.extractvalue %1028[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1047 = llvm.extractvalue %1028[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1048 = llvm.getelementptr %1046[%1047] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    "llvm.intr.memcpy"(%1048, %1045, %1042) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> ()
    llvm.br ^bb67(%36 : i64)
  ^bb67(%1049: i64):  // 2 preds: ^bb66, ^bb74
    %1050 = builtin.unrealized_conversion_cast %1049 : i64 to index
    %1051 = builtin.unrealized_conversion_cast %1050 : index to i64
    %1052 = llvm.icmp "slt" %1051, %35 : i64
    llvm.cond_br %1052, ^bb68, ^bb75
  ^bb68:  // pred: ^bb67
    llvm.br ^bb69(%36 : i64)
  ^bb69(%1053: i64):  // 2 preds: ^bb68, ^bb73
    %1054 = builtin.unrealized_conversion_cast %1053 : i64 to index
    %1055 = builtin.unrealized_conversion_cast %1054 : index to i64
    %1056 = llvm.icmp "slt" %1055, %31 : i64
    llvm.cond_br %1056, ^bb70, ^bb74
  ^bb70:  // pred: ^bb69
    llvm.br ^bb71(%36 : i64)
  ^bb71(%1057: i64):  // 2 preds: ^bb70, ^bb72
    %1058 = builtin.unrealized_conversion_cast %1057 : i64 to index
    %1059 = builtin.unrealized_conversion_cast %1058 : index to i64
    %1060 = llvm.icmp "slt" %1059, %25 : i64
    llvm.cond_br %1060, ^bb72, ^bb73
  ^bb72:  // pred: ^bb71
    %1061 = llvm.mlir.constant(0 : index) : i64
    %1062 = builtin.unrealized_conversion_cast %1061 : i64 to index
    %1063 = llvm.mlir.constant(2 : index) : i64
    %1064 = llvm.mul %1057, %1063  : i64
    %1065 = builtin.unrealized_conversion_cast %1064 : i64 to index
    %1066 = llvm.mlir.constant(0 : index) : i64
    %1067 = builtin.unrealized_conversion_cast %1066 : i64 to index
    %1068 = llvm.extractvalue %860[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1069 = builtin.unrealized_conversion_cast %1062 : index to i64
    %1070 = llvm.mlir.constant(831744 : index) : i64
    %1071 = llvm.mul %1069, %1070  : i64
    %1072 = builtin.unrealized_conversion_cast %1054 : index to i64
    %1073 = llvm.mlir.constant(12996 : index) : i64
    %1074 = llvm.mul %1072, %1073  : i64
    %1075 = llvm.add %1071, %1074  : i64
    %1076 = builtin.unrealized_conversion_cast %1065 : index to i64
    %1077 = llvm.mlir.constant(114 : index) : i64
    %1078 = llvm.mul %1076, %1077  : i64
    %1079 = llvm.add %1075, %1078  : i64
    %1080 = builtin.unrealized_conversion_cast %1067 : index to i64
    %1081 = llvm.add %1079, %1080  : i64
    %1082 = llvm.getelementptr %1068[%1081] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %1083 = builtin.unrealized_conversion_cast %1082 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %1084 = llvm.mlir.constant(0 : index) : i64
    %1085 = builtin.unrealized_conversion_cast %1084 : i64 to index
    %1086 = llvm.mlir.constant(0 : index) : i64
    %1087 = builtin.unrealized_conversion_cast %1086 : i64 to index
    %1088 = llvm.extractvalue %1028[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1089 = builtin.unrealized_conversion_cast %1085 : index to i64
    %1090 = llvm.mlir.constant(200704 : index) : i64
    %1091 = llvm.mul %1089, %1090  : i64
    %1092 = builtin.unrealized_conversion_cast %1054 : index to i64
    %1093 = llvm.mlir.constant(3136 : index) : i64
    %1094 = llvm.mul %1092, %1093  : i64
    %1095 = llvm.add %1091, %1094  : i64
    %1096 = builtin.unrealized_conversion_cast %1058 : index to i64
    %1097 = llvm.mlir.constant(56 : index) : i64
    %1098 = llvm.mul %1096, %1097  : i64
    %1099 = llvm.add %1095, %1098  : i64
    %1100 = builtin.unrealized_conversion_cast %1087 : index to i64
    %1101 = llvm.add %1099, %1100  : i64
    %1102 = llvm.getelementptr %1088[%1101] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %1103 = builtin.unrealized_conversion_cast %1102 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %1104 = llvm.mlir.constant(0 : index) : i64
    %1105 = builtin.unrealized_conversion_cast %1104 : i64 to index
    %1106 = llvm.mlir.constant(0 : index) : i64
    %1107 = builtin.unrealized_conversion_cast %1106 : i64 to index
    %1108 = llvm.extractvalue %1028[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1109 = builtin.unrealized_conversion_cast %1105 : index to i64
    %1110 = llvm.mlir.constant(200704 : index) : i64
    %1111 = llvm.mul %1109, %1110  : i64
    %1112 = builtin.unrealized_conversion_cast %1054 : index to i64
    %1113 = llvm.mlir.constant(3136 : index) : i64
    %1114 = llvm.mul %1112, %1113  : i64
    %1115 = llvm.add %1111, %1114  : i64
    %1116 = builtin.unrealized_conversion_cast %1058 : index to i64
    %1117 = llvm.mlir.constant(56 : index) : i64
    %1118 = llvm.mul %1116, %1117  : i64
    %1119 = llvm.add %1115, %1118  : i64
    %1120 = builtin.unrealized_conversion_cast %1107 : index to i64
    %1121 = llvm.add %1119, %1120  : i64
    %1122 = llvm.getelementptr %1108[%1121] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %1123 = builtin.unrealized_conversion_cast %1122 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %1124 = llvm.extractvalue %1083[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1125 = llvm.extractvalue %1103[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1126 = llvm.extractvalue %1123[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.call @forward_kernel_7(%1124, %1125, %1126) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> ()
    %1127 = llvm.add %1059, %23  : i64
    %1128 = builtin.unrealized_conversion_cast %1127 : i64 to index
    llvm.br ^bb71(%1127 : i64)
  ^bb73:  // pred: ^bb71
    %1129 = llvm.add %1055, %35  : i64
    %1130 = builtin.unrealized_conversion_cast %1129 : i64 to index
    llvm.br ^bb69(%1129 : i64)
  ^bb74:  // pred: ^bb69
    %1131 = llvm.add %1051, %35  : i64
    %1132 = builtin.unrealized_conversion_cast %1131 : i64 to index
    llvm.br ^bb67(%1131 : i64)
  ^bb75:  // pred: ^bb67
    %1133 = llvm.extractvalue %1028[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.return %1133 : !llvm.ptr
  }
  llvm.func @forward_kernel_0(!llvm.ptr) attributes {Kernel, forward_kernel_0}
  llvm.func @forward_kernel_1(!llvm.ptr) attributes {Kernel, forward_kernel_1}
  llvm.func @forward_kernel_2(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) attributes {Kernel, forward_kernel_2}
  llvm.func @forward_kernel_3(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) attributes {Kernel, forward_kernel_3}
  llvm.func @forward_kernel_4(!llvm.ptr, !llvm.ptr) attributes {Kernel, forward_kernel_4}
  llvm.func @forward_kernel_5(!llvm.ptr) attributes {Kernel, forward_kernel_5}
  llvm.func @forward_kernel_6(!llvm.ptr) attributes {Kernel, forward_kernel_6}
  llvm.func @forward_kernel_7(!llvm.ptr, !llvm.ptr, !llvm.ptr) attributes {Kernel, forward_kernel_7}
}


// -----// IR Dump After FinalizeMemRefToLLVMConversionPass (finalize-memref-to-llvm) //----- //
module attributes {llvm.data_layout = "", torch.debug_module_name = "ResNet"} {
  llvm.func @memrefCopy(i64, !llvm.ptr, !llvm.ptr)
  llvm.func @malloc(i64) -> !llvm.ptr
  llvm.mlir.global private constant @__constant_64xf32_2(dense<[0.230717152, 0.253822476, -1.05429808E-6, -0.664388895, -1.65705547E-8, 0.161521927, 0.454503953, -4.301950e-07, 0.300513744, -8.005240e-06, 0.349418074, 0.311480612, -0.249529764, -3.474890e-05, 0.107726313, 0.218970656, 0.381412596, -0.529882133, -0.628644109, 0.571398079, 0.299846917, 0.584303737, 0.48202154, 0.328526348, 0.196717009, 0.194961801, 0.152145416, 0.085522361, 0.513142824, 0.0152367353, 0.166441768, 0.332394391, 0.249211237, 0.443366677, -0.280169278, -0.0203848016, -2.45068748E-7, 0.321340501, -4.9151744E-8, 0.237767309, 0.232907727, 0.315274626, 0.427762389, 0.293127537, 0.263794243, 0.675975859, 0.429100394, 0.345662743, -8.69090186E-8, 0.247294366, 0.303160846, 0.615772783, 0.39834857, 0.332067341, -0.412187815, 0.378069043, 0.178953409, 0.25747788, -0.449079722, 0.213058949, 0.569339037, 5.727430e-01, -0.402383476, 0.23406373]> : tensor<64xf32>) {addr_space = 0 : i32} : !llvm.array<64 x f32>
  llvm.mlir.global private constant @__constant_64xf32_1(dense<[0.234872743, 0.266257942, -5.10959595E-8, 0.518699706, 3.44040196E-9, 0.222385287, 0.422887057, 1.31532403E-7, 0.25093165, 1.5152026E-6, 0.316871643, 0.250491828, 0.378926098, 1.08618351E-5, 2.752640e-01, 0.236741036, 0.242021769, 0.395314813, 0.469346285, 0.2908957, 0.272684187, 0.27802828, 0.290692091, 0.206927493, 0.258990377, 0.278710574, 0.291149527, 0.316013753, 0.388891488, 0.304111898, 0.267757207, 0.210925162, 0.287084132, 0.332426429, 0.42672804, 0.373260558, 7.48037578E-8, 0.19067812, 1.47401256E-8, 0.223029822, 0.179079413, 0.248600766, 0.27399528, 0.259228647, 0.294202209, 0.299236417, 0.223688841, 0.262799472, 2.20011476E-8, 0.266098082, 0.220890298, 0.284285516, 0.330723315, 0.226809531, 0.365380913, 0.21229881, 0.239653021, 0.24949576, 0.525830686, 0.248247579, 0.295652747, 0.258776665, 0.4832564, 0.26670444]> : tensor<64xf32>) {addr_space = 0 : i32} : !llvm.array<64 x f32>
  llvm.mlir.global private constant @__constant_64xf32_0(dense<[1.01694489, 3.71674347, 5.81334356E-11, 3.28254271, 1.71074404E-13, 0.658226967, 4.37006235, 6.60045282E-12, 0.915522992, 1.93175254E-9, 4.12558556, 2.74399233, 2.8390913, 4.79658588E-8, 11.0722713, 0.500745952, 2.23128176, 4.82570696, 2.69861364, 9.36995506, 3.73391747, 5.48429585, 5.7126689, 0.445444882, 0.436275303, 7.15633583, 13.7179089, 5.25117493, 6.81737518, 1.67235756, 1.65343034, 1.23245978, 4.90762854, 3.07305121, 4.23838568, 4.99363518, 1.44646307E-12, 1.52116203, 1.03519833E-13, 0.351344079, 0.17024748, 1.42054474, 1.90848303, 2.15124035, 2.66084933, 4.84443378, 1.92971194, 1.49994361, 2.94806145E-13, 1.53064024, 0.365027189, 2.93755412, 5.46641159, 0.707924544, 3.33150721, 0.771802961, 2.40678358, 6.5213666, 4.12625027, 1.05063522, 2.95303202, 11.3656216, 4.76904678, 1.65587807]> : tensor<64xf32>) {addr_space = 0 : i32} : !llvm.array<64 x f32>
  llvm.mlir.global private constant @__constant_64xf32(dense<[0.00276811025, -0.0257689245, 2.12544663E-7, -0.0846051499, 2.11205915E-8, 4.96906461E-4, -0.0224083271, -1.15818956E-7, -4.823850e-03, 2.75073347E-7, 3.958230e-02, 0.0319936387, -0.0374896601, -1.37163477E-6, 0.00660019321, 4.378190e-03, 0.0647971481, 0.11175999, 0.0360015705, -0.0750752166, -0.03824009, 0.0843578502, -5.228700e-02, -0.0117988894, 0.00130188058, 0.0321722962, -0.0177843049, -0.0910085887, 0.113187239, -0.0416320041, 0.00873024761, 0.0296931695, -0.0705021694, -0.00348469778, 0.109771468, -0.00173411821, -5.94229412E-8, 0.0293303896, -7.85527287E-9, 0.00673204474, -0.00370999542, 0.0160279572, -0.0278826058, 0.0265925378, 0.0284745526, -0.12734659, 0.0446168408, 0.0263288375, 2.14538591E-8, -1.704500e-02, -0.00356168114, -0.0458412617, 0.0638761446, 0.0152198272, -0.0385114551, -0.0164278317, -0.016568929, 0.0560574941, -0.0803062319, -0.00266457512, -0.0417176671, 0.126112729, -0.0492369682, -0.0132609205]> : tensor<64xf32>) {addr_space = 0 : i32} : !llvm.array<64 x f32>
  llvm.mlir.global private constant @__constant_64x3x7x7xf32(dense<"tensor<64x3x7x7xf32>) {addr_space = 0 : i32} : !llvm.array<64 x array<3 x array<7 x array<7 x f32>>>>
  ml_program.global private mutable @global_seed(dense<0> : tensor<i64>) : tensor<i64>
  llvm.func @forward(%arg0: !llvm.ptr) -> !llvm.ptr {
    %0 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %1 = llvm.insertvalue %arg0, %0[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %2 = llvm.insertvalue %arg0, %1[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %3 = llvm.mlir.constant(0 : index) : i64
    %4 = llvm.insertvalue %3, %2[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %5 = llvm.mlir.constant(1 : index) : i64
    %6 = llvm.insertvalue %5, %4[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %7 = llvm.mlir.constant(150528 : index) : i64
    %8 = llvm.insertvalue %7, %6[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %9 = llvm.mlir.constant(3 : index) : i64
    %10 = llvm.insertvalue %9, %8[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %11 = llvm.mlir.constant(50176 : index) : i64
    %12 = llvm.insertvalue %11, %10[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %13 = llvm.mlir.constant(224 : index) : i64
    %14 = llvm.insertvalue %13, %12[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %15 = llvm.mlir.constant(224 : index) : i64
    %16 = llvm.insertvalue %15, %14[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %17 = llvm.mlir.constant(224 : index) : i64
    %18 = llvm.insertvalue %17, %16[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %19 = llvm.mlir.constant(1 : index) : i64
    %20 = llvm.insertvalue %19, %18[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %21 = builtin.unrealized_conversion_cast %20 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> to memref<1x3x224x224xf32>
    %22 = builtin.unrealized_conversion_cast %21 : memref<1x3x224x224xf32> to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %23 = llvm.mlir.constant(4 : index) : i64
    %24 = llvm.mlir.constant(28 : index) : i64
    %25 = llvm.mlir.constant(56 : index) : i64
    %26 = llvm.mlir.constant(6 : index) : i64
    %27 = llvm.mlir.constant(114 : index) : i64
    %28 = llvm.mlir.constant(8 : index) : i64
    %29 = llvm.mlir.constant(16 : index) : i64
    %30 = llvm.mlir.constant(112 : index) : i64
    %31 = llvm.mlir.constant(64 : index) : i64
    %32 = llvm.mlir.constant(5 : index) : i64
    %33 = llvm.mlir.constant(230 : index) : i64
    %34 = llvm.mlir.constant(3 : index) : i64
    %35 = llvm.mlir.constant(1 : index) : i64
    %36 = llvm.mlir.constant(0 : index) : i64
    %37 = builtin.unrealized_conversion_cast %36 : i64 to index
    %38 = llvm.mlir.constant(64 : index) : i64
    %39 = llvm.mlir.constant(3 : index) : i64
    %40 = llvm.mlir.constant(7 : index) : i64
    %41 = llvm.mlir.constant(7 : index) : i64
    %42 = llvm.mlir.constant(1 : index) : i64
    %43 = llvm.mlir.constant(49 : index) : i64
    %44 = llvm.mlir.constant(147 : index) : i64
    %45 = llvm.mlir.constant(9408 : index) : i64
    %46 = llvm.mlir.null : !llvm.ptr
    %47 = llvm.getelementptr %46[%45] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %48 = llvm.ptrtoint %47 : !llvm.ptr to i64
    %49 = llvm.mlir.addressof @__constant_64x3x7x7xf32 : !llvm.ptr
    %50 = llvm.getelementptr %49[0, 0, 0, 0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<64 x array<3 x array<7 x array<7 x f32>>>>
    %51 = llvm.mlir.constant(3735928559 : index) : i64
    %52 = llvm.inttoptr %51 : i64 to !llvm.ptr
    %53 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %54 = llvm.insertvalue %52, %53[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %55 = llvm.insertvalue %50, %54[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %56 = llvm.mlir.constant(0 : index) : i64
    %57 = llvm.insertvalue %56, %55[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %58 = llvm.insertvalue %38, %57[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %59 = llvm.insertvalue %39, %58[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %60 = llvm.insertvalue %40, %59[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %61 = llvm.insertvalue %41, %60[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %62 = llvm.insertvalue %44, %61[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %63 = llvm.insertvalue %43, %62[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %64 = llvm.insertvalue %41, %63[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %65 = llvm.insertvalue %42, %64[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %66 = builtin.unrealized_conversion_cast %65 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> to memref<64x3x7x7xf32>
    %67 = llvm.mlir.constant(64 : index) : i64
    %68 = llvm.mlir.constant(1 : index) : i64
    %69 = llvm.mlir.null : !llvm.ptr
    %70 = llvm.getelementptr %69[%67] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %71 = llvm.ptrtoint %70 : !llvm.ptr to i64
    %72 = llvm.mlir.addressof @__constant_64xf32 : !llvm.ptr
    %73 = llvm.getelementptr %72[0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<64 x f32>
    %74 = llvm.mlir.constant(3735928559 : index) : i64
    %75 = llvm.inttoptr %74 : i64 to !llvm.ptr
    %76 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %77 = llvm.insertvalue %75, %76[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %78 = llvm.insertvalue %73, %77[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %79 = llvm.mlir.constant(0 : index) : i64
    %80 = llvm.insertvalue %79, %78[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %81 = llvm.insertvalue %67, %80[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %82 = llvm.insertvalue %68, %81[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %83 = builtin.unrealized_conversion_cast %82 : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> to memref<64xf32>
    %84 = llvm.mlir.constant(64 : index) : i64
    %85 = llvm.mlir.constant(1 : index) : i64
    %86 = llvm.mlir.null : !llvm.ptr
    %87 = llvm.getelementptr %86[%84] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %88 = llvm.ptrtoint %87 : !llvm.ptr to i64
    %89 = llvm.mlir.addressof @__constant_64xf32_0 : !llvm.ptr
    %90 = llvm.getelementptr %89[0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<64 x f32>
    %91 = llvm.mlir.constant(3735928559 : index) : i64
    %92 = llvm.inttoptr %91 : i64 to !llvm.ptr
    %93 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %94 = llvm.insertvalue %92, %93[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %95 = llvm.insertvalue %90, %94[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %96 = llvm.mlir.constant(0 : index) : i64
    %97 = llvm.insertvalue %96, %95[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %98 = llvm.insertvalue %84, %97[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %99 = llvm.insertvalue %85, %98[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %100 = builtin.unrealized_conversion_cast %99 : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> to memref<64xf32>
    %101 = llvm.mlir.constant(64 : index) : i64
    %102 = llvm.mlir.constant(1 : index) : i64
    %103 = llvm.mlir.null : !llvm.ptr
    %104 = llvm.getelementptr %103[%101] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %105 = llvm.ptrtoint %104 : !llvm.ptr to i64
    %106 = llvm.mlir.addressof @__constant_64xf32_1 : !llvm.ptr
    %107 = llvm.getelementptr %106[0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<64 x f32>
    %108 = llvm.mlir.constant(3735928559 : index) : i64
    %109 = llvm.inttoptr %108 : i64 to !llvm.ptr
    %110 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %111 = llvm.insertvalue %109, %110[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %112 = llvm.insertvalue %107, %111[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %113 = llvm.mlir.constant(0 : index) : i64
    %114 = llvm.insertvalue %113, %112[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %115 = llvm.insertvalue %101, %114[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %116 = llvm.insertvalue %102, %115[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %117 = builtin.unrealized_conversion_cast %116 : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> to memref<64xf32>
    %118 = llvm.mlir.constant(64 : index) : i64
    %119 = llvm.mlir.constant(1 : index) : i64
    %120 = llvm.mlir.null : !llvm.ptr
    %121 = llvm.getelementptr %120[%118] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %122 = llvm.ptrtoint %121 : !llvm.ptr to i64
    %123 = llvm.mlir.addressof @__constant_64xf32_2 : !llvm.ptr
    %124 = llvm.getelementptr %123[0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<64 x f32>
    %125 = llvm.mlir.constant(3735928559 : index) : i64
    %126 = llvm.inttoptr %125 : i64 to !llvm.ptr
    %127 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %128 = llvm.insertvalue %126, %127[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %129 = llvm.insertvalue %124, %128[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %130 = llvm.mlir.constant(0 : index) : i64
    %131 = llvm.insertvalue %130, %129[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %132 = llvm.insertvalue %118, %131[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %133 = llvm.insertvalue %119, %132[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %134 = builtin.unrealized_conversion_cast %133 : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> to memref<64xf32>
    %135 = llvm.mlir.constant(1 : index) : i64
    %136 = llvm.mlir.constant(3 : index) : i64
    %137 = llvm.mlir.constant(230 : index) : i64
    %138 = llvm.mlir.constant(230 : index) : i64
    %139 = llvm.mlir.constant(1 : index) : i64
    %140 = llvm.mlir.constant(52900 : index) : i64
    %141 = llvm.mlir.constant(158700 : index) : i64
    %142 = llvm.mlir.constant(158700 : index) : i64
    %143 = llvm.mlir.null : !llvm.ptr
    %144 = llvm.getelementptr %143[%142] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %145 = llvm.ptrtoint %144 : !llvm.ptr to i64
    %146 = llvm.mlir.constant(64 : index) : i64
    %147 = llvm.add %145, %146  : i64
    %148 = llvm.call @malloc(%147) : (i64) -> !llvm.ptr
    %149 = llvm.ptrtoint %148 : !llvm.ptr to i64
    %150 = llvm.mlir.constant(1 : index) : i64
    %151 = llvm.sub %146, %150  : i64
    %152 = llvm.add %149, %151  : i64
    %153 = llvm.urem %152, %146  : i64
    %154 = llvm.sub %152, %153  : i64
    %155 = llvm.inttoptr %154 : i64 to !llvm.ptr
    %156 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %157 = llvm.insertvalue %148, %156[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %158 = llvm.insertvalue %155, %157[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %159 = llvm.mlir.constant(0 : index) : i64
    %160 = llvm.insertvalue %159, %158[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %161 = llvm.insertvalue %135, %160[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %162 = llvm.insertvalue %136, %161[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %163 = llvm.insertvalue %137, %162[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %164 = llvm.insertvalue %138, %163[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %165 = llvm.insertvalue %141, %164[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %166 = llvm.insertvalue %140, %165[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %167 = llvm.insertvalue %138, %166[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %168 = llvm.insertvalue %139, %167[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %169 = builtin.unrealized_conversion_cast %168 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> to memref<1x3x230x230xf32>
    llvm.br ^bb1(%36 : i64)
  ^bb1(%170: i64):  // 2 preds: ^bb0, ^bb8
    %171 = builtin.unrealized_conversion_cast %170 : i64 to index
    %172 = builtin.unrealized_conversion_cast %171 : index to i64
    %173 = llvm.icmp "slt" %172, %35 : i64
    llvm.cond_br %173, ^bb2, ^bb9
  ^bb2:  // pred: ^bb1
    llvm.br ^bb3(%36 : i64)
  ^bb3(%174: i64):  // 2 preds: ^bb2, ^bb7
    %175 = builtin.unrealized_conversion_cast %174 : i64 to index
    %176 = builtin.unrealized_conversion_cast %175 : index to i64
    %177 = llvm.icmp "slt" %176, %34 : i64
    llvm.cond_br %177, ^bb4, ^bb8
  ^bb4:  // pred: ^bb3
    llvm.br ^bb5(%36 : i64)
  ^bb5(%178: i64):  // 2 preds: ^bb4, ^bb6
    %179 = builtin.unrealized_conversion_cast %178 : i64 to index
    %180 = builtin.unrealized_conversion_cast %179 : index to i64
    %181 = llvm.icmp "slt" %180, %33 : i64
    llvm.cond_br %181, ^bb6, ^bb7
  ^bb6:  // pred: ^bb5
    %182 = llvm.mlir.constant(0 : index) : i64
    %183 = builtin.unrealized_conversion_cast %182 : i64 to index
    %184 = llvm.mlir.constant(0 : index) : i64
    %185 = builtin.unrealized_conversion_cast %184 : i64 to index
    %186 = llvm.extractvalue %168[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %187 = builtin.unrealized_conversion_cast %183 : index to i64
    %188 = llvm.mlir.constant(158700 : index) : i64
    %189 = llvm.mul %187, %188  : i64
    %190 = builtin.unrealized_conversion_cast %175 : index to i64
    %191 = llvm.mlir.constant(52900 : index) : i64
    %192 = llvm.mul %190, %191  : i64
    %193 = llvm.add %189, %192  : i64
    %194 = builtin.unrealized_conversion_cast %179 : index to i64
    %195 = llvm.mlir.constant(230 : index) : i64
    %196 = llvm.mul %194, %195  : i64
    %197 = llvm.add %193, %196  : i64
    %198 = builtin.unrealized_conversion_cast %185 : index to i64
    %199 = llvm.add %197, %198  : i64
    %200 = llvm.getelementptr %186[%199] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %201 = builtin.unrealized_conversion_cast %200 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %202 = llvm.extractvalue %201[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.call @forward_kernel_0(%202) : (!llvm.ptr) -> ()
    %203 = llvm.add %180, %32  : i64
    %204 = builtin.unrealized_conversion_cast %203 : i64 to index
    llvm.br ^bb5(%203 : i64)
  ^bb7:  // pred: ^bb5
    %205 = llvm.add %176, %35  : i64
    %206 = builtin.unrealized_conversion_cast %205 : i64 to index
    llvm.br ^bb3(%205 : i64)
  ^bb8:  // pred: ^bb3
    %207 = llvm.add %172, %35  : i64
    %208 = builtin.unrealized_conversion_cast %207 : i64 to index
    llvm.br ^bb1(%207 : i64)
  ^bb9:  // pred: ^bb1
    %209 = llvm.mlir.constant(1 : index) : i64
    %210 = llvm.mlir.constant(3 : index) : i64
    %211 = llvm.mlir.constant(230 : index) : i64
    %212 = llvm.mlir.constant(230 : index) : i64
    %213 = llvm.mlir.constant(1 : index) : i64
    %214 = llvm.mlir.constant(52900 : index) : i64
    %215 = llvm.mlir.constant(158700 : index) : i64
    %216 = llvm.mlir.constant(158700 : index) : i64
    %217 = llvm.mlir.null : !llvm.ptr
    %218 = llvm.getelementptr %217[%216] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %219 = llvm.ptrtoint %218 : !llvm.ptr to i64
    %220 = llvm.mlir.constant(64 : index) : i64
    %221 = llvm.add %219, %220  : i64
    %222 = llvm.call @malloc(%221) : (i64) -> !llvm.ptr
    %223 = llvm.ptrtoint %222 : !llvm.ptr to i64
    %224 = llvm.mlir.constant(1 : index) : i64
    %225 = llvm.sub %220, %224  : i64
    %226 = llvm.add %223, %225  : i64
    %227 = llvm.urem %226, %220  : i64
    %228 = llvm.sub %226, %227  : i64
    %229 = llvm.inttoptr %228 : i64 to !llvm.ptr
    %230 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %231 = llvm.insertvalue %222, %230[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %232 = llvm.insertvalue %229, %231[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %233 = llvm.mlir.constant(0 : index) : i64
    %234 = llvm.insertvalue %233, %232[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %235 = llvm.insertvalue %209, %234[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %236 = llvm.insertvalue %210, %235[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %237 = llvm.insertvalue %211, %236[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %238 = llvm.insertvalue %212, %237[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %239 = llvm.insertvalue %215, %238[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %240 = llvm.insertvalue %214, %239[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %241 = llvm.insertvalue %212, %240[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %242 = llvm.insertvalue %213, %241[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %243 = builtin.unrealized_conversion_cast %242 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> to memref<1x3x230x230xf32>
    %244 = llvm.mlir.constant(1 : index) : i64
    %245 = llvm.extractvalue %168[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %246 = llvm.mul %244, %245  : i64
    %247 = llvm.extractvalue %168[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %248 = llvm.mul %246, %247  : i64
    %249 = llvm.extractvalue %168[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %250 = llvm.mul %248, %249  : i64
    %251 = llvm.extractvalue %168[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %252 = llvm.mul %250, %251  : i64
    %253 = llvm.mlir.null : !llvm.ptr
    %254 = llvm.getelementptr %253[1] : (!llvm.ptr) -> !llvm.ptr, f32
    %255 = llvm.ptrtoint %254 : !llvm.ptr to i64
    %256 = llvm.mul %252, %255  : i64
    %257 = llvm.extractvalue %168[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %258 = llvm.extractvalue %168[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %259 = llvm.getelementptr %257[%258] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %260 = llvm.extractvalue %242[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %261 = llvm.extractvalue %242[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %262 = llvm.getelementptr %260[%261] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    "llvm.intr.memcpy"(%262, %259, %256) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> ()
    %263 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %264 = llvm.extractvalue %242[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %265 = llvm.extractvalue %242[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %266 = llvm.insertvalue %264, %263[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %267 = llvm.insertvalue %265, %266[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %268 = llvm.mlir.constant(693 : index) : i64
    %269 = llvm.insertvalue %268, %267[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %270 = llvm.mlir.constant(1 : index) : i64
    %271 = llvm.insertvalue %270, %269[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %272 = llvm.mlir.constant(158700 : index) : i64
    %273 = llvm.insertvalue %272, %271[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %274 = llvm.mlir.constant(3 : index) : i64
    %275 = llvm.insertvalue %274, %273[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %276 = llvm.mlir.constant(52900 : index) : i64
    %277 = llvm.insertvalue %276, %275[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %278 = llvm.mlir.constant(224 : index) : i64
    %279 = llvm.insertvalue %278, %277[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %280 = llvm.mlir.constant(230 : index) : i64
    %281 = llvm.insertvalue %280, %279[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %282 = llvm.mlir.constant(224 : index) : i64
    %283 = llvm.insertvalue %282, %281[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %284 = llvm.mlir.constant(1 : index) : i64
    %285 = llvm.insertvalue %284, %283[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %286 = llvm.intr.stacksave : !llvm.ptr
    %287 = llvm.mlir.constant(4 : i64) : i64
    %288 = llvm.mlir.constant(1 : index) : i64
    %289 = llvm.alloca %288 x !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> : (i64) -> !llvm.ptr
    llvm.store %22, %289 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>, !llvm.ptr
    %290 = llvm.mlir.undef : !llvm.struct<(i64, ptr)>
    %291 = llvm.insertvalue %287, %290[0] : !llvm.struct<(i64, ptr)> 
    %292 = llvm.insertvalue %289, %291[1] : !llvm.struct<(i64, ptr)> 
    %293 = llvm.mlir.constant(4 : i64) : i64
    %294 = llvm.mlir.constant(1 : index) : i64
    %295 = llvm.alloca %294 x !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> : (i64) -> !llvm.ptr
    llvm.store %285, %295 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>, !llvm.ptr
    %296 = llvm.mlir.undef : !llvm.struct<(i64, ptr)>
    %297 = llvm.insertvalue %293, %296[0] : !llvm.struct<(i64, ptr)> 
    %298 = llvm.insertvalue %295, %297[1] : !llvm.struct<(i64, ptr)> 
    %299 = llvm.mlir.constant(1 : index) : i64
    %300 = llvm.alloca %299 x !llvm.struct<(i64, ptr)> : (i64) -> !llvm.ptr
    llvm.store %292, %300 : !llvm.struct<(i64, ptr)>, !llvm.ptr
    %301 = llvm.alloca %299 x !llvm.struct<(i64, ptr)> : (i64) -> !llvm.ptr
    llvm.store %298, %301 : !llvm.struct<(i64, ptr)>, !llvm.ptr
    %302 = llvm.mlir.constant(4 : index) : i64
    llvm.call @memrefCopy(%302, %300, %301) : (i64, !llvm.ptr, !llvm.ptr) -> ()
    llvm.intr.stackrestore %286 : !llvm.ptr
    %303 = llvm.mlir.constant(1 : index) : i64
    %304 = llvm.mlir.constant(64 : index) : i64
    %305 = llvm.mlir.constant(112 : index) : i64
    %306 = llvm.mlir.constant(112 : index) : i64
    %307 = llvm.mlir.constant(1 : index) : i64
    %308 = llvm.mlir.constant(12544 : index) : i64
    %309 = llvm.mlir.constant(802816 : index) : i64
    %310 = llvm.mlir.constant(802816 : index) : i64
    %311 = llvm.mlir.null : !llvm.ptr
    %312 = llvm.getelementptr %311[%310] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %313 = llvm.ptrtoint %312 : !llvm.ptr to i64
    %314 = llvm.mlir.constant(64 : index) : i64
    %315 = llvm.add %313, %314  : i64
    %316 = llvm.call @malloc(%315) : (i64) -> !llvm.ptr
    %317 = llvm.ptrtoint %316 : !llvm.ptr to i64
    %318 = llvm.mlir.constant(1 : index) : i64
    %319 = llvm.sub %314, %318  : i64
    %320 = llvm.add %317, %319  : i64
    %321 = llvm.urem %320, %314  : i64
    %322 = llvm.sub %320, %321  : i64
    %323 = llvm.inttoptr %322 : i64 to !llvm.ptr
    %324 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %325 = llvm.insertvalue %316, %324[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %326 = llvm.insertvalue %323, %325[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %327 = llvm.mlir.constant(0 : index) : i64
    %328 = llvm.insertvalue %327, %326[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %329 = llvm.insertvalue %303, %328[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %330 = llvm.insertvalue %304, %329[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %331 = llvm.insertvalue %305, %330[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %332 = llvm.insertvalue %306, %331[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %333 = llvm.insertvalue %309, %332[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %334 = llvm.insertvalue %308, %333[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %335 = llvm.insertvalue %306, %334[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %336 = llvm.insertvalue %307, %335[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %337 = builtin.unrealized_conversion_cast %336 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> to memref<1x64x112x112xf32>
    llvm.br ^bb10(%36 : i64)
  ^bb10(%338: i64):  // 2 preds: ^bb9, ^bb17
    %339 = builtin.unrealized_conversion_cast %338 : i64 to index
    %340 = builtin.unrealized_conversion_cast %339 : index to i64
    %341 = llvm.icmp "slt" %340, %35 : i64
    llvm.cond_br %341, ^bb11, ^bb18
  ^bb11:  // pred: ^bb10
    llvm.br ^bb12(%36 : i64)
  ^bb12(%342: i64):  // 2 preds: ^bb11, ^bb16
    %343 = builtin.unrealized_conversion_cast %342 : i64 to index
    %344 = builtin.unrealized_conversion_cast %343 : index to i64
    %345 = llvm.icmp "slt" %344, %31 : i64
    llvm.cond_br %345, ^bb13, ^bb17
  ^bb13:  // pred: ^bb12
    llvm.br ^bb14(%36 : i64)
  ^bb14(%346: i64):  // 2 preds: ^bb13, ^bb15
    %347 = builtin.unrealized_conversion_cast %346 : i64 to index
    %348 = builtin.unrealized_conversion_cast %347 : index to i64
    %349 = llvm.icmp "slt" %348, %30 : i64
    llvm.cond_br %349, ^bb15, ^bb16
  ^bb15:  // pred: ^bb14
    %350 = llvm.mlir.constant(0 : index) : i64
    %351 = builtin.unrealized_conversion_cast %350 : i64 to index
    %352 = llvm.mlir.constant(0 : index) : i64
    %353 = builtin.unrealized_conversion_cast %352 : i64 to index
    %354 = llvm.extractvalue %336[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %355 = builtin.unrealized_conversion_cast %351 : index to i64
    %356 = llvm.mlir.constant(802816 : index) : i64
    %357 = llvm.mul %355, %356  : i64
    %358 = builtin.unrealized_conversion_cast %343 : index to i64
    %359 = llvm.mlir.constant(12544 : index) : i64
    %360 = llvm.mul %358, %359  : i64
    %361 = llvm.add %357, %360  : i64
    %362 = builtin.unrealized_conversion_cast %347 : index to i64
    %363 = llvm.mlir.constant(112 : index) : i64
    %364 = llvm.mul %362, %363  : i64
    %365 = llvm.add %361, %364  : i64
    %366 = builtin.unrealized_conversion_cast %353 : index to i64
    %367 = llvm.add %365, %366  : i64
    %368 = llvm.getelementptr %354[%367] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %369 = builtin.unrealized_conversion_cast %368 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %370 = llvm.extractvalue %369[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.call @forward_kernel_1(%370) : (!llvm.ptr) -> ()
    %371 = llvm.add %348, %29  : i64
    %372 = builtin.unrealized_conversion_cast %371 : i64 to index
    llvm.br ^bb14(%371 : i64)
  ^bb16:  // pred: ^bb14
    %373 = llvm.add %344, %35  : i64
    %374 = builtin.unrealized_conversion_cast %373 : i64 to index
    llvm.br ^bb12(%373 : i64)
  ^bb17:  // pred: ^bb12
    %375 = llvm.add %340, %35  : i64
    %376 = builtin.unrealized_conversion_cast %375 : i64 to index
    llvm.br ^bb10(%375 : i64)
  ^bb18:  // pred: ^bb10
    %377 = llvm.mlir.constant(1 : index) : i64
    %378 = llvm.mlir.constant(64 : index) : i64
    %379 = llvm.mlir.constant(112 : index) : i64
    %380 = llvm.mlir.constant(112 : index) : i64
    %381 = llvm.mlir.constant(1 : index) : i64
    %382 = llvm.mlir.constant(12544 : index) : i64
    %383 = llvm.mlir.constant(802816 : index) : i64
    %384 = llvm.mlir.constant(802816 : index) : i64
    %385 = llvm.mlir.null : !llvm.ptr
    %386 = llvm.getelementptr %385[%384] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %387 = llvm.ptrtoint %386 : !llvm.ptr to i64
    %388 = llvm.mlir.constant(64 : index) : i64
    %389 = llvm.add %387, %388  : i64
    %390 = llvm.call @malloc(%389) : (i64) -> !llvm.ptr
    %391 = llvm.ptrtoint %390 : !llvm.ptr to i64
    %392 = llvm.mlir.constant(1 : index) : i64
    %393 = llvm.sub %388, %392  : i64
    %394 = llvm.add %391, %393  : i64
    %395 = llvm.urem %394, %388  : i64
    %396 = llvm.sub %394, %395  : i64
    %397 = llvm.inttoptr %396 : i64 to !llvm.ptr
    %398 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %399 = llvm.insertvalue %390, %398[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %400 = llvm.insertvalue %397, %399[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %401 = llvm.mlir.constant(0 : index) : i64
    %402 = llvm.insertvalue %401, %400[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %403 = llvm.insertvalue %377, %402[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %404 = llvm.insertvalue %378, %403[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %405 = llvm.insertvalue %379, %404[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %406 = llvm.insertvalue %380, %405[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %407 = llvm.insertvalue %383, %406[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %408 = llvm.insertvalue %382, %407[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %409 = llvm.insertvalue %380, %408[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %410 = llvm.insertvalue %381, %409[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %411 = builtin.unrealized_conversion_cast %410 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> to memref<1x64x112x112xf32>
    %412 = llvm.mlir.constant(1 : index) : i64
    %413 = llvm.extractvalue %336[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %414 = llvm.mul %412, %413  : i64
    %415 = llvm.extractvalue %336[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %416 = llvm.mul %414, %415  : i64
    %417 = llvm.extractvalue %336[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %418 = llvm.mul %416, %417  : i64
    %419 = llvm.extractvalue %336[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %420 = llvm.mul %418, %419  : i64
    %421 = llvm.mlir.null : !llvm.ptr
    %422 = llvm.getelementptr %421[1] : (!llvm.ptr) -> !llvm.ptr, f32
    %423 = llvm.ptrtoint %422 : !llvm.ptr to i64
    %424 = llvm.mul %420, %423  : i64
    %425 = llvm.extractvalue %336[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %426 = llvm.extractvalue %336[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %427 = llvm.getelementptr %425[%426] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %428 = llvm.extractvalue %410[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %429 = llvm.extractvalue %410[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %430 = llvm.getelementptr %428[%429] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    "llvm.intr.memcpy"(%430, %427, %424) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> ()
    llvm.br ^bb19(%36 : i64)
  ^bb19(%431: i64):  // 2 preds: ^bb18, ^bb29
    %432 = builtin.unrealized_conversion_cast %431 : i64 to index
    %433 = builtin.unrealized_conversion_cast %432 : index to i64
    %434 = llvm.icmp "slt" %433, %35 : i64
    llvm.cond_br %434, ^bb20, ^bb30
  ^bb20:  // pred: ^bb19
    llvm.br ^bb21(%36 : i64)
  ^bb21(%435: i64):  // 2 preds: ^bb20, ^bb28
    %436 = builtin.unrealized_conversion_cast %435 : i64 to index
    %437 = builtin.unrealized_conversion_cast %436 : index to i64
    %438 = llvm.icmp "slt" %437, %31 : i64
    llvm.cond_br %438, ^bb22, ^bb29
  ^bb22:  // pred: ^bb21
    llvm.br ^bb23(%36 : i64)
  ^bb23(%439: i64):  // 2 preds: ^bb22, ^bb27
    %440 = builtin.unrealized_conversion_cast %439 : i64 to index
    %441 = builtin.unrealized_conversion_cast %440 : index to i64
    %442 = llvm.icmp "slt" %441, %30 : i64
    llvm.cond_br %442, ^bb24, ^bb28
  ^bb24:  // pred: ^bb23
    llvm.br ^bb25(%36 : i64)
  ^bb25(%443: i64):  // 2 preds: ^bb24, ^bb26
    %444 = builtin.unrealized_conversion_cast %443 : i64 to index
    %445 = builtin.unrealized_conversion_cast %444 : index to i64
    %446 = llvm.icmp "slt" %445, %30 : i64
    llvm.cond_br %446, ^bb26, ^bb27
  ^bb26:  // pred: ^bb25
    %447 = llvm.mlir.constant(0 : index) : i64
    %448 = builtin.unrealized_conversion_cast %447 : i64 to index
    %449 = llvm.mlir.constant(0 : index) : i64
    %450 = builtin.unrealized_conversion_cast %449 : i64 to index
    %451 = llvm.mlir.constant(2 : index) : i64
    %452 = llvm.mul %439, %451  : i64
    %453 = builtin.unrealized_conversion_cast %452 : i64 to index
    %454 = llvm.mlir.constant(2 : index) : i64
    %455 = llvm.mul %443, %454  : i64
    %456 = builtin.unrealized_conversion_cast %455 : i64 to index
    %457 = llvm.extractvalue %242[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %458 = builtin.unrealized_conversion_cast %448 : index to i64
    %459 = llvm.mlir.constant(158700 : index) : i64
    %460 = llvm.mul %458, %459  : i64
    %461 = builtin.unrealized_conversion_cast %450 : index to i64
    %462 = llvm.mlir.constant(52900 : index) : i64
    %463 = llvm.mul %461, %462  : i64
    %464 = llvm.add %460, %463  : i64
    %465 = builtin.unrealized_conversion_cast %453 : index to i64
    %466 = llvm.mlir.constant(230 : index) : i64
    %467 = llvm.mul %465, %466  : i64
    %468 = llvm.add %464, %467  : i64
    %469 = builtin.unrealized_conversion_cast %456 : index to i64
    %470 = llvm.add %468, %469  : i64
    %471 = llvm.getelementptr %457[%470] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %472 = builtin.unrealized_conversion_cast %471 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %473 = llvm.mlir.constant(0 : index) : i64
    %474 = builtin.unrealized_conversion_cast %473 : i64 to index
    %475 = llvm.mlir.constant(0 : index) : i64
    %476 = builtin.unrealized_conversion_cast %475 : i64 to index
    %477 = llvm.mlir.constant(0 : index) : i64
    %478 = builtin.unrealized_conversion_cast %477 : i64 to index
    %479 = llvm.extractvalue %65[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %480 = builtin.unrealized_conversion_cast %436 : index to i64
    %481 = llvm.mlir.constant(147 : index) : i64
    %482 = llvm.mul %480, %481  : i64
    %483 = builtin.unrealized_conversion_cast %474 : index to i64
    %484 = llvm.mlir.constant(49 : index) : i64
    %485 = llvm.mul %483, %484  : i64
    %486 = llvm.add %482, %485  : i64
    %487 = builtin.unrealized_conversion_cast %476 : index to i64
    %488 = llvm.mlir.constant(7 : index) : i64
    %489 = llvm.mul %487, %488  : i64
    %490 = llvm.add %486, %489  : i64
    %491 = builtin.unrealized_conversion_cast %478 : index to i64
    %492 = llvm.add %490, %491  : i64
    %493 = llvm.getelementptr %479[%492] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %494 = builtin.unrealized_conversion_cast %493 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %495 = llvm.mlir.constant(0 : index) : i64
    %496 = builtin.unrealized_conversion_cast %495 : i64 to index
    %497 = llvm.extractvalue %410[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %498 = builtin.unrealized_conversion_cast %496 : index to i64
    %499 = llvm.mlir.constant(802816 : index) : i64
    %500 = llvm.mul %498, %499  : i64
    %501 = builtin.unrealized_conversion_cast %436 : index to i64
    %502 = llvm.mlir.constant(12544 : index) : i64
    %503 = llvm.mul %501, %502  : i64
    %504 = llvm.add %500, %503  : i64
    %505 = builtin.unrealized_conversion_cast %440 : index to i64
    %506 = llvm.mlir.constant(112 : index) : i64
    %507 = llvm.mul %505, %506  : i64
    %508 = llvm.add %504, %507  : i64
    %509 = builtin.unrealized_conversion_cast %444 : index to i64
    %510 = llvm.add %508, %509  : i64
    %511 = llvm.getelementptr %497[%510] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %512 = builtin.unrealized_conversion_cast %511 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %513 = llvm.mlir.constant(0 : index) : i64
    %514 = builtin.unrealized_conversion_cast %513 : i64 to index
    %515 = llvm.extractvalue %410[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %516 = builtin.unrealized_conversion_cast %514 : index to i64
    %517 = llvm.mlir.constant(802816 : index) : i64
    %518 = llvm.mul %516, %517  : i64
    %519 = builtin.unrealized_conversion_cast %436 : index to i64
    %520 = llvm.mlir.constant(12544 : index) : i64
    %521 = llvm.mul %519, %520  : i64
    %522 = llvm.add %518, %521  : i64
    %523 = builtin.unrealized_conversion_cast %440 : index to i64
    %524 = llvm.mlir.constant(112 : index) : i64
    %525 = llvm.mul %523, %524  : i64
    %526 = llvm.add %522, %525  : i64
    %527 = builtin.unrealized_conversion_cast %444 : index to i64
    %528 = llvm.add %526, %527  : i64
    %529 = llvm.getelementptr %515[%528] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %530 = builtin.unrealized_conversion_cast %529 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %531 = llvm.extractvalue %472[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %532 = llvm.extractvalue %494[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %533 = llvm.extractvalue %512[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %534 = llvm.extractvalue %530[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.call @forward_kernel_2(%531, %532, %533, %534) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> ()
    %535 = llvm.add %445, %28  : i64
    %536 = builtin.unrealized_conversion_cast %535 : i64 to index
    llvm.br ^bb25(%535 : i64)
  ^bb27:  // pred: ^bb25
    %537 = llvm.add %441, %35  : i64
    %538 = builtin.unrealized_conversion_cast %537 : i64 to index
    llvm.br ^bb23(%537 : i64)
  ^bb28:  // pred: ^bb23
    %539 = llvm.add %437, %35  : i64
    %540 = builtin.unrealized_conversion_cast %539 : i64 to index
    llvm.br ^bb21(%539 : i64)
  ^bb29:  // pred: ^bb21
    %541 = llvm.add %433, %35  : i64
    %542 = builtin.unrealized_conversion_cast %541 : i64 to index
    llvm.br ^bb19(%541 : i64)
  ^bb30:  // pred: ^bb19
    %543 = llvm.mlir.constant(1 : index) : i64
    %544 = llvm.mlir.constant(64 : index) : i64
    %545 = llvm.mlir.constant(112 : index) : i64
    %546 = llvm.mlir.constant(112 : index) : i64
    %547 = llvm.mlir.constant(1 : index) : i64
    %548 = llvm.mlir.constant(12544 : index) : i64
    %549 = llvm.mlir.constant(802816 : index) : i64
    %550 = llvm.mlir.constant(802816 : index) : i64
    %551 = llvm.mlir.null : !llvm.ptr
    %552 = llvm.getelementptr %551[%550] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %553 = llvm.ptrtoint %552 : !llvm.ptr to i64
    %554 = llvm.mlir.constant(64 : index) : i64
    %555 = llvm.add %553, %554  : i64
    %556 = llvm.call @malloc(%555) : (i64) -> !llvm.ptr
    %557 = llvm.ptrtoint %556 : !llvm.ptr to i64
    %558 = llvm.mlir.constant(1 : index) : i64
    %559 = llvm.sub %554, %558  : i64
    %560 = llvm.add %557, %559  : i64
    %561 = llvm.urem %560, %554  : i64
    %562 = llvm.sub %560, %561  : i64
    %563 = llvm.inttoptr %562 : i64 to !llvm.ptr
    %564 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %565 = llvm.insertvalue %556, %564[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %566 = llvm.insertvalue %563, %565[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %567 = llvm.mlir.constant(0 : index) : i64
    %568 = llvm.insertvalue %567, %566[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %569 = llvm.insertvalue %543, %568[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %570 = llvm.insertvalue %544, %569[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %571 = llvm.insertvalue %545, %570[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %572 = llvm.insertvalue %546, %571[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %573 = llvm.insertvalue %549, %572[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %574 = llvm.insertvalue %548, %573[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %575 = llvm.insertvalue %546, %574[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %576 = llvm.insertvalue %547, %575[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %577 = builtin.unrealized_conversion_cast %576 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> to memref<1x64x112x112xf32>
    llvm.br ^bb31(%36 : i64)
  ^bb31(%578: i64):  // 2 preds: ^bb30, ^bb38
    %579 = builtin.unrealized_conversion_cast %578 : i64 to index
    %580 = builtin.unrealized_conversion_cast %579 : index to i64
    %581 = llvm.icmp "slt" %580, %35 : i64
    llvm.cond_br %581, ^bb32, ^bb39
  ^bb32:  // pred: ^bb31
    llvm.br ^bb33(%36 : i64)
  ^bb33(%582: i64):  // 2 preds: ^bb32, ^bb37
    %583 = builtin.unrealized_conversion_cast %582 : i64 to index
    %584 = builtin.unrealized_conversion_cast %583 : index to i64
    %585 = llvm.icmp "slt" %584, %31 : i64
    llvm.cond_br %585, ^bb34, ^bb38
  ^bb34:  // pred: ^bb33
    llvm.br ^bb35(%36 : i64)
  ^bb35(%586: i64):  // 2 preds: ^bb34, ^bb36
    %587 = builtin.unrealized_conversion_cast %586 : i64 to index
    %588 = builtin.unrealized_conversion_cast %587 : index to i64
    %589 = llvm.icmp "slt" %588, %30 : i64
    llvm.cond_br %589, ^bb36, ^bb37
  ^bb36:  // pred: ^bb35
    %590 = llvm.mlir.constant(0 : index) : i64
    %591 = builtin.unrealized_conversion_cast %590 : i64 to index
    %592 = llvm.mlir.constant(0 : index) : i64
    %593 = builtin.unrealized_conversion_cast %592 : i64 to index
    %594 = llvm.extractvalue %410[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %595 = builtin.unrealized_conversion_cast %591 : index to i64
    %596 = llvm.mlir.constant(802816 : index) : i64
    %597 = llvm.mul %595, %596  : i64
    %598 = builtin.unrealized_conversion_cast %583 : index to i64
    %599 = llvm.mlir.constant(12544 : index) : i64
    %600 = llvm.mul %598, %599  : i64
    %601 = llvm.add %597, %600  : i64
    %602 = builtin.unrealized_conversion_cast %587 : index to i64
    %603 = llvm.mlir.constant(112 : index) : i64
    %604 = llvm.mul %602, %603  : i64
    %605 = llvm.add %601, %604  : i64
    %606 = builtin.unrealized_conversion_cast %593 : index to i64
    %607 = llvm.add %605, %606  : i64
    %608 = llvm.getelementptr %594[%607] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %609 = builtin.unrealized_conversion_cast %608 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %610 = llvm.extractvalue %116[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %611 = builtin.unrealized_conversion_cast %583 : index to i64
    %612 = llvm.getelementptr %610[%611] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %613 = builtin.unrealized_conversion_cast %612 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %614 = llvm.extractvalue %133[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %615 = builtin.unrealized_conversion_cast %583 : index to i64
    %616 = llvm.getelementptr %614[%615] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %617 = builtin.unrealized_conversion_cast %616 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %618 = llvm.extractvalue %82[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %619 = builtin.unrealized_conversion_cast %583 : index to i64
    %620 = llvm.getelementptr %618[%619] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %621 = builtin.unrealized_conversion_cast %620 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %622 = llvm.extractvalue %99[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %623 = builtin.unrealized_conversion_cast %583 : index to i64
    %624 = llvm.getelementptr %622[%623] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %625 = builtin.unrealized_conversion_cast %624 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %626 = llvm.mlir.constant(0 : index) : i64
    %627 = builtin.unrealized_conversion_cast %626 : i64 to index
    %628 = llvm.mlir.constant(0 : index) : i64
    %629 = builtin.unrealized_conversion_cast %628 : i64 to index
    %630 = llvm.extractvalue %576[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %631 = builtin.unrealized_conversion_cast %627 : index to i64
    %632 = llvm.mlir.constant(802816 : index) : i64
    %633 = llvm.mul %631, %632  : i64
    %634 = builtin.unrealized_conversion_cast %583 : index to i64
    %635 = llvm.mlir.constant(12544 : index) : i64
    %636 = llvm.mul %634, %635  : i64
    %637 = llvm.add %633, %636  : i64
    %638 = builtin.unrealized_conversion_cast %587 : index to i64
    %639 = llvm.mlir.constant(112 : index) : i64
    %640 = llvm.mul %638, %639  : i64
    %641 = llvm.add %637, %640  : i64
    %642 = builtin.unrealized_conversion_cast %629 : index to i64
    %643 = llvm.add %641, %642  : i64
    %644 = llvm.getelementptr %630[%643] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %645 = builtin.unrealized_conversion_cast %644 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %646 = llvm.extractvalue %609[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %647 = llvm.extractvalue %613[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %648 = llvm.extractvalue %617[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %649 = llvm.extractvalue %621[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %650 = llvm.extractvalue %625[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %651 = llvm.extractvalue %645[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.call @forward_kernel_3(%646, %647, %648, %649, %650, %651) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> ()
    %652 = llvm.add %588, %29  : i64
    %653 = builtin.unrealized_conversion_cast %652 : i64 to index
    llvm.br ^bb35(%652 : i64)
  ^bb37:  // pred: ^bb35
    %654 = llvm.add %584, %35  : i64
    %655 = builtin.unrealized_conversion_cast %654 : i64 to index
    llvm.br ^bb33(%654 : i64)
  ^bb38:  // pred: ^bb33
    %656 = llvm.add %580, %35  : i64
    %657 = builtin.unrealized_conversion_cast %656 : i64 to index
    llvm.br ^bb31(%656 : i64)
  ^bb39:  // pred: ^bb31
    %658 = llvm.mlir.constant(1 : index) : i64
    %659 = llvm.mlir.constant(64 : index) : i64
    %660 = llvm.mlir.constant(112 : index) : i64
    %661 = llvm.mlir.constant(112 : index) : i64
    %662 = llvm.mlir.constant(1 : index) : i64
    %663 = llvm.mlir.constant(12544 : index) : i64
    %664 = llvm.mlir.constant(802816 : index) : i64
    %665 = llvm.mlir.constant(802816 : index) : i64
    %666 = llvm.mlir.null : !llvm.ptr
    %667 = llvm.getelementptr %666[%665] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %668 = llvm.ptrtoint %667 : !llvm.ptr to i64
    %669 = llvm.mlir.constant(64 : index) : i64
    %670 = llvm.add %668, %669  : i64
    %671 = llvm.call @malloc(%670) : (i64) -> !llvm.ptr
    %672 = llvm.ptrtoint %671 : !llvm.ptr to i64
    %673 = llvm.mlir.constant(1 : index) : i64
    %674 = llvm.sub %669, %673  : i64
    %675 = llvm.add %672, %674  : i64
    %676 = llvm.urem %675, %669  : i64
    %677 = llvm.sub %675, %676  : i64
    %678 = llvm.inttoptr %677 : i64 to !llvm.ptr
    %679 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %680 = llvm.insertvalue %671, %679[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %681 = llvm.insertvalue %678, %680[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %682 = llvm.mlir.constant(0 : index) : i64
    %683 = llvm.insertvalue %682, %681[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %684 = llvm.insertvalue %658, %683[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %685 = llvm.insertvalue %659, %684[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %686 = llvm.insertvalue %660, %685[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %687 = llvm.insertvalue %661, %686[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %688 = llvm.insertvalue %664, %687[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %689 = llvm.insertvalue %663, %688[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %690 = llvm.insertvalue %661, %689[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %691 = llvm.insertvalue %662, %690[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %692 = builtin.unrealized_conversion_cast %691 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> to memref<1x64x112x112xf32>
    llvm.br ^bb40(%36 : i64)
  ^bb40(%693: i64):  // 2 preds: ^bb39, ^bb47
    %694 = builtin.unrealized_conversion_cast %693 : i64 to index
    %695 = builtin.unrealized_conversion_cast %694 : index to i64
    %696 = llvm.icmp "slt" %695, %35 : i64
    llvm.cond_br %696, ^bb41, ^bb48
  ^bb41:  // pred: ^bb40
    llvm.br ^bb42(%36 : i64)
  ^bb42(%697: i64):  // 2 preds: ^bb41, ^bb46
    %698 = builtin.unrealized_conversion_cast %697 : i64 to index
    %699 = builtin.unrealized_conversion_cast %698 : index to i64
    %700 = llvm.icmp "slt" %699, %31 : i64
    llvm.cond_br %700, ^bb43, ^bb47
  ^bb43:  // pred: ^bb42
    llvm.br ^bb44(%36 : i64)
  ^bb44(%701: i64):  // 2 preds: ^bb43, ^bb45
    %702 = builtin.unrealized_conversion_cast %701 : i64 to index
    %703 = builtin.unrealized_conversion_cast %702 : index to i64
    %704 = llvm.icmp "slt" %703, %30 : i64
    llvm.cond_br %704, ^bb45, ^bb46
  ^bb45:  // pred: ^bb44
    %705 = llvm.mlir.constant(0 : index) : i64
    %706 = builtin.unrealized_conversion_cast %705 : i64 to index
    %707 = llvm.mlir.constant(0 : index) : i64
    %708 = builtin.unrealized_conversion_cast %707 : i64 to index
    %709 = llvm.extractvalue %576[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %710 = builtin.unrealized_conversion_cast %706 : index to i64
    %711 = llvm.mlir.constant(802816 : index) : i64
    %712 = llvm.mul %710, %711  : i64
    %713 = builtin.unrealized_conversion_cast %698 : index to i64
    %714 = llvm.mlir.constant(12544 : index) : i64
    %715 = llvm.mul %713, %714  : i64
    %716 = llvm.add %712, %715  : i64
    %717 = builtin.unrealized_conversion_cast %702 : index to i64
    %718 = llvm.mlir.constant(112 : index) : i64
    %719 = llvm.mul %717, %718  : i64
    %720 = llvm.add %716, %719  : i64
    %721 = builtin.unrealized_conversion_cast %708 : index to i64
    %722 = llvm.add %720, %721  : i64
    %723 = llvm.getelementptr %709[%722] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %724 = builtin.unrealized_conversion_cast %723 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %725 = llvm.mlir.constant(0 : index) : i64
    %726 = builtin.unrealized_conversion_cast %725 : i64 to index
    %727 = llvm.mlir.constant(0 : index) : i64
    %728 = builtin.unrealized_conversion_cast %727 : i64 to index
    %729 = llvm.extractvalue %691[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %730 = builtin.unrealized_conversion_cast %726 : index to i64
    %731 = llvm.mlir.constant(802816 : index) : i64
    %732 = llvm.mul %730, %731  : i64
    %733 = builtin.unrealized_conversion_cast %698 : index to i64
    %734 = llvm.mlir.constant(12544 : index) : i64
    %735 = llvm.mul %733, %734  : i64
    %736 = llvm.add %732, %735  : i64
    %737 = builtin.unrealized_conversion_cast %702 : index to i64
    %738 = llvm.mlir.constant(112 : index) : i64
    %739 = llvm.mul %737, %738  : i64
    %740 = llvm.add %736, %739  : i64
    %741 = builtin.unrealized_conversion_cast %728 : index to i64
    %742 = llvm.add %740, %741  : i64
    %743 = llvm.getelementptr %729[%742] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %744 = builtin.unrealized_conversion_cast %743 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %745 = llvm.extractvalue %724[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %746 = llvm.extractvalue %744[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.call @forward_kernel_4(%745, %746) : (!llvm.ptr, !llvm.ptr) -> ()
    %747 = llvm.add %703, %29  : i64
    %748 = builtin.unrealized_conversion_cast %747 : i64 to index
    llvm.br ^bb44(%747 : i64)
  ^bb46:  // pred: ^bb44
    %749 = llvm.add %699, %35  : i64
    %750 = builtin.unrealized_conversion_cast %749 : i64 to index
    llvm.br ^bb42(%749 : i64)
  ^bb47:  // pred: ^bb42
    %751 = llvm.add %695, %35  : i64
    %752 = builtin.unrealized_conversion_cast %751 : i64 to index
    llvm.br ^bb40(%751 : i64)
  ^bb48:  // pred: ^bb40
    %753 = llvm.mlir.constant(1 : index) : i64
    %754 = llvm.mlir.constant(64 : index) : i64
    %755 = llvm.mlir.constant(114 : index) : i64
    %756 = llvm.mlir.constant(114 : index) : i64
    %757 = llvm.mlir.constant(1 : index) : i64
    %758 = llvm.mlir.constant(12996 : index) : i64
    %759 = llvm.mlir.constant(831744 : index) : i64
    %760 = llvm.mlir.constant(831744 : index) : i64
    %761 = llvm.mlir.null : !llvm.ptr
    %762 = llvm.getelementptr %761[%760] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %763 = llvm.ptrtoint %762 : !llvm.ptr to i64
    %764 = llvm.mlir.constant(64 : index) : i64
    %765 = llvm.add %763, %764  : i64
    %766 = llvm.call @malloc(%765) : (i64) -> !llvm.ptr
    %767 = llvm.ptrtoint %766 : !llvm.ptr to i64
    %768 = llvm.mlir.constant(1 : index) : i64
    %769 = llvm.sub %764, %768  : i64
    %770 = llvm.add %767, %769  : i64
    %771 = llvm.urem %770, %764  : i64
    %772 = llvm.sub %770, %771  : i64
    %773 = llvm.inttoptr %772 : i64 to !llvm.ptr
    %774 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %775 = llvm.insertvalue %766, %774[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %776 = llvm.insertvalue %773, %775[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %777 = llvm.mlir.constant(0 : index) : i64
    %778 = llvm.insertvalue %777, %776[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %779 = llvm.insertvalue %753, %778[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %780 = llvm.insertvalue %754, %779[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %781 = llvm.insertvalue %755, %780[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %782 = llvm.insertvalue %756, %781[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %783 = llvm.insertvalue %759, %782[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %784 = llvm.insertvalue %758, %783[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %785 = llvm.insertvalue %756, %784[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %786 = llvm.insertvalue %757, %785[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %787 = builtin.unrealized_conversion_cast %786 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> to memref<1x64x114x114xf32>
    llvm.br ^bb49(%36 : i64)
  ^bb49(%788: i64):  // 2 preds: ^bb48, ^bb56
    %789 = builtin.unrealized_conversion_cast %788 : i64 to index
    %790 = builtin.unrealized_conversion_cast %789 : index to i64
    %791 = llvm.icmp "slt" %790, %35 : i64
    llvm.cond_br %791, ^bb50, ^bb57
  ^bb50:  // pred: ^bb49
    llvm.br ^bb51(%36 : i64)
  ^bb51(%792: i64):  // 2 preds: ^bb50, ^bb55
    %793 = builtin.unrealized_conversion_cast %792 : i64 to index
    %794 = builtin.unrealized_conversion_cast %793 : index to i64
    %795 = llvm.icmp "slt" %794, %31 : i64
    llvm.cond_br %795, ^bb52, ^bb56
  ^bb52:  // pred: ^bb51
    llvm.br ^bb53(%36 : i64)
  ^bb53(%796: i64):  // 2 preds: ^bb52, ^bb54
    %797 = builtin.unrealized_conversion_cast %796 : i64 to index
    %798 = builtin.unrealized_conversion_cast %797 : index to i64
    %799 = llvm.icmp "slt" %798, %27 : i64
    llvm.cond_br %799, ^bb54, ^bb55
  ^bb54:  // pred: ^bb53
    %800 = llvm.mlir.constant(0 : index) : i64
    %801 = builtin.unrealized_conversion_cast %800 : i64 to index
    %802 = llvm.mlir.constant(0 : index) : i64
    %803 = builtin.unrealized_conversion_cast %802 : i64 to index
    %804 = llvm.extractvalue %786[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %805 = builtin.unrealized_conversion_cast %801 : index to i64
    %806 = llvm.mlir.constant(831744 : index) : i64
    %807 = llvm.mul %805, %806  : i64
    %808 = builtin.unrealized_conversion_cast %793 : index to i64
    %809 = llvm.mlir.constant(12996 : index) : i64
    %810 = llvm.mul %808, %809  : i64
    %811 = llvm.add %807, %810  : i64
    %812 = builtin.unrealized_conversion_cast %797 : index to i64
    %813 = llvm.mlir.constant(114 : index) : i64
    %814 = llvm.mul %812, %813  : i64
    %815 = llvm.add %811, %814  : i64
    %816 = builtin.unrealized_conversion_cast %803 : index to i64
    %817 = llvm.add %815, %816  : i64
    %818 = llvm.getelementptr %804[%817] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %819 = builtin.unrealized_conversion_cast %818 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %820 = llvm.extractvalue %819[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.call @forward_kernel_5(%820) : (!llvm.ptr) -> ()
    %821 = llvm.add %798, %26  : i64
    %822 = builtin.unrealized_conversion_cast %821 : i64 to index
    llvm.br ^bb53(%821 : i64)
  ^bb55:  // pred: ^bb53
    %823 = llvm.add %794, %35  : i64
    %824 = builtin.unrealized_conversion_cast %823 : i64 to index
    llvm.br ^bb51(%823 : i64)
  ^bb56:  // pred: ^bb51
    %825 = llvm.add %790, %35  : i64
    %826 = builtin.unrealized_conversion_cast %825 : i64 to index
    llvm.br ^bb49(%825 : i64)
  ^bb57:  // pred: ^bb49
    %827 = llvm.mlir.constant(1 : index) : i64
    %828 = llvm.mlir.constant(64 : index) : i64
    %829 = llvm.mlir.constant(114 : index) : i64
    %830 = llvm.mlir.constant(114 : index) : i64
    %831 = llvm.mlir.constant(1 : index) : i64
    %832 = llvm.mlir.constant(12996 : index) : i64
    %833 = llvm.mlir.constant(831744 : index) : i64
    %834 = llvm.mlir.constant(831744 : index) : i64
    %835 = llvm.mlir.null : !llvm.ptr
    %836 = llvm.getelementptr %835[%834] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %837 = llvm.ptrtoint %836 : !llvm.ptr to i64
    %838 = llvm.mlir.constant(64 : index) : i64
    %839 = llvm.add %837, %838  : i64
    %840 = llvm.call @malloc(%839) : (i64) -> !llvm.ptr
    %841 = llvm.ptrtoint %840 : !llvm.ptr to i64
    %842 = llvm.mlir.constant(1 : index) : i64
    %843 = llvm.sub %838, %842  : i64
    %844 = llvm.add %841, %843  : i64
    %845 = llvm.urem %844, %838  : i64
    %846 = llvm.sub %844, %845  : i64
    %847 = llvm.inttoptr %846 : i64 to !llvm.ptr
    %848 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %849 = llvm.insertvalue %840, %848[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %850 = llvm.insertvalue %847, %849[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %851 = llvm.mlir.constant(0 : index) : i64
    %852 = llvm.insertvalue %851, %850[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %853 = llvm.insertvalue %827, %852[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %854 = llvm.insertvalue %828, %853[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %855 = llvm.insertvalue %829, %854[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %856 = llvm.insertvalue %830, %855[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %857 = llvm.insertvalue %833, %856[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %858 = llvm.insertvalue %832, %857[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %859 = llvm.insertvalue %830, %858[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %860 = llvm.insertvalue %831, %859[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %861 = builtin.unrealized_conversion_cast %860 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> to memref<1x64x114x114xf32>
    %862 = llvm.mlir.constant(1 : index) : i64
    %863 = llvm.extractvalue %786[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %864 = llvm.mul %862, %863  : i64
    %865 = llvm.extractvalue %786[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %866 = llvm.mul %864, %865  : i64
    %867 = llvm.extractvalue %786[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %868 = llvm.mul %866, %867  : i64
    %869 = llvm.extractvalue %786[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %870 = llvm.mul %868, %869  : i64
    %871 = llvm.mlir.null : !llvm.ptr
    %872 = llvm.getelementptr %871[1] : (!llvm.ptr) -> !llvm.ptr, f32
    %873 = llvm.ptrtoint %872 : !llvm.ptr to i64
    %874 = llvm.mul %870, %873  : i64
    %875 = llvm.extractvalue %786[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %876 = llvm.extractvalue %786[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %877 = llvm.getelementptr %875[%876] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %878 = llvm.extractvalue %860[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %879 = llvm.extractvalue %860[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %880 = llvm.getelementptr %878[%879] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    "llvm.intr.memcpy"(%880, %877, %874) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> ()
    %881 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %882 = llvm.extractvalue %860[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %883 = llvm.extractvalue %860[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %884 = llvm.insertvalue %882, %881[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %885 = llvm.insertvalue %883, %884[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %886 = llvm.mlir.constant(115 : index) : i64
    %887 = llvm.insertvalue %886, %885[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %888 = llvm.mlir.constant(1 : index) : i64
    %889 = llvm.insertvalue %888, %887[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %890 = llvm.mlir.constant(831744 : index) : i64
    %891 = llvm.insertvalue %890, %889[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %892 = llvm.mlir.constant(64 : index) : i64
    %893 = llvm.insertvalue %892, %891[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %894 = llvm.mlir.constant(12996 : index) : i64
    %895 = llvm.insertvalue %894, %893[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %896 = llvm.mlir.constant(112 : index) : i64
    %897 = llvm.insertvalue %896, %895[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %898 = llvm.mlir.constant(114 : index) : i64
    %899 = llvm.insertvalue %898, %897[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %900 = llvm.mlir.constant(112 : index) : i64
    %901 = llvm.insertvalue %900, %899[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %902 = llvm.mlir.constant(1 : index) : i64
    %903 = llvm.insertvalue %902, %901[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %904 = llvm.intr.stacksave : !llvm.ptr
    %905 = llvm.mlir.constant(4 : i64) : i64
    %906 = llvm.mlir.constant(1 : index) : i64
    %907 = llvm.alloca %906 x !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> : (i64) -> !llvm.ptr
    llvm.store %691, %907 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>, !llvm.ptr
    %908 = llvm.mlir.undef : !llvm.struct<(i64, ptr)>
    %909 = llvm.insertvalue %905, %908[0] : !llvm.struct<(i64, ptr)> 
    %910 = llvm.insertvalue %907, %909[1] : !llvm.struct<(i64, ptr)> 
    %911 = llvm.mlir.constant(4 : i64) : i64
    %912 = llvm.mlir.constant(1 : index) : i64
    %913 = llvm.alloca %912 x !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> : (i64) -> !llvm.ptr
    llvm.store %903, %913 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>, !llvm.ptr
    %914 = llvm.mlir.undef : !llvm.struct<(i64, ptr)>
    %915 = llvm.insertvalue %911, %914[0] : !llvm.struct<(i64, ptr)> 
    %916 = llvm.insertvalue %913, %915[1] : !llvm.struct<(i64, ptr)> 
    %917 = llvm.mlir.constant(1 : index) : i64
    %918 = llvm.alloca %917 x !llvm.struct<(i64, ptr)> : (i64) -> !llvm.ptr
    llvm.store %910, %918 : !llvm.struct<(i64, ptr)>, !llvm.ptr
    %919 = llvm.alloca %917 x !llvm.struct<(i64, ptr)> : (i64) -> !llvm.ptr
    llvm.store %916, %919 : !llvm.struct<(i64, ptr)>, !llvm.ptr
    %920 = llvm.mlir.constant(4 : index) : i64
    llvm.call @memrefCopy(%920, %918, %919) : (i64, !llvm.ptr, !llvm.ptr) -> ()
    llvm.intr.stackrestore %904 : !llvm.ptr
    %921 = llvm.mlir.constant(1 : index) : i64
    %922 = llvm.mlir.constant(64 : index) : i64
    %923 = llvm.mlir.constant(56 : index) : i64
    %924 = llvm.mlir.constant(56 : index) : i64
    %925 = llvm.mlir.constant(1 : index) : i64
    %926 = llvm.mlir.constant(3136 : index) : i64
    %927 = llvm.mlir.constant(200704 : index) : i64
    %928 = llvm.mlir.constant(200704 : index) : i64
    %929 = llvm.mlir.null : !llvm.ptr
    %930 = llvm.getelementptr %929[%928] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %931 = llvm.ptrtoint %930 : !llvm.ptr to i64
    %932 = llvm.mlir.constant(64 : index) : i64
    %933 = llvm.add %931, %932  : i64
    %934 = llvm.call @malloc(%933) : (i64) -> !llvm.ptr
    %935 = llvm.ptrtoint %934 : !llvm.ptr to i64
    %936 = llvm.mlir.constant(1 : index) : i64
    %937 = llvm.sub %932, %936  : i64
    %938 = llvm.add %935, %937  : i64
    %939 = llvm.urem %938, %932  : i64
    %940 = llvm.sub %938, %939  : i64
    %941 = llvm.inttoptr %940 : i64 to !llvm.ptr
    %942 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %943 = llvm.insertvalue %934, %942[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %944 = llvm.insertvalue %941, %943[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %945 = llvm.mlir.constant(0 : index) : i64
    %946 = llvm.insertvalue %945, %944[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %947 = llvm.insertvalue %921, %946[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %948 = llvm.insertvalue %922, %947[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %949 = llvm.insertvalue %923, %948[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %950 = llvm.insertvalue %924, %949[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %951 = llvm.insertvalue %927, %950[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %952 = llvm.insertvalue %926, %951[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %953 = llvm.insertvalue %924, %952[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %954 = llvm.insertvalue %925, %953[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %955 = builtin.unrealized_conversion_cast %954 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> to memref<1x64x56x56xf32>
    llvm.br ^bb58(%36 : i64)
  ^bb58(%956: i64):  // 2 preds: ^bb57, ^bb65
    %957 = builtin.unrealized_conversion_cast %956 : i64 to index
    %958 = builtin.unrealized_conversion_cast %957 : index to i64
    %959 = llvm.icmp "slt" %958, %35 : i64
    llvm.cond_br %959, ^bb59, ^bb66
  ^bb59:  // pred: ^bb58
    llvm.br ^bb60(%36 : i64)
  ^bb60(%960: i64):  // 2 preds: ^bb59, ^bb64
    %961 = builtin.unrealized_conversion_cast %960 : i64 to index
    %962 = builtin.unrealized_conversion_cast %961 : index to i64
    %963 = llvm.icmp "slt" %962, %31 : i64
    llvm.cond_br %963, ^bb61, ^bb65
  ^bb61:  // pred: ^bb60
    llvm.br ^bb62(%36 : i64)
  ^bb62(%964: i64):  // 2 preds: ^bb61, ^bb63
    %965 = builtin.unrealized_conversion_cast %964 : i64 to index
    %966 = builtin.unrealized_conversion_cast %965 : index to i64
    %967 = llvm.icmp "slt" %966, %25 : i64
    llvm.cond_br %967, ^bb63, ^bb64
  ^bb63:  // pred: ^bb62
    %968 = llvm.mlir.constant(0 : index) : i64
    %969 = builtin.unrealized_conversion_cast %968 : i64 to index
    %970 = llvm.mlir.constant(0 : index) : i64
    %971 = builtin.unrealized_conversion_cast %970 : i64 to index
    %972 = llvm.extractvalue %954[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %973 = builtin.unrealized_conversion_cast %969 : index to i64
    %974 = llvm.mlir.constant(200704 : index) : i64
    %975 = llvm.mul %973, %974  : i64
    %976 = builtin.unrealized_conversion_cast %961 : index to i64
    %977 = llvm.mlir.constant(3136 : index) : i64
    %978 = llvm.mul %976, %977  : i64
    %979 = llvm.add %975, %978  : i64
    %980 = builtin.unrealized_conversion_cast %965 : index to i64
    %981 = llvm.mlir.constant(56 : index) : i64
    %982 = llvm.mul %980, %981  : i64
    %983 = llvm.add %979, %982  : i64
    %984 = builtin.unrealized_conversion_cast %971 : index to i64
    %985 = llvm.add %983, %984  : i64
    %986 = llvm.getelementptr %972[%985] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %987 = builtin.unrealized_conversion_cast %986 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %988 = llvm.extractvalue %987[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.call @forward_kernel_6(%988) : (!llvm.ptr) -> ()
    %989 = llvm.add %966, %24  : i64
    %990 = builtin.unrealized_conversion_cast %989 : i64 to index
    llvm.br ^bb62(%989 : i64)
  ^bb64:  // pred: ^bb62
    %991 = llvm.add %962, %35  : i64
    %992 = builtin.unrealized_conversion_cast %991 : i64 to index
    llvm.br ^bb60(%991 : i64)
  ^bb65:  // pred: ^bb60
    %993 = llvm.add %958, %35  : i64
    %994 = builtin.unrealized_conversion_cast %993 : i64 to index
    llvm.br ^bb58(%993 : i64)
  ^bb66:  // pred: ^bb58
    %995 = llvm.mlir.constant(1 : index) : i64
    %996 = llvm.mlir.constant(64 : index) : i64
    %997 = llvm.mlir.constant(56 : index) : i64
    %998 = llvm.mlir.constant(56 : index) : i64
    %999 = llvm.mlir.constant(1 : index) : i64
    %1000 = llvm.mlir.constant(3136 : index) : i64
    %1001 = llvm.mlir.constant(200704 : index) : i64
    %1002 = llvm.mlir.constant(200704 : index) : i64
    %1003 = llvm.mlir.null : !llvm.ptr
    %1004 = llvm.getelementptr %1003[%1002] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %1005 = llvm.ptrtoint %1004 : !llvm.ptr to i64
    %1006 = llvm.mlir.constant(64 : index) : i64
    %1007 = llvm.add %1005, %1006  : i64
    %1008 = llvm.call @malloc(%1007) : (i64) -> !llvm.ptr
    %1009 = llvm.ptrtoint %1008 : !llvm.ptr to i64
    %1010 = llvm.mlir.constant(1 : index) : i64
    %1011 = llvm.sub %1006, %1010  : i64
    %1012 = llvm.add %1009, %1011  : i64
    %1013 = llvm.urem %1012, %1006  : i64
    %1014 = llvm.sub %1012, %1013  : i64
    %1015 = llvm.inttoptr %1014 : i64 to !llvm.ptr
    %1016 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %1017 = llvm.insertvalue %1008, %1016[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1018 = llvm.insertvalue %1015, %1017[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1019 = llvm.mlir.constant(0 : index) : i64
    %1020 = llvm.insertvalue %1019, %1018[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1021 = llvm.insertvalue %995, %1020[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1022 = llvm.insertvalue %996, %1021[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1023 = llvm.insertvalue %997, %1022[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1024 = llvm.insertvalue %998, %1023[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1025 = llvm.insertvalue %1001, %1024[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1026 = llvm.insertvalue %1000, %1025[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1027 = llvm.insertvalue %998, %1026[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1028 = llvm.insertvalue %999, %1027[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1029 = builtin.unrealized_conversion_cast %1028 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> to memref<1x64x56x56xf32>
    %1030 = llvm.mlir.constant(1 : index) : i64
    %1031 = llvm.extractvalue %954[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1032 = llvm.mul %1030, %1031  : i64
    %1033 = llvm.extractvalue %954[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1034 = llvm.mul %1032, %1033  : i64
    %1035 = llvm.extractvalue %954[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1036 = llvm.mul %1034, %1035  : i64
    %1037 = llvm.extractvalue %954[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1038 = llvm.mul %1036, %1037  : i64
    %1039 = llvm.mlir.null : !llvm.ptr
    %1040 = llvm.getelementptr %1039[1] : (!llvm.ptr) -> !llvm.ptr, f32
    %1041 = llvm.ptrtoint %1040 : !llvm.ptr to i64
    %1042 = llvm.mul %1038, %1041  : i64
    %1043 = llvm.extractvalue %954[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1044 = llvm.extractvalue %954[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1045 = llvm.getelementptr %1043[%1044] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %1046 = llvm.extractvalue %1028[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1047 = llvm.extractvalue %1028[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1048 = llvm.getelementptr %1046[%1047] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    "llvm.intr.memcpy"(%1048, %1045, %1042) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> ()
    llvm.br ^bb67(%36 : i64)
  ^bb67(%1049: i64):  // 2 preds: ^bb66, ^bb74
    %1050 = builtin.unrealized_conversion_cast %1049 : i64 to index
    %1051 = builtin.unrealized_conversion_cast %1050 : index to i64
    %1052 = llvm.icmp "slt" %1051, %35 : i64
    llvm.cond_br %1052, ^bb68, ^bb75
  ^bb68:  // pred: ^bb67
    llvm.br ^bb69(%36 : i64)
  ^bb69(%1053: i64):  // 2 preds: ^bb68, ^bb73
    %1054 = builtin.unrealized_conversion_cast %1053 : i64 to index
    %1055 = builtin.unrealized_conversion_cast %1054 : index to i64
    %1056 = llvm.icmp "slt" %1055, %31 : i64
    llvm.cond_br %1056, ^bb70, ^bb74
  ^bb70:  // pred: ^bb69
    llvm.br ^bb71(%36 : i64)
  ^bb71(%1057: i64):  // 2 preds: ^bb70, ^bb72
    %1058 = builtin.unrealized_conversion_cast %1057 : i64 to index
    %1059 = builtin.unrealized_conversion_cast %1058 : index to i64
    %1060 = llvm.icmp "slt" %1059, %25 : i64
    llvm.cond_br %1060, ^bb72, ^bb73
  ^bb72:  // pred: ^bb71
    %1061 = llvm.mlir.constant(0 : index) : i64
    %1062 = builtin.unrealized_conversion_cast %1061 : i64 to index
    %1063 = llvm.mlir.constant(2 : index) : i64
    %1064 = llvm.mul %1057, %1063  : i64
    %1065 = builtin.unrealized_conversion_cast %1064 : i64 to index
    %1066 = llvm.mlir.constant(0 : index) : i64
    %1067 = builtin.unrealized_conversion_cast %1066 : i64 to index
    %1068 = llvm.extractvalue %860[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1069 = builtin.unrealized_conversion_cast %1062 : index to i64
    %1070 = llvm.mlir.constant(831744 : index) : i64
    %1071 = llvm.mul %1069, %1070  : i64
    %1072 = builtin.unrealized_conversion_cast %1054 : index to i64
    %1073 = llvm.mlir.constant(12996 : index) : i64
    %1074 = llvm.mul %1072, %1073  : i64
    %1075 = llvm.add %1071, %1074  : i64
    %1076 = builtin.unrealized_conversion_cast %1065 : index to i64
    %1077 = llvm.mlir.constant(114 : index) : i64
    %1078 = llvm.mul %1076, %1077  : i64
    %1079 = llvm.add %1075, %1078  : i64
    %1080 = builtin.unrealized_conversion_cast %1067 : index to i64
    %1081 = llvm.add %1079, %1080  : i64
    %1082 = llvm.getelementptr %1068[%1081] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %1083 = builtin.unrealized_conversion_cast %1082 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %1084 = llvm.mlir.constant(0 : index) : i64
    %1085 = builtin.unrealized_conversion_cast %1084 : i64 to index
    %1086 = llvm.mlir.constant(0 : index) : i64
    %1087 = builtin.unrealized_conversion_cast %1086 : i64 to index
    %1088 = llvm.extractvalue %1028[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1089 = builtin.unrealized_conversion_cast %1085 : index to i64
    %1090 = llvm.mlir.constant(200704 : index) : i64
    %1091 = llvm.mul %1089, %1090  : i64
    %1092 = builtin.unrealized_conversion_cast %1054 : index to i64
    %1093 = llvm.mlir.constant(3136 : index) : i64
    %1094 = llvm.mul %1092, %1093  : i64
    %1095 = llvm.add %1091, %1094  : i64
    %1096 = builtin.unrealized_conversion_cast %1058 : index to i64
    %1097 = llvm.mlir.constant(56 : index) : i64
    %1098 = llvm.mul %1096, %1097  : i64
    %1099 = llvm.add %1095, %1098  : i64
    %1100 = builtin.unrealized_conversion_cast %1087 : index to i64
    %1101 = llvm.add %1099, %1100  : i64
    %1102 = llvm.getelementptr %1088[%1101] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %1103 = builtin.unrealized_conversion_cast %1102 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %1104 = llvm.mlir.constant(0 : index) : i64
    %1105 = builtin.unrealized_conversion_cast %1104 : i64 to index
    %1106 = llvm.mlir.constant(0 : index) : i64
    %1107 = builtin.unrealized_conversion_cast %1106 : i64 to index
    %1108 = llvm.extractvalue %1028[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1109 = builtin.unrealized_conversion_cast %1105 : index to i64
    %1110 = llvm.mlir.constant(200704 : index) : i64
    %1111 = llvm.mul %1109, %1110  : i64
    %1112 = builtin.unrealized_conversion_cast %1054 : index to i64
    %1113 = llvm.mlir.constant(3136 : index) : i64
    %1114 = llvm.mul %1112, %1113  : i64
    %1115 = llvm.add %1111, %1114  : i64
    %1116 = builtin.unrealized_conversion_cast %1058 : index to i64
    %1117 = llvm.mlir.constant(56 : index) : i64
    %1118 = llvm.mul %1116, %1117  : i64
    %1119 = llvm.add %1115, %1118  : i64
    %1120 = builtin.unrealized_conversion_cast %1107 : index to i64
    %1121 = llvm.add %1119, %1120  : i64
    %1122 = llvm.getelementptr %1108[%1121] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %1123 = builtin.unrealized_conversion_cast %1122 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %1124 = llvm.extractvalue %1083[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1125 = llvm.extractvalue %1103[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %1126 = llvm.extractvalue %1123[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.call @forward_kernel_7(%1124, %1125, %1126) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> ()
    %1127 = llvm.add %1059, %23  : i64
    %1128 = builtin.unrealized_conversion_cast %1127 : i64 to index
    llvm.br ^bb71(%1127 : i64)
  ^bb73:  // pred: ^bb71
    %1129 = llvm.add %1055, %35  : i64
    %1130 = builtin.unrealized_conversion_cast %1129 : i64 to index
    llvm.br ^bb69(%1129 : i64)
  ^bb74:  // pred: ^bb69
    %1131 = llvm.add %1051, %35  : i64
    %1132 = builtin.unrealized_conversion_cast %1131 : i64 to index
    llvm.br ^bb67(%1131 : i64)
  ^bb75:  // pred: ^bb67
    %1133 = llvm.extractvalue %1028[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.return %1133 : !llvm.ptr
  }
  llvm.func @forward_kernel_0(!llvm.ptr) attributes {Kernel, forward_kernel_0}
  llvm.func @forward_kernel_1(!llvm.ptr) attributes {Kernel, forward_kernel_1}
  llvm.func @forward_kernel_2(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) attributes {Kernel, forward_kernel_2}
  llvm.func @forward_kernel_3(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) attributes {Kernel, forward_kernel_3}
  llvm.func @forward_kernel_4(!llvm.ptr, !llvm.ptr) attributes {Kernel, forward_kernel_4}
  llvm.func @forward_kernel_5(!llvm.ptr) attributes {Kernel, forward_kernel_5}
  llvm.func @forward_kernel_6(!llvm.ptr) attributes {Kernel, forward_kernel_6}
  llvm.func @forward_kernel_7(!llvm.ptr, !llvm.ptr, !llvm.ptr) attributes {Kernel, forward_kernel_7}
}


// -----// IR Dump After CSE (cse) //----- //
module attributes {llvm.data_layout = "", torch.debug_module_name = "ResNet"} {
  llvm.func @memrefCopy(i64, !llvm.ptr, !llvm.ptr)
  llvm.func @malloc(i64) -> !llvm.ptr
  llvm.mlir.global private constant @__constant_64xf32_2(dense<[0.230717152, 0.253822476, -1.05429808E-6, -0.664388895, -1.65705547E-8, 0.161521927, 0.454503953, -4.301950e-07, 0.300513744, -8.005240e-06, 0.349418074, 0.311480612, -0.249529764, -3.474890e-05, 0.107726313, 0.218970656, 0.381412596, -0.529882133, -0.628644109, 0.571398079, 0.299846917, 0.584303737, 0.48202154, 0.328526348, 0.196717009, 0.194961801, 0.152145416, 0.085522361, 0.513142824, 0.0152367353, 0.166441768, 0.332394391, 0.249211237, 0.443366677, -0.280169278, -0.0203848016, -2.45068748E-7, 0.321340501, -4.9151744E-8, 0.237767309, 0.232907727, 0.315274626, 0.427762389, 0.293127537, 0.263794243, 0.675975859, 0.429100394, 0.345662743, -8.69090186E-8, 0.247294366, 0.303160846, 0.615772783, 0.39834857, 0.332067341, -0.412187815, 0.378069043, 0.178953409, 0.25747788, -0.449079722, 0.213058949, 0.569339037, 5.727430e-01, -0.402383476, 0.23406373]> : tensor<64xf32>) {addr_space = 0 : i32} : !llvm.array<64 x f32>
  llvm.mlir.global private constant @__constant_64xf32_1(dense<[0.234872743, 0.266257942, -5.10959595E-8, 0.518699706, 3.44040196E-9, 0.222385287, 0.422887057, 1.31532403E-7, 0.25093165, 1.5152026E-6, 0.316871643, 0.250491828, 0.378926098, 1.08618351E-5, 2.752640e-01, 0.236741036, 0.242021769, 0.395314813, 0.469346285, 0.2908957, 0.272684187, 0.27802828, 0.290692091, 0.206927493, 0.258990377, 0.278710574, 0.291149527, 0.316013753, 0.388891488, 0.304111898, 0.267757207, 0.210925162, 0.287084132, 0.332426429, 0.42672804, 0.373260558, 7.48037578E-8, 0.19067812, 1.47401256E-8, 0.223029822, 0.179079413, 0.248600766, 0.27399528, 0.259228647, 0.294202209, 0.299236417, 0.223688841, 0.262799472, 2.20011476E-8, 0.266098082, 0.220890298, 0.284285516, 0.330723315, 0.226809531, 0.365380913, 0.21229881, 0.239653021, 0.24949576, 0.525830686, 0.248247579, 0.295652747, 0.258776665, 0.4832564, 0.26670444]> : tensor<64xf32>) {addr_space = 0 : i32} : !llvm.array<64 x f32>
  llvm.mlir.global private constant @__constant_64xf32_0(dense<[1.01694489, 3.71674347, 5.81334356E-11, 3.28254271, 1.71074404E-13, 0.658226967, 4.37006235, 6.60045282E-12, 0.915522992, 1.93175254E-9, 4.12558556, 2.74399233, 2.8390913, 4.79658588E-8, 11.0722713, 0.500745952, 2.23128176, 4.82570696, 2.69861364, 9.36995506, 3.73391747, 5.48429585, 5.7126689, 0.445444882, 0.436275303, 7.15633583, 13.7179089, 5.25117493, 6.81737518, 1.67235756, 1.65343034, 1.23245978, 4.90762854, 3.07305121, 4.23838568, 4.99363518, 1.44646307E-12, 1.52116203, 1.03519833E-13, 0.351344079, 0.17024748, 1.42054474, 1.90848303, 2.15124035, 2.66084933, 4.84443378, 1.92971194, 1.49994361, 2.94806145E-13, 1.53064024, 0.365027189, 2.93755412, 5.46641159, 0.707924544, 3.33150721, 0.771802961, 2.40678358, 6.5213666, 4.12625027, 1.05063522, 2.95303202, 11.3656216, 4.76904678, 1.65587807]> : tensor<64xf32>) {addr_space = 0 : i32} : !llvm.array<64 x f32>
  llvm.mlir.global private constant @__constant_64xf32(dense<[0.00276811025, -0.0257689245, 2.12544663E-7, -0.0846051499, 2.11205915E-8, 4.96906461E-4, -0.0224083271, -1.15818956E-7, -4.823850e-03, 2.75073347E-7, 3.958230e-02, 0.0319936387, -0.0374896601, -1.37163477E-6, 0.00660019321, 4.378190e-03, 0.0647971481, 0.11175999, 0.0360015705, -0.0750752166, -0.03824009, 0.0843578502, -5.228700e-02, -0.0117988894, 0.00130188058, 0.0321722962, -0.0177843049, -0.0910085887, 0.113187239, -0.0416320041, 0.00873024761, 0.0296931695, -0.0705021694, -0.00348469778, 0.109771468, -0.00173411821, -5.94229412E-8, 0.0293303896, -7.85527287E-9, 0.00673204474, -0.00370999542, 0.0160279572, -0.0278826058, 0.0265925378, 0.0284745526, -0.12734659, 0.0446168408, 0.0263288375, 2.14538591E-8, -1.704500e-02, -0.00356168114, -0.0458412617, 0.0638761446, 0.0152198272, -0.0385114551, -0.0164278317, -0.016568929, 0.0560574941, -0.0803062319, -0.00266457512, -0.0417176671, 0.126112729, -0.0492369682, -0.0132609205]> : tensor<64xf32>) {addr_space = 0 : i32} : !llvm.array<64 x f32>
  llvm.mlir.global private constant @__constant_64x3x7x7xf32(dense<"tensor<64x3x7x7xf32>) {addr_space = 0 : i32} : !llvm.array<64 x array<3 x array<7 x array<7 x f32>>>>
  ml_program.global private mutable @global_seed(dense<0> : tensor<i64>) : tensor<i64>
  llvm.func @forward(%arg0: !llvm.ptr) -> !llvm.ptr {
    %0 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %1 = llvm.insertvalue %arg0, %0[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %2 = llvm.insertvalue %arg0, %1[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %3 = llvm.mlir.constant(0 : index) : i64
    %4 = llvm.insertvalue %3, %2[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %5 = llvm.mlir.constant(1 : index) : i64
    %6 = llvm.insertvalue %5, %4[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %7 = llvm.mlir.constant(150528 : index) : i64
    %8 = llvm.insertvalue %7, %6[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %9 = llvm.mlir.constant(3 : index) : i64
    %10 = llvm.insertvalue %9, %8[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %11 = llvm.mlir.constant(50176 : index) : i64
    %12 = llvm.insertvalue %11, %10[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %13 = llvm.mlir.constant(224 : index) : i64
    %14 = llvm.insertvalue %13, %12[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %15 = llvm.insertvalue %13, %14[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %16 = llvm.insertvalue %13, %15[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %17 = llvm.insertvalue %5, %16[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %18 = builtin.unrealized_conversion_cast %17 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> to memref<1x3x224x224xf32>
    %19 = builtin.unrealized_conversion_cast %18 : memref<1x3x224x224xf32> to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %20 = llvm.mlir.constant(4 : index) : i64
    %21 = llvm.mlir.constant(28 : index) : i64
    %22 = llvm.mlir.constant(56 : index) : i64
    %23 = llvm.mlir.constant(6 : index) : i64
    %24 = llvm.mlir.constant(114 : index) : i64
    %25 = llvm.mlir.constant(8 : index) : i64
    %26 = llvm.mlir.constant(16 : index) : i64
    %27 = llvm.mlir.constant(112 : index) : i64
    %28 = llvm.mlir.constant(64 : index) : i64
    %29 = llvm.mlir.constant(5 : index) : i64
    %30 = llvm.mlir.constant(230 : index) : i64
    %31 = llvm.mlir.constant(7 : index) : i64
    %32 = llvm.mlir.constant(49 : index) : i64
    %33 = llvm.mlir.constant(147 : index) : i64
    %34 = llvm.mlir.constant(9408 : index) : i64
    %35 = llvm.mlir.null : !llvm.ptr
    %36 = llvm.getelementptr %35[%34] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %37 = llvm.mlir.addressof @__constant_64x3x7x7xf32 : !llvm.ptr
    %38 = llvm.getelementptr %37[0, 0, 0, 0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<64 x array<3 x array<7 x array<7 x f32>>>>
    %39 = llvm.mlir.constant(3735928559 : index) : i64
    %40 = llvm.inttoptr %39 : i64 to !llvm.ptr
    %41 = llvm.insertvalue %40, %0[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %42 = llvm.insertvalue %38, %41[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %43 = llvm.insertvalue %3, %42[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %44 = llvm.insertvalue %28, %43[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %45 = llvm.insertvalue %9, %44[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %46 = llvm.insertvalue %31, %45[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %47 = llvm.insertvalue %31, %46[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %48 = llvm.insertvalue %33, %47[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %49 = llvm.insertvalue %32, %48[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %50 = llvm.insertvalue %31, %49[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %51 = llvm.insertvalue %5, %50[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %52 = llvm.getelementptr %35[%28] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %53 = llvm.mlir.addressof @__constant_64xf32 : !llvm.ptr
    %54 = llvm.getelementptr %53[0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<64 x f32>
    %55 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %56 = llvm.insertvalue %40, %55[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %57 = llvm.insertvalue %54, %56[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %58 = llvm.insertvalue %3, %57[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %59 = llvm.insertvalue %28, %58[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %60 = llvm.insertvalue %5, %59[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %61 = llvm.mlir.addressof @__constant_64xf32_0 : !llvm.ptr
    %62 = llvm.getelementptr %61[0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<64 x f32>
    %63 = llvm.insertvalue %62, %56[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %64 = llvm.insertvalue %3, %63[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %65 = llvm.insertvalue %28, %64[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %66 = llvm.insertvalue %5, %65[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %67 = llvm.mlir.addressof @__constant_64xf32_1 : !llvm.ptr
    %68 = llvm.getelementptr %67[0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<64 x f32>
    %69 = llvm.insertvalue %68, %56[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %70 = llvm.insertvalue %3, %69[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %71 = llvm.insertvalue %28, %70[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %72 = llvm.insertvalue %5, %71[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %73 = llvm.mlir.addressof @__constant_64xf32_2 : !llvm.ptr
    %74 = llvm.getelementptr %73[0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<64 x f32>
    %75 = llvm.insertvalue %74, %56[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %76 = llvm.insertvalue %3, %75[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %77 = llvm.insertvalue %28, %76[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %78 = llvm.insertvalue %5, %77[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %79 = llvm.mlir.constant(52900 : index) : i64
    %80 = llvm.mlir.constant(158700 : index) : i64
    %81 = llvm.getelementptr %35[%80] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %82 = llvm.ptrtoint %81 : !llvm.ptr to i64
    %83 = llvm.add %82, %28  : i64
    %84 = llvm.call @malloc(%83) : (i64) -> !llvm.ptr
    %85 = llvm.ptrtoint %84 : !llvm.ptr to i64
    %86 = llvm.sub %28, %5  : i64
    %87 = llvm.add %85, %86  : i64
    %88 = llvm.urem %87, %28  : i64
    %89 = llvm.sub %87, %88  : i64
    %90 = llvm.inttoptr %89 : i64 to !llvm.ptr
    %91 = llvm.insertvalue %84, %0[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %92 = llvm.insertvalue %90, %91[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %93 = llvm.insertvalue %3, %92[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %94 = llvm.insertvalue %5, %93[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %95 = llvm.insertvalue %9, %94[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %96 = llvm.insertvalue %30, %95[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %97 = llvm.insertvalue %30, %96[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %98 = llvm.insertvalue %80, %97[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %99 = llvm.insertvalue %79, %98[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %100 = llvm.insertvalue %30, %99[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %101 = llvm.insertvalue %5, %100[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.br ^bb1(%3 : i64)
  ^bb1(%102: i64):  // 2 preds: ^bb0, ^bb8
    %103 = builtin.unrealized_conversion_cast %102 : i64 to index
    %104 = builtin.unrealized_conversion_cast %103 : index to i64
    %105 = llvm.icmp "slt" %104, %5 : i64
    llvm.cond_br %105, ^bb2, ^bb9
  ^bb2:  // pred: ^bb1
    llvm.br ^bb3(%3 : i64)
  ^bb3(%106: i64):  // 2 preds: ^bb2, ^bb7
    %107 = builtin.unrealized_conversion_cast %106 : i64 to index
    %108 = builtin.unrealized_conversion_cast %107 : index to i64
    %109 = llvm.icmp "slt" %108, %9 : i64
    llvm.cond_br %109, ^bb4, ^bb8
  ^bb4:  // pred: ^bb3
    llvm.br ^bb5(%3 : i64)
  ^bb5(%110: i64):  // 2 preds: ^bb4, ^bb6
    %111 = builtin.unrealized_conversion_cast %110 : i64 to index
    %112 = builtin.unrealized_conversion_cast %111 : index to i64
    %113 = llvm.icmp "slt" %112, %30 : i64
    llvm.cond_br %113, ^bb6, ^bb7
  ^bb6:  // pred: ^bb5
    %114 = builtin.unrealized_conversion_cast %3 : i64 to index
    %115 = llvm.extractvalue %101[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %116 = builtin.unrealized_conversion_cast %114 : index to i64
    %117 = llvm.mul %116, %80  : i64
    %118 = llvm.mul %108, %79  : i64
    %119 = llvm.add %117, %118  : i64
    %120 = llvm.mul %112, %30  : i64
    %121 = llvm.add %119, %120  : i64
    %122 = llvm.add %121, %116  : i64
    %123 = llvm.getelementptr %115[%122] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %124 = builtin.unrealized_conversion_cast %123 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %125 = llvm.extractvalue %124[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.call @forward_kernel_0(%125) : (!llvm.ptr) -> ()
    %126 = llvm.add %112, %29  : i64
    llvm.br ^bb5(%126 : i64)
  ^bb7:  // pred: ^bb5
    %127 = llvm.add %108, %5  : i64
    llvm.br ^bb3(%127 : i64)
  ^bb8:  // pred: ^bb3
    %128 = llvm.add %104, %5  : i64
    llvm.br ^bb1(%128 : i64)
  ^bb9:  // pred: ^bb1
    %129 = llvm.call @malloc(%83) : (i64) -> !llvm.ptr
    %130 = llvm.ptrtoint %129 : !llvm.ptr to i64
    %131 = llvm.add %130, %86  : i64
    %132 = llvm.urem %131, %28  : i64
    %133 = llvm.sub %131, %132  : i64
    %134 = llvm.inttoptr %133 : i64 to !llvm.ptr
    %135 = llvm.insertvalue %129, %0[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %136 = llvm.insertvalue %134, %135[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %137 = llvm.insertvalue %3, %136[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %138 = llvm.insertvalue %5, %137[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %139 = llvm.insertvalue %9, %138[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %140 = llvm.insertvalue %30, %139[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %141 = llvm.insertvalue %30, %140[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %142 = llvm.insertvalue %80, %141[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %143 = llvm.insertvalue %79, %142[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %144 = llvm.insertvalue %30, %143[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %145 = llvm.insertvalue %5, %144[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %146 = llvm.extractvalue %101[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %147 = llvm.mul %5, %146  : i64
    %148 = llvm.extractvalue %101[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %149 = llvm.mul %147, %148  : i64
    %150 = llvm.extractvalue %101[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %151 = llvm.mul %149, %150  : i64
    %152 = llvm.extractvalue %101[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %153 = llvm.mul %151, %152  : i64
    %154 = llvm.getelementptr %35[1] : (!llvm.ptr) -> !llvm.ptr, f32
    %155 = llvm.ptrtoint %154 : !llvm.ptr to i64
    %156 = llvm.mul %153, %155  : i64
    %157 = llvm.extractvalue %101[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %158 = llvm.extractvalue %101[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %159 = llvm.getelementptr %157[%158] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %160 = llvm.extractvalue %145[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %161 = llvm.extractvalue %145[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %162 = llvm.getelementptr %160[%161] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    "llvm.intr.memcpy"(%162, %159, %156) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> ()
    %163 = llvm.extractvalue %145[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %164 = llvm.insertvalue %163, %0[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %165 = llvm.insertvalue %160, %164[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %166 = llvm.mlir.constant(693 : index) : i64
    %167 = llvm.insertvalue %166, %165[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %168 = llvm.insertvalue %5, %167[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %169 = llvm.insertvalue %80, %168[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %170 = llvm.insertvalue %9, %169[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %171 = llvm.insertvalue %79, %170[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %172 = llvm.insertvalue %13, %171[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %173 = llvm.insertvalue %30, %172[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %174 = llvm.insertvalue %13, %173[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %175 = llvm.insertvalue %5, %174[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %176 = llvm.intr.stacksave : !llvm.ptr
    %177 = llvm.mlir.constant(4 : i64) : i64
    %178 = llvm.alloca %5 x !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> : (i64) -> !llvm.ptr
    llvm.store %19, %178 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>, !llvm.ptr
    %179 = llvm.mlir.undef : !llvm.struct<(i64, ptr)>
    %180 = llvm.insertvalue %177, %179[0] : !llvm.struct<(i64, ptr)> 
    %181 = llvm.insertvalue %178, %180[1] : !llvm.struct<(i64, ptr)> 
    %182 = llvm.alloca %5 x !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> : (i64) -> !llvm.ptr
    llvm.store %175, %182 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>, !llvm.ptr
    %183 = llvm.insertvalue %182, %180[1] : !llvm.struct<(i64, ptr)> 
    %184 = llvm.alloca %5 x !llvm.struct<(i64, ptr)> : (i64) -> !llvm.ptr
    llvm.store %181, %184 : !llvm.struct<(i64, ptr)>, !llvm.ptr
    %185 = llvm.alloca %5 x !llvm.struct<(i64, ptr)> : (i64) -> !llvm.ptr
    llvm.store %183, %185 : !llvm.struct<(i64, ptr)>, !llvm.ptr
    llvm.call @memrefCopy(%20, %184, %185) : (i64, !llvm.ptr, !llvm.ptr) -> ()
    llvm.intr.stackrestore %176 : !llvm.ptr
    %186 = llvm.mlir.constant(12544 : index) : i64
    %187 = llvm.mlir.constant(802816 : index) : i64
    %188 = llvm.getelementptr %35[%187] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %189 = llvm.ptrtoint %188 : !llvm.ptr to i64
    %190 = llvm.add %189, %28  : i64
    %191 = llvm.call @malloc(%190) : (i64) -> !llvm.ptr
    %192 = llvm.ptrtoint %191 : !llvm.ptr to i64
    %193 = llvm.add %192, %86  : i64
    %194 = llvm.urem %193, %28  : i64
    %195 = llvm.sub %193, %194  : i64
    %196 = llvm.inttoptr %195 : i64 to !llvm.ptr
    %197 = llvm.insertvalue %191, %0[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %198 = llvm.insertvalue %196, %197[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %199 = llvm.insertvalue %3, %198[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %200 = llvm.insertvalue %5, %199[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %201 = llvm.insertvalue %28, %200[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %202 = llvm.insertvalue %27, %201[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %203 = llvm.insertvalue %27, %202[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %204 = llvm.insertvalue %187, %203[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %205 = llvm.insertvalue %186, %204[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %206 = llvm.insertvalue %27, %205[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %207 = llvm.insertvalue %5, %206[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.br ^bb10(%3 : i64)
  ^bb10(%208: i64):  // 2 preds: ^bb9, ^bb17
    %209 = builtin.unrealized_conversion_cast %208 : i64 to index
    %210 = builtin.unrealized_conversion_cast %209 : index to i64
    %211 = llvm.icmp "slt" %210, %5 : i64
    llvm.cond_br %211, ^bb11, ^bb18
  ^bb11:  // pred: ^bb10
    llvm.br ^bb12(%3 : i64)
  ^bb12(%212: i64):  // 2 preds: ^bb11, ^bb16
    %213 = builtin.unrealized_conversion_cast %212 : i64 to index
    %214 = builtin.unrealized_conversion_cast %213 : index to i64
    %215 = llvm.icmp "slt" %214, %28 : i64
    llvm.cond_br %215, ^bb13, ^bb17
  ^bb13:  // pred: ^bb12
    llvm.br ^bb14(%3 : i64)
  ^bb14(%216: i64):  // 2 preds: ^bb13, ^bb15
    %217 = builtin.unrealized_conversion_cast %216 : i64 to index
    %218 = builtin.unrealized_conversion_cast %217 : index to i64
    %219 = llvm.icmp "slt" %218, %27 : i64
    llvm.cond_br %219, ^bb15, ^bb16
  ^bb15:  // pred: ^bb14
    %220 = builtin.unrealized_conversion_cast %3 : i64 to index
    %221 = llvm.extractvalue %207[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %222 = builtin.unrealized_conversion_cast %220 : index to i64
    %223 = llvm.mul %222, %187  : i64
    %224 = llvm.mul %214, %186  : i64
    %225 = llvm.add %223, %224  : i64
    %226 = llvm.mul %218, %27  : i64
    %227 = llvm.add %225, %226  : i64
    %228 = llvm.add %227, %222  : i64
    %229 = llvm.getelementptr %221[%228] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %230 = builtin.unrealized_conversion_cast %229 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %231 = llvm.extractvalue %230[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.call @forward_kernel_1(%231) : (!llvm.ptr) -> ()
    %232 = llvm.add %218, %26  : i64
    llvm.br ^bb14(%232 : i64)
  ^bb16:  // pred: ^bb14
    %233 = llvm.add %214, %5  : i64
    llvm.br ^bb12(%233 : i64)
  ^bb17:  // pred: ^bb12
    %234 = llvm.add %210, %5  : i64
    llvm.br ^bb10(%234 : i64)
  ^bb18:  // pred: ^bb10
    %235 = llvm.call @malloc(%190) : (i64) -> !llvm.ptr
    %236 = llvm.ptrtoint %235 : !llvm.ptr to i64
    %237 = llvm.add %236, %86  : i64
    %238 = llvm.urem %237, %28  : i64
    %239 = llvm.sub %237, %238  : i64
    %240 = llvm.inttoptr %239 : i64 to !llvm.ptr
    %241 = llvm.insertvalue %235, %0[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %242 = llvm.insertvalue %240, %241[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %243 = llvm.insertvalue %3, %242[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %244 = llvm.insertvalue %5, %243[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %245 = llvm.insertvalue %28, %244[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %246 = llvm.insertvalue %27, %245[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %247 = llvm.insertvalue %27, %246[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %248 = llvm.insertvalue %187, %247[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %249 = llvm.insertvalue %186, %248[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %250 = llvm.insertvalue %27, %249[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %251 = llvm.insertvalue %5, %250[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %252 = llvm.extractvalue %207[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %253 = llvm.mul %5, %252  : i64
    %254 = llvm.extractvalue %207[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %255 = llvm.mul %253, %254  : i64
    %256 = llvm.extractvalue %207[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %257 = llvm.mul %255, %256  : i64
    %258 = llvm.extractvalue %207[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %259 = llvm.mul %257, %258  : i64
    %260 = llvm.mul %259, %155  : i64
    %261 = llvm.extractvalue %207[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %262 = llvm.extractvalue %207[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %263 = llvm.getelementptr %261[%262] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %264 = llvm.extractvalue %251[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %265 = llvm.extractvalue %251[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %266 = llvm.getelementptr %264[%265] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    "llvm.intr.memcpy"(%266, %263, %260) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> ()
    llvm.br ^bb19(%3 : i64)
  ^bb19(%267: i64):  // 2 preds: ^bb18, ^bb29
    %268 = builtin.unrealized_conversion_cast %267 : i64 to index
    %269 = builtin.unrealized_conversion_cast %268 : index to i64
    %270 = llvm.icmp "slt" %269, %5 : i64
    llvm.cond_br %270, ^bb20, ^bb30
  ^bb20:  // pred: ^bb19
    llvm.br ^bb21(%3 : i64)
  ^bb21(%271: i64):  // 2 preds: ^bb20, ^bb28
    %272 = builtin.unrealized_conversion_cast %271 : i64 to index
    %273 = builtin.unrealized_conversion_cast %272 : index to i64
    %274 = llvm.icmp "slt" %273, %28 : i64
    llvm.cond_br %274, ^bb22, ^bb29
  ^bb22:  // pred: ^bb21
    llvm.br ^bb23(%3 : i64)
  ^bb23(%275: i64):  // 2 preds: ^bb22, ^bb27
    %276 = builtin.unrealized_conversion_cast %275 : i64 to index
    %277 = builtin.unrealized_conversion_cast %276 : index to i64
    %278 = llvm.icmp "slt" %277, %27 : i64
    llvm.cond_br %278, ^bb24, ^bb28
  ^bb24:  // pred: ^bb23
    llvm.br ^bb25(%3 : i64)
  ^bb25(%279: i64):  // 2 preds: ^bb24, ^bb26
    %280 = builtin.unrealized_conversion_cast %279 : i64 to index
    %281 = builtin.unrealized_conversion_cast %280 : index to i64
    %282 = llvm.icmp "slt" %281, %27 : i64
    llvm.cond_br %282, ^bb26, ^bb27
  ^bb26:  // pred: ^bb25
    %283 = builtin.unrealized_conversion_cast %3 : i64 to index
    %284 = llvm.mlir.constant(2 : index) : i64
    %285 = llvm.mul %275, %284  : i64
    %286 = builtin.unrealized_conversion_cast %285 : i64 to index
    %287 = llvm.mul %279, %284  : i64
    %288 = builtin.unrealized_conversion_cast %287 : i64 to index
    %289 = builtin.unrealized_conversion_cast %283 : index to i64
    %290 = llvm.mul %289, %80  : i64
    %291 = llvm.mul %289, %79  : i64
    %292 = llvm.add %290, %291  : i64
    %293 = builtin.unrealized_conversion_cast %286 : index to i64
    %294 = llvm.mul %293, %30  : i64
    %295 = llvm.add %292, %294  : i64
    %296 = builtin.unrealized_conversion_cast %288 : index to i64
    %297 = llvm.add %295, %296  : i64
    %298 = llvm.getelementptr %160[%297] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %299 = builtin.unrealized_conversion_cast %298 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %300 = llvm.extractvalue %51[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %301 = llvm.mul %273, %33  : i64
    %302 = llvm.mul %289, %32  : i64
    %303 = llvm.add %301, %302  : i64
    %304 = llvm.mul %289, %31  : i64
    %305 = llvm.add %303, %304  : i64
    %306 = llvm.add %305, %289  : i64
    %307 = llvm.getelementptr %300[%306] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %308 = builtin.unrealized_conversion_cast %307 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %309 = llvm.mul %289, %187  : i64
    %310 = llvm.mul %273, %186  : i64
    %311 = llvm.add %309, %310  : i64
    %312 = llvm.mul %277, %27  : i64
    %313 = llvm.add %311, %312  : i64
    %314 = llvm.add %313, %281  : i64
    %315 = llvm.getelementptr %264[%314] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %316 = builtin.unrealized_conversion_cast %315 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %317 = llvm.extractvalue %299[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %318 = llvm.extractvalue %308[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %319 = llvm.extractvalue %316[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.call @forward_kernel_2(%317, %318, %319, %319) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> ()
    %320 = llvm.add %281, %25  : i64
    llvm.br ^bb25(%320 : i64)
  ^bb27:  // pred: ^bb25
    %321 = llvm.add %277, %5  : i64
    llvm.br ^bb23(%321 : i64)
  ^bb28:  // pred: ^bb23
    %322 = llvm.add %273, %5  : i64
    llvm.br ^bb21(%322 : i64)
  ^bb29:  // pred: ^bb21
    %323 = llvm.add %269, %5  : i64
    llvm.br ^bb19(%323 : i64)
  ^bb30:  // pred: ^bb19
    %324 = llvm.call @malloc(%190) : (i64) -> !llvm.ptr
    %325 = llvm.ptrtoint %324 : !llvm.ptr to i64
    %326 = llvm.add %325, %86  : i64
    %327 = llvm.urem %326, %28  : i64
    %328 = llvm.sub %326, %327  : i64
    %329 = llvm.inttoptr %328 : i64 to !llvm.ptr
    %330 = llvm.insertvalue %324, %0[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %331 = llvm.insertvalue %329, %330[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %332 = llvm.insertvalue %3, %331[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %333 = llvm.insertvalue %5, %332[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %334 = llvm.insertvalue %28, %333[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %335 = llvm.insertvalue %27, %334[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %336 = llvm.insertvalue %27, %335[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %337 = llvm.insertvalue %187, %336[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %338 = llvm.insertvalue %186, %337[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %339 = llvm.insertvalue %27, %338[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %340 = llvm.insertvalue %5, %339[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.br ^bb31(%3 : i64)
  ^bb31(%341: i64):  // 2 preds: ^bb30, ^bb38
    %342 = builtin.unrealized_conversion_cast %341 : i64 to index
    %343 = builtin.unrealized_conversion_cast %342 : index to i64
    %344 = llvm.icmp "slt" %343, %5 : i64
    llvm.cond_br %344, ^bb32, ^bb39
  ^bb32:  // pred: ^bb31
    llvm.br ^bb33(%3 : i64)
  ^bb33(%345: i64):  // 2 preds: ^bb32, ^bb37
    %346 = builtin.unrealized_conversion_cast %345 : i64 to index
    %347 = builtin.unrealized_conversion_cast %346 : index to i64
    %348 = llvm.icmp "slt" %347, %28 : i64
    llvm.cond_br %348, ^bb34, ^bb38
  ^bb34:  // pred: ^bb33
    llvm.br ^bb35(%3 : i64)
  ^bb35(%349: i64):  // 2 preds: ^bb34, ^bb36
    %350 = builtin.unrealized_conversion_cast %349 : i64 to index
    %351 = builtin.unrealized_conversion_cast %350 : index to i64
    %352 = llvm.icmp "slt" %351, %27 : i64
    llvm.cond_br %352, ^bb36, ^bb37
  ^bb36:  // pred: ^bb35
    %353 = builtin.unrealized_conversion_cast %3 : i64 to index
    %354 = builtin.unrealized_conversion_cast %353 : index to i64
    %355 = llvm.mul %354, %187  : i64
    %356 = llvm.mul %347, %186  : i64
    %357 = llvm.add %355, %356  : i64
    %358 = llvm.mul %351, %27  : i64
    %359 = llvm.add %357, %358  : i64
    %360 = llvm.add %359, %354  : i64
    %361 = llvm.getelementptr %264[%360] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %362 = builtin.unrealized_conversion_cast %361 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %363 = llvm.extractvalue %72[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %364 = llvm.getelementptr %363[%347] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %365 = builtin.unrealized_conversion_cast %364 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %366 = llvm.extractvalue %78[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %367 = llvm.getelementptr %366[%347] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %368 = builtin.unrealized_conversion_cast %367 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %369 = llvm.extractvalue %60[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %370 = llvm.getelementptr %369[%347] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %371 = builtin.unrealized_conversion_cast %370 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %372 = llvm.extractvalue %66[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %373 = llvm.getelementptr %372[%347] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %374 = builtin.unrealized_conversion_cast %373 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %375 = llvm.extractvalue %340[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %376 = llvm.getelementptr %375[%360] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %377 = builtin.unrealized_conversion_cast %376 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %378 = llvm.extractvalue %362[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %379 = llvm.extractvalue %365[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %380 = llvm.extractvalue %368[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %381 = llvm.extractvalue %371[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %382 = llvm.extractvalue %374[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %383 = llvm.extractvalue %377[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.call @forward_kernel_3(%378, %379, %380, %381, %382, %383) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> ()
    %384 = llvm.add %351, %26  : i64
    llvm.br ^bb35(%384 : i64)
  ^bb37:  // pred: ^bb35
    %385 = llvm.add %347, %5  : i64
    llvm.br ^bb33(%385 : i64)
  ^bb38:  // pred: ^bb33
    %386 = llvm.add %343, %5  : i64
    llvm.br ^bb31(%386 : i64)
  ^bb39:  // pred: ^bb31
    %387 = llvm.call @malloc(%190) : (i64) -> !llvm.ptr
    %388 = llvm.ptrtoint %387 : !llvm.ptr to i64
    %389 = llvm.add %388, %86  : i64
    %390 = llvm.urem %389, %28  : i64
    %391 = llvm.sub %389, %390  : i64
    %392 = llvm.inttoptr %391 : i64 to !llvm.ptr
    %393 = llvm.insertvalue %387, %0[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %394 = llvm.insertvalue %392, %393[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %395 = llvm.insertvalue %3, %394[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %396 = llvm.insertvalue %5, %395[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %397 = llvm.insertvalue %28, %396[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %398 = llvm.insertvalue %27, %397[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %399 = llvm.insertvalue %27, %398[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %400 = llvm.insertvalue %187, %399[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %401 = llvm.insertvalue %186, %400[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %402 = llvm.insertvalue %27, %401[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %403 = llvm.insertvalue %5, %402[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.br ^bb40(%3 : i64)
  ^bb40(%404: i64):  // 2 preds: ^bb39, ^bb47
    %405 = builtin.unrealized_conversion_cast %404 : i64 to index
    %406 = builtin.unrealized_conversion_cast %405 : index to i64
    %407 = llvm.icmp "slt" %406, %5 : i64
    llvm.cond_br %407, ^bb41, ^bb48
  ^bb41:  // pred: ^bb40
    llvm.br ^bb42(%3 : i64)
  ^bb42(%408: i64):  // 2 preds: ^bb41, ^bb46
    %409 = builtin.unrealized_conversion_cast %408 : i64 to index
    %410 = builtin.unrealized_conversion_cast %409 : index to i64
    %411 = llvm.icmp "slt" %410, %28 : i64
    llvm.cond_br %411, ^bb43, ^bb47
  ^bb43:  // pred: ^bb42
    llvm.br ^bb44(%3 : i64)
  ^bb44(%412: i64):  // 2 preds: ^bb43, ^bb45
    %413 = builtin.unrealized_conversion_cast %412 : i64 to index
    %414 = builtin.unrealized_conversion_cast %413 : index to i64
    %415 = llvm.icmp "slt" %414, %27 : i64
    llvm.cond_br %415, ^bb45, ^bb46
  ^bb45:  // pred: ^bb44
    %416 = builtin.unrealized_conversion_cast %3 : i64 to index
    %417 = llvm.extractvalue %340[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %418 = builtin.unrealized_conversion_cast %416 : index to i64
    %419 = llvm.mul %418, %187  : i64
    %420 = llvm.mul %410, %186  : i64
    %421 = llvm.add %419, %420  : i64
    %422 = llvm.mul %414, %27  : i64
    %423 = llvm.add %421, %422  : i64
    %424 = llvm.add %423, %418  : i64
    %425 = llvm.getelementptr %417[%424] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %426 = builtin.unrealized_conversion_cast %425 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %427 = llvm.extractvalue %403[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %428 = llvm.getelementptr %427[%424] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %429 = builtin.unrealized_conversion_cast %428 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %430 = llvm.extractvalue %426[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %431 = llvm.extractvalue %429[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.call @forward_kernel_4(%430, %431) : (!llvm.ptr, !llvm.ptr) -> ()
    %432 = llvm.add %414, %26  : i64
    llvm.br ^bb44(%432 : i64)
  ^bb46:  // pred: ^bb44
    %433 = llvm.add %410, %5  : i64
    llvm.br ^bb42(%433 : i64)
  ^bb47:  // pred: ^bb42
    %434 = llvm.add %406, %5  : i64
    llvm.br ^bb40(%434 : i64)
  ^bb48:  // pred: ^bb40
    %435 = llvm.mlir.constant(12996 : index) : i64
    %436 = llvm.mlir.constant(831744 : index) : i64
    %437 = llvm.getelementptr %35[%436] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %438 = llvm.ptrtoint %437 : !llvm.ptr to i64
    %439 = llvm.add %438, %28  : i64
    %440 = llvm.call @malloc(%439) : (i64) -> !llvm.ptr
    %441 = llvm.ptrtoint %440 : !llvm.ptr to i64
    %442 = llvm.add %441, %86  : i64
    %443 = llvm.urem %442, %28  : i64
    %444 = llvm.sub %442, %443  : i64
    %445 = llvm.inttoptr %444 : i64 to !llvm.ptr
    %446 = llvm.insertvalue %440, %0[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %447 = llvm.insertvalue %445, %446[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %448 = llvm.insertvalue %3, %447[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %449 = llvm.insertvalue %5, %448[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %450 = llvm.insertvalue %28, %449[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %451 = llvm.insertvalue %24, %450[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %452 = llvm.insertvalue %24, %451[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %453 = llvm.insertvalue %436, %452[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %454 = llvm.insertvalue %435, %453[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %455 = llvm.insertvalue %24, %454[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %456 = llvm.insertvalue %5, %455[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.br ^bb49(%3 : i64)
  ^bb49(%457: i64):  // 2 preds: ^bb48, ^bb56
    %458 = builtin.unrealized_conversion_cast %457 : i64 to index
    %459 = builtin.unrealized_conversion_cast %458 : index to i64
    %460 = llvm.icmp "slt" %459, %5 : i64
    llvm.cond_br %460, ^bb50, ^bb57
  ^bb50:  // pred: ^bb49
    llvm.br ^bb51(%3 : i64)
  ^bb51(%461: i64):  // 2 preds: ^bb50, ^bb55
    %462 = builtin.unrealized_conversion_cast %461 : i64 to index
    %463 = builtin.unrealized_conversion_cast %462 : index to i64
    %464 = llvm.icmp "slt" %463, %28 : i64
    llvm.cond_br %464, ^bb52, ^bb56
  ^bb52:  // pred: ^bb51
    llvm.br ^bb53(%3 : i64)
  ^bb53(%465: i64):  // 2 preds: ^bb52, ^bb54
    %466 = builtin.unrealized_conversion_cast %465 : i64 to index
    %467 = builtin.unrealized_conversion_cast %466 : index to i64
    %468 = llvm.icmp "slt" %467, %24 : i64
    llvm.cond_br %468, ^bb54, ^bb55
  ^bb54:  // pred: ^bb53
    %469 = builtin.unrealized_conversion_cast %3 : i64 to index
    %470 = llvm.extractvalue %456[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %471 = builtin.unrealized_conversion_cast %469 : index to i64
    %472 = llvm.mul %471, %436  : i64
    %473 = llvm.mul %463, %435  : i64
    %474 = llvm.add %472, %473  : i64
    %475 = llvm.mul %467, %24  : i64
    %476 = llvm.add %474, %475  : i64
    %477 = llvm.add %476, %471  : i64
    %478 = llvm.getelementptr %470[%477] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %479 = builtin.unrealized_conversion_cast %478 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %480 = llvm.extractvalue %479[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.call @forward_kernel_5(%480) : (!llvm.ptr) -> ()
    %481 = llvm.add %467, %23  : i64
    llvm.br ^bb53(%481 : i64)
  ^bb55:  // pred: ^bb53
    %482 = llvm.add %463, %5  : i64
    llvm.br ^bb51(%482 : i64)
  ^bb56:  // pred: ^bb51
    %483 = llvm.add %459, %5  : i64
    llvm.br ^bb49(%483 : i64)
  ^bb57:  // pred: ^bb49
    %484 = llvm.call @malloc(%439) : (i64) -> !llvm.ptr
    %485 = llvm.ptrtoint %484 : !llvm.ptr to i64
    %486 = llvm.add %485, %86  : i64
    %487 = llvm.urem %486, %28  : i64
    %488 = llvm.sub %486, %487  : i64
    %489 = llvm.inttoptr %488 : i64 to !llvm.ptr
    %490 = llvm.insertvalue %484, %0[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %491 = llvm.insertvalue %489, %490[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %492 = llvm.insertvalue %3, %491[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %493 = llvm.insertvalue %5, %492[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %494 = llvm.insertvalue %28, %493[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %495 = llvm.insertvalue %24, %494[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %496 = llvm.insertvalue %24, %495[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %497 = llvm.insertvalue %436, %496[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %498 = llvm.insertvalue %435, %497[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %499 = llvm.insertvalue %24, %498[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %500 = llvm.insertvalue %5, %499[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %501 = llvm.extractvalue %456[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %502 = llvm.mul %5, %501  : i64
    %503 = llvm.extractvalue %456[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %504 = llvm.mul %502, %503  : i64
    %505 = llvm.extractvalue %456[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %506 = llvm.mul %504, %505  : i64
    %507 = llvm.extractvalue %456[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %508 = llvm.mul %506, %507  : i64
    %509 = llvm.mul %508, %155  : i64
    %510 = llvm.extractvalue %456[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %511 = llvm.extractvalue %456[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %512 = llvm.getelementptr %510[%511] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %513 = llvm.extractvalue %500[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %514 = llvm.extractvalue %500[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %515 = llvm.getelementptr %513[%514] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    "llvm.intr.memcpy"(%515, %512, %509) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> ()
    %516 = llvm.extractvalue %500[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %517 = llvm.insertvalue %516, %0[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %518 = llvm.insertvalue %513, %517[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %519 = llvm.mlir.constant(115 : index) : i64
    %520 = llvm.insertvalue %519, %518[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %521 = llvm.insertvalue %5, %520[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %522 = llvm.insertvalue %436, %521[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %523 = llvm.insertvalue %28, %522[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %524 = llvm.insertvalue %435, %523[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %525 = llvm.insertvalue %27, %524[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %526 = llvm.insertvalue %24, %525[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %527 = llvm.insertvalue %27, %526[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %528 = llvm.insertvalue %5, %527[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %529 = llvm.intr.stacksave : !llvm.ptr
    %530 = llvm.alloca %5 x !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> : (i64) -> !llvm.ptr
    llvm.store %403, %530 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>, !llvm.ptr
    %531 = llvm.insertvalue %530, %180[1] : !llvm.struct<(i64, ptr)> 
    %532 = llvm.alloca %5 x !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> : (i64) -> !llvm.ptr
    llvm.store %528, %532 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>, !llvm.ptr
    %533 = llvm.insertvalue %532, %180[1] : !llvm.struct<(i64, ptr)> 
    %534 = llvm.alloca %5 x !llvm.struct<(i64, ptr)> : (i64) -> !llvm.ptr
    llvm.store %531, %534 : !llvm.struct<(i64, ptr)>, !llvm.ptr
    %535 = llvm.alloca %5 x !llvm.struct<(i64, ptr)> : (i64) -> !llvm.ptr
    llvm.store %533, %535 : !llvm.struct<(i64, ptr)>, !llvm.ptr
    llvm.call @memrefCopy(%20, %534, %535) : (i64, !llvm.ptr, !llvm.ptr) -> ()
    llvm.intr.stackrestore %529 : !llvm.ptr
    %536 = llvm.mlir.constant(3136 : index) : i64
    %537 = llvm.mlir.constant(200704 : index) : i64
    %538 = llvm.getelementptr %35[%537] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %539 = llvm.ptrtoint %538 : !llvm.ptr to i64
    %540 = llvm.add %539, %28  : i64
    %541 = llvm.call @malloc(%540) : (i64) -> !llvm.ptr
    %542 = llvm.ptrtoint %541 : !llvm.ptr to i64
    %543 = llvm.add %542, %86  : i64
    %544 = llvm.urem %543, %28  : i64
    %545 = llvm.sub %543, %544  : i64
    %546 = llvm.inttoptr %545 : i64 to !llvm.ptr
    %547 = llvm.insertvalue %541, %0[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %548 = llvm.insertvalue %546, %547[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %549 = llvm.insertvalue %3, %548[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %550 = llvm.insertvalue %5, %549[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %551 = llvm.insertvalue %28, %550[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %552 = llvm.insertvalue %22, %551[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %553 = llvm.insertvalue %22, %552[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %554 = llvm.insertvalue %537, %553[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %555 = llvm.insertvalue %536, %554[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %556 = llvm.insertvalue %22, %555[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %557 = llvm.insertvalue %5, %556[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.br ^bb58(%3 : i64)
  ^bb58(%558: i64):  // 2 preds: ^bb57, ^bb65
    %559 = builtin.unrealized_conversion_cast %558 : i64 to index
    %560 = builtin.unrealized_conversion_cast %559 : index to i64
    %561 = llvm.icmp "slt" %560, %5 : i64
    llvm.cond_br %561, ^bb59, ^bb66
  ^bb59:  // pred: ^bb58
    llvm.br ^bb60(%3 : i64)
  ^bb60(%562: i64):  // 2 preds: ^bb59, ^bb64
    %563 = builtin.unrealized_conversion_cast %562 : i64 to index
    %564 = builtin.unrealized_conversion_cast %563 : index to i64
    %565 = llvm.icmp "slt" %564, %28 : i64
    llvm.cond_br %565, ^bb61, ^bb65
  ^bb61:  // pred: ^bb60
    llvm.br ^bb62(%3 : i64)
  ^bb62(%566: i64):  // 2 preds: ^bb61, ^bb63
    %567 = builtin.unrealized_conversion_cast %566 : i64 to index
    %568 = builtin.unrealized_conversion_cast %567 : index to i64
    %569 = llvm.icmp "slt" %568, %22 : i64
    llvm.cond_br %569, ^bb63, ^bb64
  ^bb63:  // pred: ^bb62
    %570 = builtin.unrealized_conversion_cast %3 : i64 to index
    %571 = llvm.extractvalue %557[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %572 = builtin.unrealized_conversion_cast %570 : index to i64
    %573 = llvm.mul %572, %537  : i64
    %574 = llvm.mul %564, %536  : i64
    %575 = llvm.add %573, %574  : i64
    %576 = llvm.mul %568, %22  : i64
    %577 = llvm.add %575, %576  : i64
    %578 = llvm.add %577, %572  : i64
    %579 = llvm.getelementptr %571[%578] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %580 = builtin.unrealized_conversion_cast %579 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %581 = llvm.extractvalue %580[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.call @forward_kernel_6(%581) : (!llvm.ptr) -> ()
    %582 = llvm.add %568, %21  : i64
    llvm.br ^bb62(%582 : i64)
  ^bb64:  // pred: ^bb62
    %583 = llvm.add %564, %5  : i64
    llvm.br ^bb60(%583 : i64)
  ^bb65:  // pred: ^bb60
    %584 = llvm.add %560, %5  : i64
    llvm.br ^bb58(%584 : i64)
  ^bb66:  // pred: ^bb58
    %585 = llvm.call @malloc(%540) : (i64) -> !llvm.ptr
    %586 = llvm.ptrtoint %585 : !llvm.ptr to i64
    %587 = llvm.add %586, %86  : i64
    %588 = llvm.urem %587, %28  : i64
    %589 = llvm.sub %587, %588  : i64
    %590 = llvm.inttoptr %589 : i64 to !llvm.ptr
    %591 = llvm.insertvalue %585, %0[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %592 = llvm.insertvalue %590, %591[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %593 = llvm.insertvalue %3, %592[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %594 = llvm.insertvalue %5, %593[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %595 = llvm.insertvalue %28, %594[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %596 = llvm.insertvalue %22, %595[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %597 = llvm.insertvalue %22, %596[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %598 = llvm.insertvalue %537, %597[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %599 = llvm.insertvalue %536, %598[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %600 = llvm.insertvalue %22, %599[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %601 = llvm.insertvalue %5, %600[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %602 = llvm.extractvalue %557[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %603 = llvm.mul %5, %602  : i64
    %604 = llvm.extractvalue %557[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %605 = llvm.mul %603, %604  : i64
    %606 = llvm.extractvalue %557[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %607 = llvm.mul %605, %606  : i64
    %608 = llvm.extractvalue %557[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %609 = llvm.mul %607, %608  : i64
    %610 = llvm.mul %609, %155  : i64
    %611 = llvm.extractvalue %557[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %612 = llvm.extractvalue %557[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %613 = llvm.getelementptr %611[%612] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %614 = llvm.extractvalue %601[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %615 = llvm.extractvalue %601[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %616 = llvm.getelementptr %614[%615] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    "llvm.intr.memcpy"(%616, %613, %610) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> ()
    llvm.br ^bb67(%3 : i64)
  ^bb67(%617: i64):  // 2 preds: ^bb66, ^bb74
    %618 = builtin.unrealized_conversion_cast %617 : i64 to index
    %619 = builtin.unrealized_conversion_cast %618 : index to i64
    %620 = llvm.icmp "slt" %619, %5 : i64
    llvm.cond_br %620, ^bb68, ^bb75
  ^bb68:  // pred: ^bb67
    llvm.br ^bb69(%3 : i64)
  ^bb69(%621: i64):  // 2 preds: ^bb68, ^bb73
    %622 = builtin.unrealized_conversion_cast %621 : i64 to index
    %623 = builtin.unrealized_conversion_cast %622 : index to i64
    %624 = llvm.icmp "slt" %623, %28 : i64
    llvm.cond_br %624, ^bb70, ^bb74
  ^bb70:  // pred: ^bb69
    llvm.br ^bb71(%3 : i64)
  ^bb71(%625: i64):  // 2 preds: ^bb70, ^bb72
    %626 = builtin.unrealized_conversion_cast %625 : i64 to index
    %627 = builtin.unrealized_conversion_cast %626 : index to i64
    %628 = llvm.icmp "slt" %627, %22 : i64
    llvm.cond_br %628, ^bb72, ^bb73
  ^bb72:  // pred: ^bb71
    %629 = builtin.unrealized_conversion_cast %3 : i64 to index
    %630 = llvm.mlir.constant(2 : index) : i64
    %631 = llvm.mul %625, %630  : i64
    %632 = builtin.unrealized_conversion_cast %631 : i64 to index
    %633 = builtin.unrealized_conversion_cast %629 : index to i64
    %634 = llvm.mul %633, %436  : i64
    %635 = llvm.mul %623, %435  : i64
    %636 = llvm.add %634, %635  : i64
    %637 = builtin.unrealized_conversion_cast %632 : index to i64
    %638 = llvm.mul %637, %24  : i64
    %639 = llvm.add %636, %638  : i64
    %640 = llvm.add %639, %633  : i64
    %641 = llvm.getelementptr %513[%640] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %642 = builtin.unrealized_conversion_cast %641 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %643 = llvm.mul %633, %537  : i64
    %644 = llvm.mul %623, %536  : i64
    %645 = llvm.add %643, %644  : i64
    %646 = llvm.mul %627, %22  : i64
    %647 = llvm.add %645, %646  : i64
    %648 = llvm.add %647, %633  : i64
    %649 = llvm.getelementptr %614[%648] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %650 = builtin.unrealized_conversion_cast %649 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %651 = llvm.extractvalue %642[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %652 = llvm.extractvalue %650[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.call @forward_kernel_7(%651, %652, %652) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> ()
    %653 = llvm.add %627, %20  : i64
    llvm.br ^bb71(%653 : i64)
  ^bb73:  // pred: ^bb71
    %654 = llvm.add %623, %5  : i64
    llvm.br ^bb69(%654 : i64)
  ^bb74:  // pred: ^bb69
    %655 = llvm.add %619, %5  : i64
    llvm.br ^bb67(%655 : i64)
  ^bb75:  // pred: ^bb67
    %656 = llvm.extractvalue %601[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.return %656 : !llvm.ptr
  }
  llvm.func @forward_kernel_0(!llvm.ptr) attributes {Kernel, forward_kernel_0}
  llvm.func @forward_kernel_1(!llvm.ptr) attributes {Kernel, forward_kernel_1}
  llvm.func @forward_kernel_2(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) attributes {Kernel, forward_kernel_2}
  llvm.func @forward_kernel_3(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) attributes {Kernel, forward_kernel_3}
  llvm.func @forward_kernel_4(!llvm.ptr, !llvm.ptr) attributes {Kernel, forward_kernel_4}
  llvm.func @forward_kernel_5(!llvm.ptr) attributes {Kernel, forward_kernel_5}
  llvm.func @forward_kernel_6(!llvm.ptr) attributes {Kernel, forward_kernel_6}
  llvm.func @forward_kernel_7(!llvm.ptr, !llvm.ptr, !llvm.ptr) attributes {Kernel, forward_kernel_7}
}


// -----// IR Dump After Canonicalizer (canonicalize) //----- //
module attributes {llvm.data_layout = "", torch.debug_module_name = "ResNet"} {
  llvm.func @memrefCopy(i64, !llvm.ptr, !llvm.ptr)
  llvm.func @malloc(i64) -> !llvm.ptr
  llvm.mlir.global private constant @__constant_64xf32_2(dense<[0.230717152, 0.253822476, -1.05429808E-6, -0.664388895, -1.65705547E-8, 0.161521927, 0.454503953, -4.301950e-07, 0.300513744, -8.005240e-06, 0.349418074, 0.311480612, -0.249529764, -3.474890e-05, 0.107726313, 0.218970656, 0.381412596, -0.529882133, -0.628644109, 0.571398079, 0.299846917, 0.584303737, 0.48202154, 0.328526348, 0.196717009, 0.194961801, 0.152145416, 0.085522361, 0.513142824, 0.0152367353, 0.166441768, 0.332394391, 0.249211237, 0.443366677, -0.280169278, -0.0203848016, -2.45068748E-7, 0.321340501, -4.9151744E-8, 0.237767309, 0.232907727, 0.315274626, 0.427762389, 0.293127537, 0.263794243, 0.675975859, 0.429100394, 0.345662743, -8.69090186E-8, 0.247294366, 0.303160846, 0.615772783, 0.39834857, 0.332067341, -0.412187815, 0.378069043, 0.178953409, 0.25747788, -0.449079722, 0.213058949, 0.569339037, 5.727430e-01, -0.402383476, 0.23406373]> : tensor<64xf32>) {addr_space = 0 : i32} : !llvm.array<64 x f32>
  llvm.mlir.global private constant @__constant_64xf32_1(dense<[0.234872743, 0.266257942, -5.10959595E-8, 0.518699706, 3.44040196E-9, 0.222385287, 0.422887057, 1.31532403E-7, 0.25093165, 1.5152026E-6, 0.316871643, 0.250491828, 0.378926098, 1.08618351E-5, 2.752640e-01, 0.236741036, 0.242021769, 0.395314813, 0.469346285, 0.2908957, 0.272684187, 0.27802828, 0.290692091, 0.206927493, 0.258990377, 0.278710574, 0.291149527, 0.316013753, 0.388891488, 0.304111898, 0.267757207, 0.210925162, 0.287084132, 0.332426429, 0.42672804, 0.373260558, 7.48037578E-8, 0.19067812, 1.47401256E-8, 0.223029822, 0.179079413, 0.248600766, 0.27399528, 0.259228647, 0.294202209, 0.299236417, 0.223688841, 0.262799472, 2.20011476E-8, 0.266098082, 0.220890298, 0.284285516, 0.330723315, 0.226809531, 0.365380913, 0.21229881, 0.239653021, 0.24949576, 0.525830686, 0.248247579, 0.295652747, 0.258776665, 0.4832564, 0.26670444]> : tensor<64xf32>) {addr_space = 0 : i32} : !llvm.array<64 x f32>
  llvm.mlir.global private constant @__constant_64xf32_0(dense<[1.01694489, 3.71674347, 5.81334356E-11, 3.28254271, 1.71074404E-13, 0.658226967, 4.37006235, 6.60045282E-12, 0.915522992, 1.93175254E-9, 4.12558556, 2.74399233, 2.8390913, 4.79658588E-8, 11.0722713, 0.500745952, 2.23128176, 4.82570696, 2.69861364, 9.36995506, 3.73391747, 5.48429585, 5.7126689, 0.445444882, 0.436275303, 7.15633583, 13.7179089, 5.25117493, 6.81737518, 1.67235756, 1.65343034, 1.23245978, 4.90762854, 3.07305121, 4.23838568, 4.99363518, 1.44646307E-12, 1.52116203, 1.03519833E-13, 0.351344079, 0.17024748, 1.42054474, 1.90848303, 2.15124035, 2.66084933, 4.84443378, 1.92971194, 1.49994361, 2.94806145E-13, 1.53064024, 0.365027189, 2.93755412, 5.46641159, 0.707924544, 3.33150721, 0.771802961, 2.40678358, 6.5213666, 4.12625027, 1.05063522, 2.95303202, 11.3656216, 4.76904678, 1.65587807]> : tensor<64xf32>) {addr_space = 0 : i32} : !llvm.array<64 x f32>
  llvm.mlir.global private constant @__constant_64xf32(dense<[0.00276811025, -0.0257689245, 2.12544663E-7, -0.0846051499, 2.11205915E-8, 4.96906461E-4, -0.0224083271, -1.15818956E-7, -4.823850e-03, 2.75073347E-7, 3.958230e-02, 0.0319936387, -0.0374896601, -1.37163477E-6, 0.00660019321, 4.378190e-03, 0.0647971481, 0.11175999, 0.0360015705, -0.0750752166, -0.03824009, 0.0843578502, -5.228700e-02, -0.0117988894, 0.00130188058, 0.0321722962, -0.0177843049, -0.0910085887, 0.113187239, -0.0416320041, 0.00873024761, 0.0296931695, -0.0705021694, -0.00348469778, 0.109771468, -0.00173411821, -5.94229412E-8, 0.0293303896, -7.85527287E-9, 0.00673204474, -0.00370999542, 0.0160279572, -0.0278826058, 0.0265925378, 0.0284745526, -0.12734659, 0.0446168408, 0.0263288375, 2.14538591E-8, -1.704500e-02, -0.00356168114, -0.0458412617, 0.0638761446, 0.0152198272, -0.0385114551, -0.0164278317, -0.016568929, 0.0560574941, -0.0803062319, -0.00266457512, -0.0417176671, 0.126112729, -0.0492369682, -0.0132609205]> : tensor<64xf32>) {addr_space = 0 : i32} : !llvm.array<64 x f32>
  llvm.mlir.global private constant @__constant_64x3x7x7xf32(dense<"tensor<64x3x7x7xf32>) {addr_space = 0 : i32} : !llvm.array<64 x array<3 x array<7 x array<7 x f32>>>>
  ml_program.global private mutable @global_seed(dense<0> : tensor<i64>) : tensor<i64>
  llvm.func @forward(%arg0: !llvm.ptr) -> !llvm.ptr {
    %0 = llvm.mlir.constant(200704 : index) : i64
    %1 = llvm.mlir.constant(3136 : index) : i64
    %2 = llvm.mlir.constant(115 : index) : i64
    %3 = llvm.mlir.constant(831744 : index) : i64
    %4 = llvm.mlir.constant(12996 : index) : i64
    %5 = llvm.mlir.constant(2 : index) : i64
    %6 = llvm.mlir.constant(802816 : index) : i64
    %7 = llvm.mlir.constant(12544 : index) : i64
    %8 = llvm.mlir.constant(4 : i64) : i64
    %9 = llvm.mlir.constant(693 : index) : i64
    %10 = llvm.mlir.constant(158700 : index) : i64
    %11 = llvm.mlir.constant(52900 : index) : i64
    %12 = llvm.mlir.constant(147 : index) : i64
    %13 = llvm.mlir.constant(49 : index) : i64
    %14 = llvm.mlir.constant(7 : index) : i64
    %15 = llvm.mlir.constant(230 : index) : i64
    %16 = llvm.mlir.constant(5 : index) : i64
    %17 = llvm.mlir.constant(64 : index) : i64
    %18 = llvm.mlir.constant(112 : index) : i64
    %19 = llvm.mlir.constant(16 : index) : i64
    %20 = llvm.mlir.constant(8 : index) : i64
    %21 = llvm.mlir.constant(114 : index) : i64
    %22 = llvm.mlir.constant(6 : index) : i64
    %23 = llvm.mlir.constant(56 : index) : i64
    %24 = llvm.mlir.constant(28 : index) : i64
    %25 = llvm.mlir.constant(4 : index) : i64
    %26 = llvm.mlir.constant(224 : index) : i64
    %27 = llvm.mlir.constant(50176 : index) : i64
    %28 = llvm.mlir.constant(3 : index) : i64
    %29 = llvm.mlir.constant(150528 : index) : i64
    %30 = llvm.mlir.constant(1 : index) : i64
    %31 = llvm.mlir.constant(0 : index) : i64
    %32 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %33 = llvm.insertvalue %arg0, %32[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %34 = llvm.insertvalue %arg0, %33[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %35 = llvm.insertvalue %31, %34[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %36 = llvm.insertvalue %30, %35[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %37 = llvm.insertvalue %29, %36[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %38 = llvm.insertvalue %28, %37[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %39 = llvm.insertvalue %27, %38[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %40 = llvm.insertvalue %26, %39[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %41 = llvm.insertvalue %26, %40[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %42 = llvm.insertvalue %26, %41[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %43 = llvm.insertvalue %30, %42[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %44 = llvm.mlir.null : !llvm.ptr
    %45 = llvm.mlir.addressof @__constant_64x3x7x7xf32 : !llvm.ptr
    %46 = llvm.getelementptr %45[0, 0, 0, 0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<64 x array<3 x array<7 x array<7 x f32>>>>
    %47 = llvm.mlir.addressof @__constant_64xf32 : !llvm.ptr
    %48 = llvm.getelementptr %47[0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<64 x f32>
    %49 = llvm.mlir.addressof @__constant_64xf32_0 : !llvm.ptr
    %50 = llvm.getelementptr %49[0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<64 x f32>
    %51 = llvm.mlir.addressof @__constant_64xf32_1 : !llvm.ptr
    %52 = llvm.getelementptr %51[0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<64 x f32>
    %53 = llvm.mlir.addressof @__constant_64xf32_2 : !llvm.ptr
    %54 = llvm.getelementptr %53[0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<64 x f32>
    %55 = llvm.getelementptr %44[158700] : (!llvm.ptr) -> !llvm.ptr, f32
    %56 = llvm.ptrtoint %55 : !llvm.ptr to i64
    %57 = llvm.add %56, %17  : i64
    %58 = llvm.call @malloc(%57) : (i64) -> !llvm.ptr
    %59 = llvm.ptrtoint %58 : !llvm.ptr to i64
    %60 = llvm.sub %17, %30  : i64
    %61 = llvm.add %59, %60  : i64
    %62 = llvm.urem %61, %17  : i64
    %63 = llvm.sub %61, %62  : i64
    %64 = llvm.inttoptr %63 : i64 to !llvm.ptr
    llvm.br ^bb1(%31 : i64)
  ^bb1(%65: i64):  // 2 preds: ^bb0, ^bb8
    %66 = llvm.icmp "slt" %65, %30 : i64
    llvm.cond_br %66, ^bb2, ^bb9
  ^bb2:  // pred: ^bb1
    llvm.br ^bb3(%31 : i64)
  ^bb3(%67: i64):  // 2 preds: ^bb2, ^bb7
    %68 = llvm.icmp "slt" %67, %28 : i64
    llvm.cond_br %68, ^bb4, ^bb8
  ^bb4:  // pred: ^bb3
    llvm.br ^bb5(%31 : i64)
  ^bb5(%69: i64):  // 2 preds: ^bb4, ^bb6
    %70 = llvm.icmp "slt" %69, %15 : i64
    llvm.cond_br %70, ^bb6, ^bb7
  ^bb6:  // pred: ^bb5
    %71 = llvm.mul %31, %10  : i64
    %72 = llvm.mul %67, %11  : i64
    %73 = llvm.add %71, %72  : i64
    %74 = llvm.mul %69, %15  : i64
    %75 = llvm.add %73, %74  : i64
    %76 = llvm.add %75, %31  : i64
    %77 = llvm.getelementptr %64[%76] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %78 = builtin.unrealized_conversion_cast %77 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %79 = llvm.extractvalue %78[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.call @forward_kernel_0(%79) : (!llvm.ptr) -> ()
    %80 = llvm.add %69, %16  : i64
    llvm.br ^bb5(%80 : i64)
  ^bb7:  // pred: ^bb5
    %81 = llvm.add %67, %30  : i64
    llvm.br ^bb3(%81 : i64)
  ^bb8:  // pred: ^bb3
    %82 = llvm.add %65, %30  : i64
    llvm.br ^bb1(%82 : i64)
  ^bb9:  // pred: ^bb1
    %83 = llvm.call @malloc(%57) : (i64) -> !llvm.ptr
    %84 = llvm.ptrtoint %83 : !llvm.ptr to i64
    %85 = llvm.add %84, %60  : i64
    %86 = llvm.urem %85, %17  : i64
    %87 = llvm.sub %85, %86  : i64
    %88 = llvm.inttoptr %87 : i64 to !llvm.ptr
    %89 = llvm.mul %30, %30  : i64
    %90 = llvm.mul %89, %28  : i64
    %91 = llvm.mul %90, %15  : i64
    %92 = llvm.mul %91, %15  : i64
    %93 = llvm.getelementptr %44[1] : (!llvm.ptr) -> !llvm.ptr, f32
    %94 = llvm.ptrtoint %93 : !llvm.ptr to i64
    %95 = llvm.mul %92, %94  : i64
    "llvm.intr.memcpy"(%88, %64, %95) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> ()
    %96 = llvm.insertvalue %83, %32[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %97 = llvm.insertvalue %88, %96[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %98 = llvm.insertvalue %9, %97[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %99 = llvm.insertvalue %30, %98[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %100 = llvm.insertvalue %10, %99[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %101 = llvm.insertvalue %28, %100[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %102 = llvm.insertvalue %11, %101[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %103 = llvm.insertvalue %26, %102[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %104 = llvm.insertvalue %15, %103[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %105 = llvm.insertvalue %26, %104[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %106 = llvm.insertvalue %30, %105[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %107 = llvm.intr.stacksave : !llvm.ptr
    %108 = llvm.alloca %30 x !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> : (i64) -> !llvm.ptr
    llvm.store %43, %108 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>, !llvm.ptr
    %109 = llvm.mlir.undef : !llvm.struct<(i64, ptr)>
    %110 = llvm.insertvalue %8, %109[0] : !llvm.struct<(i64, ptr)> 
    %111 = llvm.insertvalue %108, %110[1] : !llvm.struct<(i64, ptr)> 
    %112 = llvm.alloca %30 x !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> : (i64) -> !llvm.ptr
    llvm.store %106, %112 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>, !llvm.ptr
    %113 = llvm.insertvalue %112, %110[1] : !llvm.struct<(i64, ptr)> 
    %114 = llvm.alloca %30 x !llvm.struct<(i64, ptr)> : (i64) -> !llvm.ptr
    llvm.store %111, %114 : !llvm.struct<(i64, ptr)>, !llvm.ptr
    %115 = llvm.alloca %30 x !llvm.struct<(i64, ptr)> : (i64) -> !llvm.ptr
    llvm.store %113, %115 : !llvm.struct<(i64, ptr)>, !llvm.ptr
    llvm.call @memrefCopy(%25, %114, %115) : (i64, !llvm.ptr, !llvm.ptr) -> ()
    llvm.intr.stackrestore %107 : !llvm.ptr
    %116 = llvm.getelementptr %44[802816] : (!llvm.ptr) -> !llvm.ptr, f32
    %117 = llvm.ptrtoint %116 : !llvm.ptr to i64
    %118 = llvm.add %117, %17  : i64
    %119 = llvm.call @malloc(%118) : (i64) -> !llvm.ptr
    %120 = llvm.ptrtoint %119 : !llvm.ptr to i64
    %121 = llvm.add %120, %60  : i64
    %122 = llvm.urem %121, %17  : i64
    %123 = llvm.sub %121, %122  : i64
    %124 = llvm.inttoptr %123 : i64 to !llvm.ptr
    llvm.br ^bb10(%31 : i64)
  ^bb10(%125: i64):  // 2 preds: ^bb9, ^bb17
    %126 = llvm.icmp "slt" %125, %30 : i64
    llvm.cond_br %126, ^bb11, ^bb18
  ^bb11:  // pred: ^bb10
    llvm.br ^bb12(%31 : i64)
  ^bb12(%127: i64):  // 2 preds: ^bb11, ^bb16
    %128 = llvm.icmp "slt" %127, %17 : i64
    llvm.cond_br %128, ^bb13, ^bb17
  ^bb13:  // pred: ^bb12
    llvm.br ^bb14(%31 : i64)
  ^bb14(%129: i64):  // 2 preds: ^bb13, ^bb15
    %130 = llvm.icmp "slt" %129, %18 : i64
    llvm.cond_br %130, ^bb15, ^bb16
  ^bb15:  // pred: ^bb14
    %131 = llvm.mul %31, %6  : i64
    %132 = llvm.mul %127, %7  : i64
    %133 = llvm.add %131, %132  : i64
    %134 = llvm.mul %129, %18  : i64
    %135 = llvm.add %133, %134  : i64
    %136 = llvm.add %135, %31  : i64
    %137 = llvm.getelementptr %124[%136] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %138 = builtin.unrealized_conversion_cast %137 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %139 = llvm.extractvalue %138[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.call @forward_kernel_1(%139) : (!llvm.ptr) -> ()
    %140 = llvm.add %129, %19  : i64
    llvm.br ^bb14(%140 : i64)
  ^bb16:  // pred: ^bb14
    %141 = llvm.add %127, %30  : i64
    llvm.br ^bb12(%141 : i64)
  ^bb17:  // pred: ^bb12
    %142 = llvm.add %125, %30  : i64
    llvm.br ^bb10(%142 : i64)
  ^bb18:  // pred: ^bb10
    %143 = llvm.call @malloc(%118) : (i64) -> !llvm.ptr
    %144 = llvm.ptrtoint %143 : !llvm.ptr to i64
    %145 = llvm.add %144, %60  : i64
    %146 = llvm.urem %145, %17  : i64
    %147 = llvm.sub %145, %146  : i64
    %148 = llvm.inttoptr %147 : i64 to !llvm.ptr
    %149 = llvm.mul %30, %30  : i64
    %150 = llvm.mul %149, %17  : i64
    %151 = llvm.mul %150, %18  : i64
    %152 = llvm.mul %151, %18  : i64
    %153 = llvm.mul %152, %94  : i64
    "llvm.intr.memcpy"(%148, %124, %153) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> ()
    llvm.br ^bb19(%31 : i64)
  ^bb19(%154: i64):  // 2 preds: ^bb18, ^bb29
    %155 = llvm.icmp "slt" %154, %30 : i64
    llvm.cond_br %155, ^bb20, ^bb30
  ^bb20:  // pred: ^bb19
    llvm.br ^bb21(%31 : i64)
  ^bb21(%156: i64):  // 2 preds: ^bb20, ^bb28
    %157 = llvm.icmp "slt" %156, %17 : i64
    llvm.cond_br %157, ^bb22, ^bb29
  ^bb22:  // pred: ^bb21
    llvm.br ^bb23(%31 : i64)
  ^bb23(%158: i64):  // 2 preds: ^bb22, ^bb27
    %159 = llvm.icmp "slt" %158, %18 : i64
    llvm.cond_br %159, ^bb24, ^bb28
  ^bb24:  // pred: ^bb23
    llvm.br ^bb25(%31 : i64)
  ^bb25(%160: i64):  // 2 preds: ^bb24, ^bb26
    %161 = llvm.icmp "slt" %160, %18 : i64
    llvm.cond_br %161, ^bb26, ^bb27
  ^bb26:  // pred: ^bb25
    %162 = llvm.mul %158, %5  : i64
    %163 = llvm.mul %160, %5  : i64
    %164 = llvm.mul %31, %10  : i64
    %165 = llvm.mul %31, %11  : i64
    %166 = llvm.add %164, %165  : i64
    %167 = llvm.mul %162, %15  : i64
    %168 = llvm.add %166, %167  : i64
    %169 = llvm.add %168, %163  : i64
    %170 = llvm.getelementptr %88[%169] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %171 = builtin.unrealized_conversion_cast %170 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %172 = llvm.mul %156, %12  : i64
    %173 = llvm.mul %31, %13  : i64
    %174 = llvm.add %172, %173  : i64
    %175 = llvm.mul %31, %14  : i64
    %176 = llvm.add %174, %175  : i64
    %177 = llvm.add %176, %31  : i64
    %178 = llvm.getelementptr %46[%177] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %179 = builtin.unrealized_conversion_cast %178 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %180 = llvm.mul %31, %6  : i64
    %181 = llvm.mul %156, %7  : i64
    %182 = llvm.add %180, %181  : i64
    %183 = llvm.mul %158, %18  : i64
    %184 = llvm.add %182, %183  : i64
    %185 = llvm.add %184, %160  : i64
    %186 = llvm.getelementptr %148[%185] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %187 = builtin.unrealized_conversion_cast %186 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %188 = llvm.extractvalue %171[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %189 = llvm.extractvalue %179[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %190 = llvm.extractvalue %187[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.call @forward_kernel_2(%188, %189, %190, %190) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> ()
    %191 = llvm.add %160, %20  : i64
    llvm.br ^bb25(%191 : i64)
  ^bb27:  // pred: ^bb25
    %192 = llvm.add %158, %30  : i64
    llvm.br ^bb23(%192 : i64)
  ^bb28:  // pred: ^bb23
    %193 = llvm.add %156, %30  : i64
    llvm.br ^bb21(%193 : i64)
  ^bb29:  // pred: ^bb21
    %194 = llvm.add %154, %30  : i64
    llvm.br ^bb19(%194 : i64)
  ^bb30:  // pred: ^bb19
    %195 = llvm.call @malloc(%118) : (i64) -> !llvm.ptr
    %196 = llvm.ptrtoint %195 : !llvm.ptr to i64
    %197 = llvm.add %196, %60  : i64
    %198 = llvm.urem %197, %17  : i64
    %199 = llvm.sub %197, %198  : i64
    %200 = llvm.inttoptr %199 : i64 to !llvm.ptr
    llvm.br ^bb31(%31 : i64)
  ^bb31(%201: i64):  // 2 preds: ^bb30, ^bb38
    %202 = llvm.icmp "slt" %201, %30 : i64
    llvm.cond_br %202, ^bb32, ^bb39
  ^bb32:  // pred: ^bb31
    llvm.br ^bb33(%31 : i64)
  ^bb33(%203: i64):  // 2 preds: ^bb32, ^bb37
    %204 = llvm.icmp "slt" %203, %17 : i64
    llvm.cond_br %204, ^bb34, ^bb38
  ^bb34:  // pred: ^bb33
    llvm.br ^bb35(%31 : i64)
  ^bb35(%205: i64):  // 2 preds: ^bb34, ^bb36
    %206 = llvm.icmp "slt" %205, %18 : i64
    llvm.cond_br %206, ^bb36, ^bb37
  ^bb36:  // pred: ^bb35
    %207 = llvm.mul %31, %6  : i64
    %208 = llvm.mul %203, %7  : i64
    %209 = llvm.add %207, %208  : i64
    %210 = llvm.mul %205, %18  : i64
    %211 = llvm.add %209, %210  : i64
    %212 = llvm.add %211, %31  : i64
    %213 = llvm.getelementptr %148[%212] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %214 = builtin.unrealized_conversion_cast %213 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %215 = llvm.getelementptr %52[%203] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %216 = builtin.unrealized_conversion_cast %215 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %217 = llvm.getelementptr %54[%203] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %218 = builtin.unrealized_conversion_cast %217 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %219 = llvm.getelementptr %48[%203] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %220 = builtin.unrealized_conversion_cast %219 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %221 = llvm.getelementptr %50[%203] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %222 = builtin.unrealized_conversion_cast %221 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %223 = llvm.getelementptr %200[%212] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %224 = builtin.unrealized_conversion_cast %223 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %225 = llvm.extractvalue %214[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %226 = llvm.extractvalue %216[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %227 = llvm.extractvalue %218[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %228 = llvm.extractvalue %220[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %229 = llvm.extractvalue %222[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %230 = llvm.extractvalue %224[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.call @forward_kernel_3(%225, %226, %227, %228, %229, %230) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> ()
    %231 = llvm.add %205, %19  : i64
    llvm.br ^bb35(%231 : i64)
  ^bb37:  // pred: ^bb35
    %232 = llvm.add %203, %30  : i64
    llvm.br ^bb33(%232 : i64)
  ^bb38:  // pred: ^bb33
    %233 = llvm.add %201, %30  : i64
    llvm.br ^bb31(%233 : i64)
  ^bb39:  // pred: ^bb31
    %234 = llvm.call @malloc(%118) : (i64) -> !llvm.ptr
    %235 = llvm.ptrtoint %234 : !llvm.ptr to i64
    %236 = llvm.add %235, %60  : i64
    %237 = llvm.urem %236, %17  : i64
    %238 = llvm.sub %236, %237  : i64
    %239 = llvm.inttoptr %238 : i64 to !llvm.ptr
    %240 = llvm.insertvalue %234, %32[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %241 = llvm.insertvalue %239, %240[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %242 = llvm.insertvalue %31, %241[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %243 = llvm.insertvalue %30, %242[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %244 = llvm.insertvalue %17, %243[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %245 = llvm.insertvalue %18, %244[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %246 = llvm.insertvalue %18, %245[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %247 = llvm.insertvalue %6, %246[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %248 = llvm.insertvalue %7, %247[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %249 = llvm.insertvalue %18, %248[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %250 = llvm.insertvalue %30, %249[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.br ^bb40(%31 : i64)
  ^bb40(%251: i64):  // 2 preds: ^bb39, ^bb47
    %252 = llvm.icmp "slt" %251, %30 : i64
    llvm.cond_br %252, ^bb41, ^bb48
  ^bb41:  // pred: ^bb40
    llvm.br ^bb42(%31 : i64)
  ^bb42(%253: i64):  // 2 preds: ^bb41, ^bb46
    %254 = llvm.icmp "slt" %253, %17 : i64
    llvm.cond_br %254, ^bb43, ^bb47
  ^bb43:  // pred: ^bb42
    llvm.br ^bb44(%31 : i64)
  ^bb44(%255: i64):  // 2 preds: ^bb43, ^bb45
    %256 = llvm.icmp "slt" %255, %18 : i64
    llvm.cond_br %256, ^bb45, ^bb46
  ^bb45:  // pred: ^bb44
    %257 = llvm.mul %31, %6  : i64
    %258 = llvm.mul %253, %7  : i64
    %259 = llvm.add %257, %258  : i64
    %260 = llvm.mul %255, %18  : i64
    %261 = llvm.add %259, %260  : i64
    %262 = llvm.add %261, %31  : i64
    %263 = llvm.getelementptr %200[%262] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %264 = builtin.unrealized_conversion_cast %263 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %265 = llvm.getelementptr %239[%262] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %266 = builtin.unrealized_conversion_cast %265 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %267 = llvm.extractvalue %264[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %268 = llvm.extractvalue %266[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.call @forward_kernel_4(%267, %268) : (!llvm.ptr, !llvm.ptr) -> ()
    %269 = llvm.add %255, %19  : i64
    llvm.br ^bb44(%269 : i64)
  ^bb46:  // pred: ^bb44
    %270 = llvm.add %253, %30  : i64
    llvm.br ^bb42(%270 : i64)
  ^bb47:  // pred: ^bb42
    %271 = llvm.add %251, %30  : i64
    llvm.br ^bb40(%271 : i64)
  ^bb48:  // pred: ^bb40
    %272 = llvm.getelementptr %44[831744] : (!llvm.ptr) -> !llvm.ptr, f32
    %273 = llvm.ptrtoint %272 : !llvm.ptr to i64
    %274 = llvm.add %273, %17  : i64
    %275 = llvm.call @malloc(%274) : (i64) -> !llvm.ptr
    %276 = llvm.ptrtoint %275 : !llvm.ptr to i64
    %277 = llvm.add %276, %60  : i64
    %278 = llvm.urem %277, %17  : i64
    %279 = llvm.sub %277, %278  : i64
    %280 = llvm.inttoptr %279 : i64 to !llvm.ptr
    llvm.br ^bb49(%31 : i64)
  ^bb49(%281: i64):  // 2 preds: ^bb48, ^bb56
    %282 = llvm.icmp "slt" %281, %30 : i64
    llvm.cond_br %282, ^bb50, ^bb57
  ^bb50:  // pred: ^bb49
    llvm.br ^bb51(%31 : i64)
  ^bb51(%283: i64):  // 2 preds: ^bb50, ^bb55
    %284 = llvm.icmp "slt" %283, %17 : i64
    llvm.cond_br %284, ^bb52, ^bb56
  ^bb52:  // pred: ^bb51
    llvm.br ^bb53(%31 : i64)
  ^bb53(%285: i64):  // 2 preds: ^bb52, ^bb54
    %286 = llvm.icmp "slt" %285, %21 : i64
    llvm.cond_br %286, ^bb54, ^bb55
  ^bb54:  // pred: ^bb53
    %287 = llvm.mul %31, %3  : i64
    %288 = llvm.mul %283, %4  : i64
    %289 = llvm.add %287, %288  : i64
    %290 = llvm.mul %285, %21  : i64
    %291 = llvm.add %289, %290  : i64
    %292 = llvm.add %291, %31  : i64
    %293 = llvm.getelementptr %280[%292] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %294 = builtin.unrealized_conversion_cast %293 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %295 = llvm.extractvalue %294[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.call @forward_kernel_5(%295) : (!llvm.ptr) -> ()
    %296 = llvm.add %285, %22  : i64
    llvm.br ^bb53(%296 : i64)
  ^bb55:  // pred: ^bb53
    %297 = llvm.add %283, %30  : i64
    llvm.br ^bb51(%297 : i64)
  ^bb56:  // pred: ^bb51
    %298 = llvm.add %281, %30  : i64
    llvm.br ^bb49(%298 : i64)
  ^bb57:  // pred: ^bb49
    %299 = llvm.call @malloc(%274) : (i64) -> !llvm.ptr
    %300 = llvm.ptrtoint %299 : !llvm.ptr to i64
    %301 = llvm.add %300, %60  : i64
    %302 = llvm.urem %301, %17  : i64
    %303 = llvm.sub %301, %302  : i64
    %304 = llvm.inttoptr %303 : i64 to !llvm.ptr
    %305 = llvm.mul %30, %30  : i64
    %306 = llvm.mul %305, %17  : i64
    %307 = llvm.mul %306, %21  : i64
    %308 = llvm.mul %307, %21  : i64
    %309 = llvm.mul %308, %94  : i64
    "llvm.intr.memcpy"(%304, %280, %309) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> ()
    %310 = llvm.insertvalue %299, %32[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %311 = llvm.insertvalue %304, %310[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %312 = llvm.insertvalue %2, %311[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %313 = llvm.insertvalue %30, %312[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %314 = llvm.insertvalue %3, %313[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %315 = llvm.insertvalue %17, %314[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %316 = llvm.insertvalue %4, %315[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %317 = llvm.insertvalue %18, %316[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %318 = llvm.insertvalue %21, %317[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %319 = llvm.insertvalue %18, %318[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %320 = llvm.insertvalue %30, %319[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %321 = llvm.intr.stacksave : !llvm.ptr
    %322 = llvm.alloca %30 x !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> : (i64) -> !llvm.ptr
    llvm.store %250, %322 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>, !llvm.ptr
    %323 = llvm.insertvalue %322, %110[1] : !llvm.struct<(i64, ptr)> 
    %324 = llvm.alloca %30 x !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> : (i64) -> !llvm.ptr
    llvm.store %320, %324 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>, !llvm.ptr
    %325 = llvm.insertvalue %324, %110[1] : !llvm.struct<(i64, ptr)> 
    %326 = llvm.alloca %30 x !llvm.struct<(i64, ptr)> : (i64) -> !llvm.ptr
    llvm.store %323, %326 : !llvm.struct<(i64, ptr)>, !llvm.ptr
    %327 = llvm.alloca %30 x !llvm.struct<(i64, ptr)> : (i64) -> !llvm.ptr
    llvm.store %325, %327 : !llvm.struct<(i64, ptr)>, !llvm.ptr
    llvm.call @memrefCopy(%25, %326, %327) : (i64, !llvm.ptr, !llvm.ptr) -> ()
    llvm.intr.stackrestore %321 : !llvm.ptr
    %328 = llvm.getelementptr %44[200704] : (!llvm.ptr) -> !llvm.ptr, f32
    %329 = llvm.ptrtoint %328 : !llvm.ptr to i64
    %330 = llvm.add %329, %17  : i64
    %331 = llvm.call @malloc(%330) : (i64) -> !llvm.ptr
    %332 = llvm.ptrtoint %331 : !llvm.ptr to i64
    %333 = llvm.add %332, %60  : i64
    %334 = llvm.urem %333, %17  : i64
    %335 = llvm.sub %333, %334  : i64
    %336 = llvm.inttoptr %335 : i64 to !llvm.ptr
    llvm.br ^bb58(%31 : i64)
  ^bb58(%337: i64):  // 2 preds: ^bb57, ^bb65
    %338 = llvm.icmp "slt" %337, %30 : i64
    llvm.cond_br %338, ^bb59, ^bb66
  ^bb59:  // pred: ^bb58
    llvm.br ^bb60(%31 : i64)
  ^bb60(%339: i64):  // 2 preds: ^bb59, ^bb64
    %340 = llvm.icmp "slt" %339, %17 : i64
    llvm.cond_br %340, ^bb61, ^bb65
  ^bb61:  // pred: ^bb60
    llvm.br ^bb62(%31 : i64)
  ^bb62(%341: i64):  // 2 preds: ^bb61, ^bb63
    %342 = llvm.icmp "slt" %341, %23 : i64
    llvm.cond_br %342, ^bb63, ^bb64
  ^bb63:  // pred: ^bb62
    %343 = llvm.mul %31, %0  : i64
    %344 = llvm.mul %339, %1  : i64
    %345 = llvm.add %343, %344  : i64
    %346 = llvm.mul %341, %23  : i64
    %347 = llvm.add %345, %346  : i64
    %348 = llvm.add %347, %31  : i64
    %349 = llvm.getelementptr %336[%348] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %350 = builtin.unrealized_conversion_cast %349 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %351 = llvm.extractvalue %350[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.call @forward_kernel_6(%351) : (!llvm.ptr) -> ()
    %352 = llvm.add %341, %24  : i64
    llvm.br ^bb62(%352 : i64)
  ^bb64:  // pred: ^bb62
    %353 = llvm.add %339, %30  : i64
    llvm.br ^bb60(%353 : i64)
  ^bb65:  // pred: ^bb60
    %354 = llvm.add %337, %30  : i64
    llvm.br ^bb58(%354 : i64)
  ^bb66:  // pred: ^bb58
    %355 = llvm.call @malloc(%330) : (i64) -> !llvm.ptr
    %356 = llvm.ptrtoint %355 : !llvm.ptr to i64
    %357 = llvm.add %356, %60  : i64
    %358 = llvm.urem %357, %17  : i64
    %359 = llvm.sub %357, %358  : i64
    %360 = llvm.inttoptr %359 : i64 to !llvm.ptr
    %361 = llvm.mul %30, %30  : i64
    %362 = llvm.mul %361, %17  : i64
    %363 = llvm.mul %362, %23  : i64
    %364 = llvm.mul %363, %23  : i64
    %365 = llvm.mul %364, %94  : i64
    "llvm.intr.memcpy"(%360, %336, %365) <{isVolatile = false}> : (!llvm.ptr, !llvm.ptr, i64) -> ()
    llvm.br ^bb67(%31 : i64)
  ^bb67(%366: i64):  // 2 preds: ^bb66, ^bb74
    %367 = llvm.icmp "slt" %366, %30 : i64
    llvm.cond_br %367, ^bb68, ^bb75
  ^bb68:  // pred: ^bb67
    llvm.br ^bb69(%31 : i64)
  ^bb69(%368: i64):  // 2 preds: ^bb68, ^bb73
    %369 = llvm.icmp "slt" %368, %17 : i64
    llvm.cond_br %369, ^bb70, ^bb74
  ^bb70:  // pred: ^bb69
    llvm.br ^bb71(%31 : i64)
  ^bb71(%370: i64):  // 2 preds: ^bb70, ^bb72
    %371 = llvm.icmp "slt" %370, %23 : i64
    llvm.cond_br %371, ^bb72, ^bb73
  ^bb72:  // pred: ^bb71
    %372 = llvm.mul %370, %5  : i64
    %373 = llvm.mul %31, %3  : i64
    %374 = llvm.mul %368, %4  : i64
    %375 = llvm.add %373, %374  : i64
    %376 = llvm.mul %372, %21  : i64
    %377 = llvm.add %375, %376  : i64
    %378 = llvm.add %377, %31  : i64
    %379 = llvm.getelementptr %304[%378] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %380 = builtin.unrealized_conversion_cast %379 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %381 = llvm.mul %31, %0  : i64
    %382 = llvm.mul %368, %1  : i64
    %383 = llvm.add %381, %382  : i64
    %384 = llvm.mul %370, %23  : i64
    %385 = llvm.add %383, %384  : i64
    %386 = llvm.add %385, %31  : i64
    %387 = llvm.getelementptr %360[%386] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %388 = builtin.unrealized_conversion_cast %387 : !llvm.ptr to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %389 = llvm.extractvalue %380[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %390 = llvm.extractvalue %388[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.call @forward_kernel_7(%389, %390, %390) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> ()
    %391 = llvm.add %370, %25  : i64
    llvm.br ^bb71(%391 : i64)
  ^bb73:  // pred: ^bb71
    %392 = llvm.add %368, %30  : i64
    llvm.br ^bb69(%392 : i64)
  ^bb74:  // pred: ^bb69
    %393 = llvm.add %366, %30  : i64
    llvm.br ^bb67(%393 : i64)
  ^bb75:  // pred: ^bb67
    llvm.return %355 : !llvm.ptr
  }
  llvm.func @forward_kernel_0(!llvm.ptr) attributes {Kernel, forward_kernel_0}
  llvm.func @forward_kernel_1(!llvm.ptr) attributes {Kernel, forward_kernel_1}
  llvm.func @forward_kernel_2(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) attributes {Kernel, forward_kernel_2}
  llvm.func @forward_kernel_3(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) attributes {Kernel, forward_kernel_3}
  llvm.func @forward_kernel_4(!llvm.ptr, !llvm.ptr) attributes {Kernel, forward_kernel_4}
  llvm.func @forward_kernel_5(!llvm.ptr) attributes {Kernel, forward_kernel_5}
  llvm.func @forward_kernel_6(!llvm.ptr) attributes {Kernel, forward_kernel_6}
  llvm.func @forward_kernel_7(!llvm.ptr, !llvm.ptr, !llvm.ptr) attributes {Kernel, forward_kernel_7}
}


