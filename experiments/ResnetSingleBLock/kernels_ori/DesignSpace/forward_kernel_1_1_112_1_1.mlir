#map = affine_map<(d0) -> (d0 + 1)>
#map1 = affine_map<(d0) -> (d0 + 2)>
#map2 = affine_map<(d0) -> (d0 + 3)>
#map3 = affine_map<(d0) -> (d0 + 4)>
#map4 = affine_map<(d0) -> (d0 + 5)>
#map5 = affine_map<(d0) -> (d0 + 6)>
#map6 = affine_map<(d0) -> (d0 + 7)>
#map7 = affine_map<(d0) -> (d0 + 8)>
#map8 = affine_map<(d0) -> (d0 + 9)>
#map9 = affine_map<(d0) -> (d0 + 10)>
#map10 = affine_map<(d0) -> (d0 + 11)>
#map11 = affine_map<(d0) -> (d0 + 12)>
#map12 = affine_map<(d0) -> (d0 + 13)>
#map13 = affine_map<(d0) -> (d0 + 14)>
#map14 = affine_map<(d0) -> (d0 + 15)>
#map15 = affine_map<(d0) -> (d0 + 16)>
#map16 = affine_map<(d0) -> (d0 + 17)>
#map17 = affine_map<(d0) -> (d0 + 18)>
#map18 = affine_map<(d0) -> (d0 + 19)>
#map19 = affine_map<(d0) -> (d0 + 20)>
#map20 = affine_map<(d0) -> (d0 + 21)>
#map21 = affine_map<(d0) -> (d0 + 22)>
#map22 = affine_map<(d0) -> (d0 + 23)>
#map23 = affine_map<(d0) -> (d0 + 24)>
#map24 = affine_map<(d0) -> (d0 + 25)>
#map25 = affine_map<(d0) -> (d0 + 26)>
#map26 = affine_map<(d0) -> (d0 + 27)>
#map27 = affine_map<(d0) -> (d0 + 28)>
#map28 = affine_map<(d0) -> (d0 + 29)>
#map29 = affine_map<(d0) -> (d0 + 30)>
#map30 = affine_map<(d0) -> (d0 + 31)>
#map31 = affine_map<(d0) -> (d0 + 32)>
#map32 = affine_map<(d0) -> (d0 + 33)>
#map33 = affine_map<(d0) -> (d0 + 34)>
#map34 = affine_map<(d0) -> (d0 + 35)>
#map35 = affine_map<(d0) -> (d0 + 36)>
#map36 = affine_map<(d0) -> (d0 + 37)>
#map37 = affine_map<(d0) -> (d0 + 38)>
#map38 = affine_map<(d0) -> (d0 + 39)>
#map39 = affine_map<(d0) -> (d0 + 40)>
#map40 = affine_map<(d0) -> (d0 + 41)>
#map41 = affine_map<(d0) -> (d0 + 42)>
#map42 = affine_map<(d0) -> (d0 + 43)>
#map43 = affine_map<(d0) -> (d0 + 44)>
#map44 = affine_map<(d0) -> (d0 + 45)>
#map45 = affine_map<(d0) -> (d0 + 46)>
#map46 = affine_map<(d0) -> (d0 + 47)>
#map47 = affine_map<(d0) -> (d0 + 48)>
#map48 = affine_map<(d0) -> (d0 + 49)>
#map49 = affine_map<(d0) -> (d0 + 50)>
#map50 = affine_map<(d0) -> (d0 + 51)>
#map51 = affine_map<(d0) -> (d0 + 52)>
#map52 = affine_map<(d0) -> (d0 + 53)>
#map53 = affine_map<(d0) -> (d0 + 54)>
#map54 = affine_map<(d0) -> (d0 + 55)>
#map55 = affine_map<(d0) -> (d0 + 56)>
#map56 = affine_map<(d0) -> (d0 + 57)>
#map57 = affine_map<(d0) -> (d0 + 58)>
#map58 = affine_map<(d0) -> (d0 + 59)>
#map59 = affine_map<(d0) -> (d0 + 60)>
#map60 = affine_map<(d0) -> (d0 + 61)>
#map61 = affine_map<(d0) -> (d0 + 62)>
#map62 = affine_map<(d0) -> (d0 + 63)>
#map63 = affine_map<(d0) -> (d0 + 64)>
#map64 = affine_map<(d0) -> (d0 + 65)>
#map65 = affine_map<(d0) -> (d0 + 66)>
#map66 = affine_map<(d0) -> (d0 + 67)>
#map67 = affine_map<(d0) -> (d0 + 68)>
#map68 = affine_map<(d0) -> (d0 + 69)>
#map69 = affine_map<(d0) -> (d0 + 70)>
#map70 = affine_map<(d0) -> (d0 + 71)>
#map71 = affine_map<(d0) -> (d0 + 72)>
#map72 = affine_map<(d0) -> (d0 + 73)>
#map73 = affine_map<(d0) -> (d0 + 74)>
#map74 = affine_map<(d0) -> (d0 + 75)>
#map75 = affine_map<(d0) -> (d0 + 76)>
#map76 = affine_map<(d0) -> (d0 + 77)>
#map77 = affine_map<(d0) -> (d0 + 78)>
#map78 = affine_map<(d0) -> (d0 + 79)>
#map79 = affine_map<(d0) -> (d0 + 80)>
#map80 = affine_map<(d0) -> (d0 + 81)>
#map81 = affine_map<(d0) -> (d0 + 82)>
#map82 = affine_map<(d0) -> (d0 + 83)>
#map83 = affine_map<(d0) -> (d0 + 84)>
#map84 = affine_map<(d0) -> (d0 + 85)>
#map85 = affine_map<(d0) -> (d0 + 86)>
#map86 = affine_map<(d0) -> (d0 + 87)>
#map87 = affine_map<(d0) -> (d0 + 88)>
#map88 = affine_map<(d0) -> (d0 + 89)>
#map89 = affine_map<(d0) -> (d0 + 90)>
#map90 = affine_map<(d0) -> (d0 + 91)>
#map91 = affine_map<(d0) -> (d0 + 92)>
#map92 = affine_map<(d0) -> (d0 + 93)>
#map93 = affine_map<(d0) -> (d0 + 94)>
#map94 = affine_map<(d0) -> (d0 + 95)>
#map95 = affine_map<(d0) -> (d0 + 96)>
#map96 = affine_map<(d0) -> (d0 + 97)>
#map97 = affine_map<(d0) -> (d0 + 98)>
#map98 = affine_map<(d0) -> (d0 + 99)>
#map99 = affine_map<(d0) -> (d0 + 100)>
#map100 = affine_map<(d0) -> (d0 + 101)>
#map101 = affine_map<(d0) -> (d0 + 102)>
#map102 = affine_map<(d0) -> (d0 + 103)>
#map103 = affine_map<(d0) -> (d0 + 104)>
#map104 = affine_map<(d0) -> (d0 + 105)>
#map105 = affine_map<(d0) -> (d0 + 106)>
#map106 = affine_map<(d0) -> (d0 + 107)>
#map107 = affine_map<(d0) -> (d0 + 108)>
#map108 = affine_map<(d0) -> (d0 + 109)>
#map109 = affine_map<(d0) -> (d0 + 110)>
#map110 = affine_map<(d0) -> (d0 + 111)>
module {
  func.func @forward_kernel_1(%arg0: memref<64xf32>, %arg1: memref<64xf32>, %arg2: memref<64xf32>, %arg3: memref<64xf32>, %arg4: memref<1x64x112x112xf32>, %arg5: memref<1x64x112x112xf32>) attributes {Kernel, forward_kernel_1} {
    %c0 = arith.constant 0 : index
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 1.000000e-05 : f64
    affine.for %arg6 = 0 to 16 {
      %0 = affine.load %arg0[0] : memref<64xf32>
      %1 = affine.load %arg1[0] : memref<64xf32>
      %2 = affine.load %arg2[0] : memref<64xf32>
      %3 = affine.load %arg3[0] : memref<64xf32>
      %4 = affine.load %arg4[0, 0, %arg6, %c0] : memref<1x64x112x112xf32>
      %5 = arith.truncf %cst : f64 to f32
      %6 = arith.addf %3, %5 : f32
      %cst_0 = arith.constant 5.000000e-01 : f32
      %7 = arith.mulf %6, %cst_0 : f32
      %8 = arith.bitcast %6 : f32 to i32
      %c1_i32 = arith.constant 1 : i32
      %9 = arith.shrui %8, %c1_i32 : i32
      %c1597463007_i32 = arith.constant 1597463007 : i32
      %10 = arith.subi %c1597463007_i32, %9 : i32
      %11 = arith.bitcast %10 : i32 to f32
      %cst_1 = arith.constant 1.500000e+00 : f32
      %12 = arith.mulf %11, %11 : f32
      %13 = arith.mulf %12, %7 : f32
      %14 = arith.subf %cst_1, %13 : f32
      %15 = arith.mulf %14, %12 : f32
      %16 = arith.subf %4, %2 : f32
      %17 = arith.mulf %16, %15 : f32
      %18 = arith.mulf %17, %0 : f32
      %19 = arith.addf %18, %1 : f32
      affine.store %19, %arg5[0, 0, %arg6, %c0] : memref<1x64x112x112xf32>
      %20 = affine.apply #map(%c0)
      %21 = affine.load %arg4[0, 0, %arg6, %20] : memref<1x64x112x112xf32>
      %22 = arith.truncf %cst : f64 to f32
      %23 = arith.addf %3, %22 : f32
      %cst_2 = arith.constant 5.000000e-01 : f32
      %24 = arith.mulf %23, %cst_2 : f32
      %25 = arith.bitcast %23 : f32 to i32
      %c1_i32_3 = arith.constant 1 : i32
      %26 = arith.shrui %25, %c1_i32_3 : i32
      %c1597463007_i32_4 = arith.constant 1597463007 : i32
      %27 = arith.subi %c1597463007_i32_4, %26 : i32
      %28 = arith.bitcast %27 : i32 to f32
      %cst_5 = arith.constant 1.500000e+00 : f32
      %29 = arith.mulf %28, %28 : f32
      %30 = arith.mulf %29, %24 : f32
      %31 = arith.subf %cst_5, %30 : f32
      %32 = arith.mulf %31, %29 : f32
      %33 = arith.subf %21, %2 : f32
      %34 = arith.mulf %33, %32 : f32
      %35 = arith.mulf %34, %0 : f32
      %36 = arith.addf %35, %1 : f32
      affine.store %36, %arg5[0, 0, %arg6, %20] : memref<1x64x112x112xf32>
      %37 = affine.apply #map1(%c0)
      %38 = affine.load %arg4[0, 0, %arg6, %37] : memref<1x64x112x112xf32>
      %39 = arith.truncf %cst : f64 to f32
      %40 = arith.addf %3, %39 : f32
      %cst_6 = arith.constant 5.000000e-01 : f32
      %41 = arith.mulf %40, %cst_6 : f32
      %42 = arith.bitcast %40 : f32 to i32
      %c1_i32_7 = arith.constant 1 : i32
      %43 = arith.shrui %42, %c1_i32_7 : i32
      %c1597463007_i32_8 = arith.constant 1597463007 : i32
      %44 = arith.subi %c1597463007_i32_8, %43 : i32
      %45 = arith.bitcast %44 : i32 to f32
      %cst_9 = arith.constant 1.500000e+00 : f32
      %46 = arith.mulf %45, %45 : f32
      %47 = arith.mulf %46, %41 : f32
      %48 = arith.subf %cst_9, %47 : f32
      %49 = arith.mulf %48, %46 : f32
      %50 = arith.subf %38, %2 : f32
      %51 = arith.mulf %50, %49 : f32
      %52 = arith.mulf %51, %0 : f32
      %53 = arith.addf %52, %1 : f32
      affine.store %53, %arg5[0, 0, %arg6, %37] : memref<1x64x112x112xf32>
      %54 = affine.apply #map2(%c0)
      %55 = affine.load %arg4[0, 0, %arg6, %54] : memref<1x64x112x112xf32>
      %56 = arith.truncf %cst : f64 to f32
      %57 = arith.addf %3, %56 : f32
      %cst_10 = arith.constant 5.000000e-01 : f32
      %58 = arith.mulf %57, %cst_10 : f32
      %59 = arith.bitcast %57 : f32 to i32
      %c1_i32_11 = arith.constant 1 : i32
      %60 = arith.shrui %59, %c1_i32_11 : i32
      %c1597463007_i32_12 = arith.constant 1597463007 : i32
      %61 = arith.subi %c1597463007_i32_12, %60 : i32
      %62 = arith.bitcast %61 : i32 to f32
      %cst_13 = arith.constant 1.500000e+00 : f32
      %63 = arith.mulf %62, %62 : f32
      %64 = arith.mulf %63, %58 : f32
      %65 = arith.subf %cst_13, %64 : f32
      %66 = arith.mulf %65, %63 : f32
      %67 = arith.subf %55, %2 : f32
      %68 = arith.mulf %67, %66 : f32
      %69 = arith.mulf %68, %0 : f32
      %70 = arith.addf %69, %1 : f32
      affine.store %70, %arg5[0, 0, %arg6, %54] : memref<1x64x112x112xf32>
      %71 = affine.apply #map3(%c0)
      %72 = affine.load %arg4[0, 0, %arg6, %71] : memref<1x64x112x112xf32>
      %73 = arith.truncf %cst : f64 to f32
      %74 = arith.addf %3, %73 : f32
      %cst_14 = arith.constant 5.000000e-01 : f32
      %75 = arith.mulf %74, %cst_14 : f32
      %76 = arith.bitcast %74 : f32 to i32
      %c1_i32_15 = arith.constant 1 : i32
      %77 = arith.shrui %76, %c1_i32_15 : i32
      %c1597463007_i32_16 = arith.constant 1597463007 : i32
      %78 = arith.subi %c1597463007_i32_16, %77 : i32
      %79 = arith.bitcast %78 : i32 to f32
      %cst_17 = arith.constant 1.500000e+00 : f32
      %80 = arith.mulf %79, %79 : f32
      %81 = arith.mulf %80, %75 : f32
      %82 = arith.subf %cst_17, %81 : f32
      %83 = arith.mulf %82, %80 : f32
      %84 = arith.subf %72, %2 : f32
      %85 = arith.mulf %84, %83 : f32
      %86 = arith.mulf %85, %0 : f32
      %87 = arith.addf %86, %1 : f32
      affine.store %87, %arg5[0, 0, %arg6, %71] : memref<1x64x112x112xf32>
      %88 = affine.apply #map4(%c0)
      %89 = affine.load %arg4[0, 0, %arg6, %88] : memref<1x64x112x112xf32>
      %90 = arith.truncf %cst : f64 to f32
      %91 = arith.addf %3, %90 : f32
      %cst_18 = arith.constant 5.000000e-01 : f32
      %92 = arith.mulf %91, %cst_18 : f32
      %93 = arith.bitcast %91 : f32 to i32
      %c1_i32_19 = arith.constant 1 : i32
      %94 = arith.shrui %93, %c1_i32_19 : i32
      %c1597463007_i32_20 = arith.constant 1597463007 : i32
      %95 = arith.subi %c1597463007_i32_20, %94 : i32
      %96 = arith.bitcast %95 : i32 to f32
      %cst_21 = arith.constant 1.500000e+00 : f32
      %97 = arith.mulf %96, %96 : f32
      %98 = arith.mulf %97, %92 : f32
      %99 = arith.subf %cst_21, %98 : f32
      %100 = arith.mulf %99, %97 : f32
      %101 = arith.subf %89, %2 : f32
      %102 = arith.mulf %101, %100 : f32
      %103 = arith.mulf %102, %0 : f32
      %104 = arith.addf %103, %1 : f32
      affine.store %104, %arg5[0, 0, %arg6, %88] : memref<1x64x112x112xf32>
      %105 = affine.apply #map5(%c0)
      %106 = affine.load %arg4[0, 0, %arg6, %105] : memref<1x64x112x112xf32>
      %107 = arith.truncf %cst : f64 to f32
      %108 = arith.addf %3, %107 : f32
      %cst_22 = arith.constant 5.000000e-01 : f32
      %109 = arith.mulf %108, %cst_22 : f32
      %110 = arith.bitcast %108 : f32 to i32
      %c1_i32_23 = arith.constant 1 : i32
      %111 = arith.shrui %110, %c1_i32_23 : i32
      %c1597463007_i32_24 = arith.constant 1597463007 : i32
      %112 = arith.subi %c1597463007_i32_24, %111 : i32
      %113 = arith.bitcast %112 : i32 to f32
      %cst_25 = arith.constant 1.500000e+00 : f32
      %114 = arith.mulf %113, %113 : f32
      %115 = arith.mulf %114, %109 : f32
      %116 = arith.subf %cst_25, %115 : f32
      %117 = arith.mulf %116, %114 : f32
      %118 = arith.subf %106, %2 : f32
      %119 = arith.mulf %118, %117 : f32
      %120 = arith.mulf %119, %0 : f32
      %121 = arith.addf %120, %1 : f32
      affine.store %121, %arg5[0, 0, %arg6, %105] : memref<1x64x112x112xf32>
      %122 = affine.apply #map6(%c0)
      %123 = affine.load %arg4[0, 0, %arg6, %122] : memref<1x64x112x112xf32>
      %124 = arith.truncf %cst : f64 to f32
      %125 = arith.addf %3, %124 : f32
      %cst_26 = arith.constant 5.000000e-01 : f32
      %126 = arith.mulf %125, %cst_26 : f32
      %127 = arith.bitcast %125 : f32 to i32
      %c1_i32_27 = arith.constant 1 : i32
      %128 = arith.shrui %127, %c1_i32_27 : i32
      %c1597463007_i32_28 = arith.constant 1597463007 : i32
      %129 = arith.subi %c1597463007_i32_28, %128 : i32
      %130 = arith.bitcast %129 : i32 to f32
      %cst_29 = arith.constant 1.500000e+00 : f32
      %131 = arith.mulf %130, %130 : f32
      %132 = arith.mulf %131, %126 : f32
      %133 = arith.subf %cst_29, %132 : f32
      %134 = arith.mulf %133, %131 : f32
      %135 = arith.subf %123, %2 : f32
      %136 = arith.mulf %135, %134 : f32
      %137 = arith.mulf %136, %0 : f32
      %138 = arith.addf %137, %1 : f32
      affine.store %138, %arg5[0, 0, %arg6, %122] : memref<1x64x112x112xf32>
      %139 = affine.apply #map7(%c0)
      %140 = affine.load %arg4[0, 0, %arg6, %139] : memref<1x64x112x112xf32>
      %141 = arith.truncf %cst : f64 to f32
      %142 = arith.addf %3, %141 : f32
      %cst_30 = arith.constant 5.000000e-01 : f32
      %143 = arith.mulf %142, %cst_30 : f32
      %144 = arith.bitcast %142 : f32 to i32
      %c1_i32_31 = arith.constant 1 : i32
      %145 = arith.shrui %144, %c1_i32_31 : i32
      %c1597463007_i32_32 = arith.constant 1597463007 : i32
      %146 = arith.subi %c1597463007_i32_32, %145 : i32
      %147 = arith.bitcast %146 : i32 to f32
      %cst_33 = arith.constant 1.500000e+00 : f32
      %148 = arith.mulf %147, %147 : f32
      %149 = arith.mulf %148, %143 : f32
      %150 = arith.subf %cst_33, %149 : f32
      %151 = arith.mulf %150, %148 : f32
      %152 = arith.subf %140, %2 : f32
      %153 = arith.mulf %152, %151 : f32
      %154 = arith.mulf %153, %0 : f32
      %155 = arith.addf %154, %1 : f32
      affine.store %155, %arg5[0, 0, %arg6, %139] : memref<1x64x112x112xf32>
      %156 = affine.apply #map8(%c0)
      %157 = affine.load %arg4[0, 0, %arg6, %156] : memref<1x64x112x112xf32>
      %158 = arith.truncf %cst : f64 to f32
      %159 = arith.addf %3, %158 : f32
      %cst_34 = arith.constant 5.000000e-01 : f32
      %160 = arith.mulf %159, %cst_34 : f32
      %161 = arith.bitcast %159 : f32 to i32
      %c1_i32_35 = arith.constant 1 : i32
      %162 = arith.shrui %161, %c1_i32_35 : i32
      %c1597463007_i32_36 = arith.constant 1597463007 : i32
      %163 = arith.subi %c1597463007_i32_36, %162 : i32
      %164 = arith.bitcast %163 : i32 to f32
      %cst_37 = arith.constant 1.500000e+00 : f32
      %165 = arith.mulf %164, %164 : f32
      %166 = arith.mulf %165, %160 : f32
      %167 = arith.subf %cst_37, %166 : f32
      %168 = arith.mulf %167, %165 : f32
      %169 = arith.subf %157, %2 : f32
      %170 = arith.mulf %169, %168 : f32
      %171 = arith.mulf %170, %0 : f32
      %172 = arith.addf %171, %1 : f32
      affine.store %172, %arg5[0, 0, %arg6, %156] : memref<1x64x112x112xf32>
      %173 = affine.apply #map9(%c0)
      %174 = affine.load %arg4[0, 0, %arg6, %173] : memref<1x64x112x112xf32>
      %175 = arith.truncf %cst : f64 to f32
      %176 = arith.addf %3, %175 : f32
      %cst_38 = arith.constant 5.000000e-01 : f32
      %177 = arith.mulf %176, %cst_38 : f32
      %178 = arith.bitcast %176 : f32 to i32
      %c1_i32_39 = arith.constant 1 : i32
      %179 = arith.shrui %178, %c1_i32_39 : i32
      %c1597463007_i32_40 = arith.constant 1597463007 : i32
      %180 = arith.subi %c1597463007_i32_40, %179 : i32
      %181 = arith.bitcast %180 : i32 to f32
      %cst_41 = arith.constant 1.500000e+00 : f32
      %182 = arith.mulf %181, %181 : f32
      %183 = arith.mulf %182, %177 : f32
      %184 = arith.subf %cst_41, %183 : f32
      %185 = arith.mulf %184, %182 : f32
      %186 = arith.subf %174, %2 : f32
      %187 = arith.mulf %186, %185 : f32
      %188 = arith.mulf %187, %0 : f32
      %189 = arith.addf %188, %1 : f32
      affine.store %189, %arg5[0, 0, %arg6, %173] : memref<1x64x112x112xf32>
      %190 = affine.apply #map10(%c0)
      %191 = affine.load %arg4[0, 0, %arg6, %190] : memref<1x64x112x112xf32>
      %192 = arith.truncf %cst : f64 to f32
      %193 = arith.addf %3, %192 : f32
      %cst_42 = arith.constant 5.000000e-01 : f32
      %194 = arith.mulf %193, %cst_42 : f32
      %195 = arith.bitcast %193 : f32 to i32
      %c1_i32_43 = arith.constant 1 : i32
      %196 = arith.shrui %195, %c1_i32_43 : i32
      %c1597463007_i32_44 = arith.constant 1597463007 : i32
      %197 = arith.subi %c1597463007_i32_44, %196 : i32
      %198 = arith.bitcast %197 : i32 to f32
      %cst_45 = arith.constant 1.500000e+00 : f32
      %199 = arith.mulf %198, %198 : f32
      %200 = arith.mulf %199, %194 : f32
      %201 = arith.subf %cst_45, %200 : f32
      %202 = arith.mulf %201, %199 : f32
      %203 = arith.subf %191, %2 : f32
      %204 = arith.mulf %203, %202 : f32
      %205 = arith.mulf %204, %0 : f32
      %206 = arith.addf %205, %1 : f32
      affine.store %206, %arg5[0, 0, %arg6, %190] : memref<1x64x112x112xf32>
      %207 = affine.apply #map11(%c0)
      %208 = affine.load %arg4[0, 0, %arg6, %207] : memref<1x64x112x112xf32>
      %209 = arith.truncf %cst : f64 to f32
      %210 = arith.addf %3, %209 : f32
      %cst_46 = arith.constant 5.000000e-01 : f32
      %211 = arith.mulf %210, %cst_46 : f32
      %212 = arith.bitcast %210 : f32 to i32
      %c1_i32_47 = arith.constant 1 : i32
      %213 = arith.shrui %212, %c1_i32_47 : i32
      %c1597463007_i32_48 = arith.constant 1597463007 : i32
      %214 = arith.subi %c1597463007_i32_48, %213 : i32
      %215 = arith.bitcast %214 : i32 to f32
      %cst_49 = arith.constant 1.500000e+00 : f32
      %216 = arith.mulf %215, %215 : f32
      %217 = arith.mulf %216, %211 : f32
      %218 = arith.subf %cst_49, %217 : f32
      %219 = arith.mulf %218, %216 : f32
      %220 = arith.subf %208, %2 : f32
      %221 = arith.mulf %220, %219 : f32
      %222 = arith.mulf %221, %0 : f32
      %223 = arith.addf %222, %1 : f32
      affine.store %223, %arg5[0, 0, %arg6, %207] : memref<1x64x112x112xf32>
      %224 = affine.apply #map12(%c0)
      %225 = affine.load %arg4[0, 0, %arg6, %224] : memref<1x64x112x112xf32>
      %226 = arith.truncf %cst : f64 to f32
      %227 = arith.addf %3, %226 : f32
      %cst_50 = arith.constant 5.000000e-01 : f32
      %228 = arith.mulf %227, %cst_50 : f32
      %229 = arith.bitcast %227 : f32 to i32
      %c1_i32_51 = arith.constant 1 : i32
      %230 = arith.shrui %229, %c1_i32_51 : i32
      %c1597463007_i32_52 = arith.constant 1597463007 : i32
      %231 = arith.subi %c1597463007_i32_52, %230 : i32
      %232 = arith.bitcast %231 : i32 to f32
      %cst_53 = arith.constant 1.500000e+00 : f32
      %233 = arith.mulf %232, %232 : f32
      %234 = arith.mulf %233, %228 : f32
      %235 = arith.subf %cst_53, %234 : f32
      %236 = arith.mulf %235, %233 : f32
      %237 = arith.subf %225, %2 : f32
      %238 = arith.mulf %237, %236 : f32
      %239 = arith.mulf %238, %0 : f32
      %240 = arith.addf %239, %1 : f32
      affine.store %240, %arg5[0, 0, %arg6, %224] : memref<1x64x112x112xf32>
      %241 = affine.apply #map13(%c0)
      %242 = affine.load %arg4[0, 0, %arg6, %241] : memref<1x64x112x112xf32>
      %243 = arith.truncf %cst : f64 to f32
      %244 = arith.addf %3, %243 : f32
      %cst_54 = arith.constant 5.000000e-01 : f32
      %245 = arith.mulf %244, %cst_54 : f32
      %246 = arith.bitcast %244 : f32 to i32
      %c1_i32_55 = arith.constant 1 : i32
      %247 = arith.shrui %246, %c1_i32_55 : i32
      %c1597463007_i32_56 = arith.constant 1597463007 : i32
      %248 = arith.subi %c1597463007_i32_56, %247 : i32
      %249 = arith.bitcast %248 : i32 to f32
      %cst_57 = arith.constant 1.500000e+00 : f32
      %250 = arith.mulf %249, %249 : f32
      %251 = arith.mulf %250, %245 : f32
      %252 = arith.subf %cst_57, %251 : f32
      %253 = arith.mulf %252, %250 : f32
      %254 = arith.subf %242, %2 : f32
      %255 = arith.mulf %254, %253 : f32
      %256 = arith.mulf %255, %0 : f32
      %257 = arith.addf %256, %1 : f32
      affine.store %257, %arg5[0, 0, %arg6, %241] : memref<1x64x112x112xf32>
      %258 = affine.apply #map14(%c0)
      %259 = affine.load %arg4[0, 0, %arg6, %258] : memref<1x64x112x112xf32>
      %260 = arith.truncf %cst : f64 to f32
      %261 = arith.addf %3, %260 : f32
      %cst_58 = arith.constant 5.000000e-01 : f32
      %262 = arith.mulf %261, %cst_58 : f32
      %263 = arith.bitcast %261 : f32 to i32
      %c1_i32_59 = arith.constant 1 : i32
      %264 = arith.shrui %263, %c1_i32_59 : i32
      %c1597463007_i32_60 = arith.constant 1597463007 : i32
      %265 = arith.subi %c1597463007_i32_60, %264 : i32
      %266 = arith.bitcast %265 : i32 to f32
      %cst_61 = arith.constant 1.500000e+00 : f32
      %267 = arith.mulf %266, %266 : f32
      %268 = arith.mulf %267, %262 : f32
      %269 = arith.subf %cst_61, %268 : f32
      %270 = arith.mulf %269, %267 : f32
      %271 = arith.subf %259, %2 : f32
      %272 = arith.mulf %271, %270 : f32
      %273 = arith.mulf %272, %0 : f32
      %274 = arith.addf %273, %1 : f32
      affine.store %274, %arg5[0, 0, %arg6, %258] : memref<1x64x112x112xf32>
      %275 = affine.apply #map15(%c0)
      %276 = affine.load %arg4[0, 0, %arg6, %275] : memref<1x64x112x112xf32>
      %277 = arith.truncf %cst : f64 to f32
      %278 = arith.addf %3, %277 : f32
      %cst_62 = arith.constant 5.000000e-01 : f32
      %279 = arith.mulf %278, %cst_62 : f32
      %280 = arith.bitcast %278 : f32 to i32
      %c1_i32_63 = arith.constant 1 : i32
      %281 = arith.shrui %280, %c1_i32_63 : i32
      %c1597463007_i32_64 = arith.constant 1597463007 : i32
      %282 = arith.subi %c1597463007_i32_64, %281 : i32
      %283 = arith.bitcast %282 : i32 to f32
      %cst_65 = arith.constant 1.500000e+00 : f32
      %284 = arith.mulf %283, %283 : f32
      %285 = arith.mulf %284, %279 : f32
      %286 = arith.subf %cst_65, %285 : f32
      %287 = arith.mulf %286, %284 : f32
      %288 = arith.subf %276, %2 : f32
      %289 = arith.mulf %288, %287 : f32
      %290 = arith.mulf %289, %0 : f32
      %291 = arith.addf %290, %1 : f32
      affine.store %291, %arg5[0, 0, %arg6, %275] : memref<1x64x112x112xf32>
      %292 = affine.apply #map16(%c0)
      %293 = affine.load %arg4[0, 0, %arg6, %292] : memref<1x64x112x112xf32>
      %294 = arith.truncf %cst : f64 to f32
      %295 = arith.addf %3, %294 : f32
      %cst_66 = arith.constant 5.000000e-01 : f32
      %296 = arith.mulf %295, %cst_66 : f32
      %297 = arith.bitcast %295 : f32 to i32
      %c1_i32_67 = arith.constant 1 : i32
      %298 = arith.shrui %297, %c1_i32_67 : i32
      %c1597463007_i32_68 = arith.constant 1597463007 : i32
      %299 = arith.subi %c1597463007_i32_68, %298 : i32
      %300 = arith.bitcast %299 : i32 to f32
      %cst_69 = arith.constant 1.500000e+00 : f32
      %301 = arith.mulf %300, %300 : f32
      %302 = arith.mulf %301, %296 : f32
      %303 = arith.subf %cst_69, %302 : f32
      %304 = arith.mulf %303, %301 : f32
      %305 = arith.subf %293, %2 : f32
      %306 = arith.mulf %305, %304 : f32
      %307 = arith.mulf %306, %0 : f32
      %308 = arith.addf %307, %1 : f32
      affine.store %308, %arg5[0, 0, %arg6, %292] : memref<1x64x112x112xf32>
      %309 = affine.apply #map17(%c0)
      %310 = affine.load %arg4[0, 0, %arg6, %309] : memref<1x64x112x112xf32>
      %311 = arith.truncf %cst : f64 to f32
      %312 = arith.addf %3, %311 : f32
      %cst_70 = arith.constant 5.000000e-01 : f32
      %313 = arith.mulf %312, %cst_70 : f32
      %314 = arith.bitcast %312 : f32 to i32
      %c1_i32_71 = arith.constant 1 : i32
      %315 = arith.shrui %314, %c1_i32_71 : i32
      %c1597463007_i32_72 = arith.constant 1597463007 : i32
      %316 = arith.subi %c1597463007_i32_72, %315 : i32
      %317 = arith.bitcast %316 : i32 to f32
      %cst_73 = arith.constant 1.500000e+00 : f32
      %318 = arith.mulf %317, %317 : f32
      %319 = arith.mulf %318, %313 : f32
      %320 = arith.subf %cst_73, %319 : f32
      %321 = arith.mulf %320, %318 : f32
      %322 = arith.subf %310, %2 : f32
      %323 = arith.mulf %322, %321 : f32
      %324 = arith.mulf %323, %0 : f32
      %325 = arith.addf %324, %1 : f32
      affine.store %325, %arg5[0, 0, %arg6, %309] : memref<1x64x112x112xf32>
      %326 = affine.apply #map18(%c0)
      %327 = affine.load %arg4[0, 0, %arg6, %326] : memref<1x64x112x112xf32>
      %328 = arith.truncf %cst : f64 to f32
      %329 = arith.addf %3, %328 : f32
      %cst_74 = arith.constant 5.000000e-01 : f32
      %330 = arith.mulf %329, %cst_74 : f32
      %331 = arith.bitcast %329 : f32 to i32
      %c1_i32_75 = arith.constant 1 : i32
      %332 = arith.shrui %331, %c1_i32_75 : i32
      %c1597463007_i32_76 = arith.constant 1597463007 : i32
      %333 = arith.subi %c1597463007_i32_76, %332 : i32
      %334 = arith.bitcast %333 : i32 to f32
      %cst_77 = arith.constant 1.500000e+00 : f32
      %335 = arith.mulf %334, %334 : f32
      %336 = arith.mulf %335, %330 : f32
      %337 = arith.subf %cst_77, %336 : f32
      %338 = arith.mulf %337, %335 : f32
      %339 = arith.subf %327, %2 : f32
      %340 = arith.mulf %339, %338 : f32
      %341 = arith.mulf %340, %0 : f32
      %342 = arith.addf %341, %1 : f32
      affine.store %342, %arg5[0, 0, %arg6, %326] : memref<1x64x112x112xf32>
      %343 = affine.apply #map19(%c0)
      %344 = affine.load %arg4[0, 0, %arg6, %343] : memref<1x64x112x112xf32>
      %345 = arith.truncf %cst : f64 to f32
      %346 = arith.addf %3, %345 : f32
      %cst_78 = arith.constant 5.000000e-01 : f32
      %347 = arith.mulf %346, %cst_78 : f32
      %348 = arith.bitcast %346 : f32 to i32
      %c1_i32_79 = arith.constant 1 : i32
      %349 = arith.shrui %348, %c1_i32_79 : i32
      %c1597463007_i32_80 = arith.constant 1597463007 : i32
      %350 = arith.subi %c1597463007_i32_80, %349 : i32
      %351 = arith.bitcast %350 : i32 to f32
      %cst_81 = arith.constant 1.500000e+00 : f32
      %352 = arith.mulf %351, %351 : f32
      %353 = arith.mulf %352, %347 : f32
      %354 = arith.subf %cst_81, %353 : f32
      %355 = arith.mulf %354, %352 : f32
      %356 = arith.subf %344, %2 : f32
      %357 = arith.mulf %356, %355 : f32
      %358 = arith.mulf %357, %0 : f32
      %359 = arith.addf %358, %1 : f32
      affine.store %359, %arg5[0, 0, %arg6, %343] : memref<1x64x112x112xf32>
      %360 = affine.apply #map20(%c0)
      %361 = affine.load %arg4[0, 0, %arg6, %360] : memref<1x64x112x112xf32>
      %362 = arith.truncf %cst : f64 to f32
      %363 = arith.addf %3, %362 : f32
      %cst_82 = arith.constant 5.000000e-01 : f32
      %364 = arith.mulf %363, %cst_82 : f32
      %365 = arith.bitcast %363 : f32 to i32
      %c1_i32_83 = arith.constant 1 : i32
      %366 = arith.shrui %365, %c1_i32_83 : i32
      %c1597463007_i32_84 = arith.constant 1597463007 : i32
      %367 = arith.subi %c1597463007_i32_84, %366 : i32
      %368 = arith.bitcast %367 : i32 to f32
      %cst_85 = arith.constant 1.500000e+00 : f32
      %369 = arith.mulf %368, %368 : f32
      %370 = arith.mulf %369, %364 : f32
      %371 = arith.subf %cst_85, %370 : f32
      %372 = arith.mulf %371, %369 : f32
      %373 = arith.subf %361, %2 : f32
      %374 = arith.mulf %373, %372 : f32
      %375 = arith.mulf %374, %0 : f32
      %376 = arith.addf %375, %1 : f32
      affine.store %376, %arg5[0, 0, %arg6, %360] : memref<1x64x112x112xf32>
      %377 = affine.apply #map21(%c0)
      %378 = affine.load %arg4[0, 0, %arg6, %377] : memref<1x64x112x112xf32>
      %379 = arith.truncf %cst : f64 to f32
      %380 = arith.addf %3, %379 : f32
      %cst_86 = arith.constant 5.000000e-01 : f32
      %381 = arith.mulf %380, %cst_86 : f32
      %382 = arith.bitcast %380 : f32 to i32
      %c1_i32_87 = arith.constant 1 : i32
      %383 = arith.shrui %382, %c1_i32_87 : i32
      %c1597463007_i32_88 = arith.constant 1597463007 : i32
      %384 = arith.subi %c1597463007_i32_88, %383 : i32
      %385 = arith.bitcast %384 : i32 to f32
      %cst_89 = arith.constant 1.500000e+00 : f32
      %386 = arith.mulf %385, %385 : f32
      %387 = arith.mulf %386, %381 : f32
      %388 = arith.subf %cst_89, %387 : f32
      %389 = arith.mulf %388, %386 : f32
      %390 = arith.subf %378, %2 : f32
      %391 = arith.mulf %390, %389 : f32
      %392 = arith.mulf %391, %0 : f32
      %393 = arith.addf %392, %1 : f32
      affine.store %393, %arg5[0, 0, %arg6, %377] : memref<1x64x112x112xf32>
      %394 = affine.apply #map22(%c0)
      %395 = affine.load %arg4[0, 0, %arg6, %394] : memref<1x64x112x112xf32>
      %396 = arith.truncf %cst : f64 to f32
      %397 = arith.addf %3, %396 : f32
      %cst_90 = arith.constant 5.000000e-01 : f32
      %398 = arith.mulf %397, %cst_90 : f32
      %399 = arith.bitcast %397 : f32 to i32
      %c1_i32_91 = arith.constant 1 : i32
      %400 = arith.shrui %399, %c1_i32_91 : i32
      %c1597463007_i32_92 = arith.constant 1597463007 : i32
      %401 = arith.subi %c1597463007_i32_92, %400 : i32
      %402 = arith.bitcast %401 : i32 to f32
      %cst_93 = arith.constant 1.500000e+00 : f32
      %403 = arith.mulf %402, %402 : f32
      %404 = arith.mulf %403, %398 : f32
      %405 = arith.subf %cst_93, %404 : f32
      %406 = arith.mulf %405, %403 : f32
      %407 = arith.subf %395, %2 : f32
      %408 = arith.mulf %407, %406 : f32
      %409 = arith.mulf %408, %0 : f32
      %410 = arith.addf %409, %1 : f32
      affine.store %410, %arg5[0, 0, %arg6, %394] : memref<1x64x112x112xf32>
      %411 = affine.apply #map23(%c0)
      %412 = affine.load %arg4[0, 0, %arg6, %411] : memref<1x64x112x112xf32>
      %413 = arith.truncf %cst : f64 to f32
      %414 = arith.addf %3, %413 : f32
      %cst_94 = arith.constant 5.000000e-01 : f32
      %415 = arith.mulf %414, %cst_94 : f32
      %416 = arith.bitcast %414 : f32 to i32
      %c1_i32_95 = arith.constant 1 : i32
      %417 = arith.shrui %416, %c1_i32_95 : i32
      %c1597463007_i32_96 = arith.constant 1597463007 : i32
      %418 = arith.subi %c1597463007_i32_96, %417 : i32
      %419 = arith.bitcast %418 : i32 to f32
      %cst_97 = arith.constant 1.500000e+00 : f32
      %420 = arith.mulf %419, %419 : f32
      %421 = arith.mulf %420, %415 : f32
      %422 = arith.subf %cst_97, %421 : f32
      %423 = arith.mulf %422, %420 : f32
      %424 = arith.subf %412, %2 : f32
      %425 = arith.mulf %424, %423 : f32
      %426 = arith.mulf %425, %0 : f32
      %427 = arith.addf %426, %1 : f32
      affine.store %427, %arg5[0, 0, %arg6, %411] : memref<1x64x112x112xf32>
      %428 = affine.apply #map24(%c0)
      %429 = affine.load %arg4[0, 0, %arg6, %428] : memref<1x64x112x112xf32>
      %430 = arith.truncf %cst : f64 to f32
      %431 = arith.addf %3, %430 : f32
      %cst_98 = arith.constant 5.000000e-01 : f32
      %432 = arith.mulf %431, %cst_98 : f32
      %433 = arith.bitcast %431 : f32 to i32
      %c1_i32_99 = arith.constant 1 : i32
      %434 = arith.shrui %433, %c1_i32_99 : i32
      %c1597463007_i32_100 = arith.constant 1597463007 : i32
      %435 = arith.subi %c1597463007_i32_100, %434 : i32
      %436 = arith.bitcast %435 : i32 to f32
      %cst_101 = arith.constant 1.500000e+00 : f32
      %437 = arith.mulf %436, %436 : f32
      %438 = arith.mulf %437, %432 : f32
      %439 = arith.subf %cst_101, %438 : f32
      %440 = arith.mulf %439, %437 : f32
      %441 = arith.subf %429, %2 : f32
      %442 = arith.mulf %441, %440 : f32
      %443 = arith.mulf %442, %0 : f32
      %444 = arith.addf %443, %1 : f32
      affine.store %444, %arg5[0, 0, %arg6, %428] : memref<1x64x112x112xf32>
      %445 = affine.apply #map25(%c0)
      %446 = affine.load %arg4[0, 0, %arg6, %445] : memref<1x64x112x112xf32>
      %447 = arith.truncf %cst : f64 to f32
      %448 = arith.addf %3, %447 : f32
      %cst_102 = arith.constant 5.000000e-01 : f32
      %449 = arith.mulf %448, %cst_102 : f32
      %450 = arith.bitcast %448 : f32 to i32
      %c1_i32_103 = arith.constant 1 : i32
      %451 = arith.shrui %450, %c1_i32_103 : i32
      %c1597463007_i32_104 = arith.constant 1597463007 : i32
      %452 = arith.subi %c1597463007_i32_104, %451 : i32
      %453 = arith.bitcast %452 : i32 to f32
      %cst_105 = arith.constant 1.500000e+00 : f32
      %454 = arith.mulf %453, %453 : f32
      %455 = arith.mulf %454, %449 : f32
      %456 = arith.subf %cst_105, %455 : f32
      %457 = arith.mulf %456, %454 : f32
      %458 = arith.subf %446, %2 : f32
      %459 = arith.mulf %458, %457 : f32
      %460 = arith.mulf %459, %0 : f32
      %461 = arith.addf %460, %1 : f32
      affine.store %461, %arg5[0, 0, %arg6, %445] : memref<1x64x112x112xf32>
      %462 = affine.apply #map26(%c0)
      %463 = affine.load %arg4[0, 0, %arg6, %462] : memref<1x64x112x112xf32>
      %464 = arith.truncf %cst : f64 to f32
      %465 = arith.addf %3, %464 : f32
      %cst_106 = arith.constant 5.000000e-01 : f32
      %466 = arith.mulf %465, %cst_106 : f32
      %467 = arith.bitcast %465 : f32 to i32
      %c1_i32_107 = arith.constant 1 : i32
      %468 = arith.shrui %467, %c1_i32_107 : i32
      %c1597463007_i32_108 = arith.constant 1597463007 : i32
      %469 = arith.subi %c1597463007_i32_108, %468 : i32
      %470 = arith.bitcast %469 : i32 to f32
      %cst_109 = arith.constant 1.500000e+00 : f32
      %471 = arith.mulf %470, %470 : f32
      %472 = arith.mulf %471, %466 : f32
      %473 = arith.subf %cst_109, %472 : f32
      %474 = arith.mulf %473, %471 : f32
      %475 = arith.subf %463, %2 : f32
      %476 = arith.mulf %475, %474 : f32
      %477 = arith.mulf %476, %0 : f32
      %478 = arith.addf %477, %1 : f32
      affine.store %478, %arg5[0, 0, %arg6, %462] : memref<1x64x112x112xf32>
      %479 = affine.apply #map27(%c0)
      %480 = affine.load %arg4[0, 0, %arg6, %479] : memref<1x64x112x112xf32>
      %481 = arith.truncf %cst : f64 to f32
      %482 = arith.addf %3, %481 : f32
      %cst_110 = arith.constant 5.000000e-01 : f32
      %483 = arith.mulf %482, %cst_110 : f32
      %484 = arith.bitcast %482 : f32 to i32
      %c1_i32_111 = arith.constant 1 : i32
      %485 = arith.shrui %484, %c1_i32_111 : i32
      %c1597463007_i32_112 = arith.constant 1597463007 : i32
      %486 = arith.subi %c1597463007_i32_112, %485 : i32
      %487 = arith.bitcast %486 : i32 to f32
      %cst_113 = arith.constant 1.500000e+00 : f32
      %488 = arith.mulf %487, %487 : f32
      %489 = arith.mulf %488, %483 : f32
      %490 = arith.subf %cst_113, %489 : f32
      %491 = arith.mulf %490, %488 : f32
      %492 = arith.subf %480, %2 : f32
      %493 = arith.mulf %492, %491 : f32
      %494 = arith.mulf %493, %0 : f32
      %495 = arith.addf %494, %1 : f32
      affine.store %495, %arg5[0, 0, %arg6, %479] : memref<1x64x112x112xf32>
      %496 = affine.apply #map28(%c0)
      %497 = affine.load %arg4[0, 0, %arg6, %496] : memref<1x64x112x112xf32>
      %498 = arith.truncf %cst : f64 to f32
      %499 = arith.addf %3, %498 : f32
      %cst_114 = arith.constant 5.000000e-01 : f32
      %500 = arith.mulf %499, %cst_114 : f32
      %501 = arith.bitcast %499 : f32 to i32
      %c1_i32_115 = arith.constant 1 : i32
      %502 = arith.shrui %501, %c1_i32_115 : i32
      %c1597463007_i32_116 = arith.constant 1597463007 : i32
      %503 = arith.subi %c1597463007_i32_116, %502 : i32
      %504 = arith.bitcast %503 : i32 to f32
      %cst_117 = arith.constant 1.500000e+00 : f32
      %505 = arith.mulf %504, %504 : f32
      %506 = arith.mulf %505, %500 : f32
      %507 = arith.subf %cst_117, %506 : f32
      %508 = arith.mulf %507, %505 : f32
      %509 = arith.subf %497, %2 : f32
      %510 = arith.mulf %509, %508 : f32
      %511 = arith.mulf %510, %0 : f32
      %512 = arith.addf %511, %1 : f32
      affine.store %512, %arg5[0, 0, %arg6, %496] : memref<1x64x112x112xf32>
      %513 = affine.apply #map29(%c0)
      %514 = affine.load %arg4[0, 0, %arg6, %513] : memref<1x64x112x112xf32>
      %515 = arith.truncf %cst : f64 to f32
      %516 = arith.addf %3, %515 : f32
      %cst_118 = arith.constant 5.000000e-01 : f32
      %517 = arith.mulf %516, %cst_118 : f32
      %518 = arith.bitcast %516 : f32 to i32
      %c1_i32_119 = arith.constant 1 : i32
      %519 = arith.shrui %518, %c1_i32_119 : i32
      %c1597463007_i32_120 = arith.constant 1597463007 : i32
      %520 = arith.subi %c1597463007_i32_120, %519 : i32
      %521 = arith.bitcast %520 : i32 to f32
      %cst_121 = arith.constant 1.500000e+00 : f32
      %522 = arith.mulf %521, %521 : f32
      %523 = arith.mulf %522, %517 : f32
      %524 = arith.subf %cst_121, %523 : f32
      %525 = arith.mulf %524, %522 : f32
      %526 = arith.subf %514, %2 : f32
      %527 = arith.mulf %526, %525 : f32
      %528 = arith.mulf %527, %0 : f32
      %529 = arith.addf %528, %1 : f32
      affine.store %529, %arg5[0, 0, %arg6, %513] : memref<1x64x112x112xf32>
      %530 = affine.apply #map30(%c0)
      %531 = affine.load %arg4[0, 0, %arg6, %530] : memref<1x64x112x112xf32>
      %532 = arith.truncf %cst : f64 to f32
      %533 = arith.addf %3, %532 : f32
      %cst_122 = arith.constant 5.000000e-01 : f32
      %534 = arith.mulf %533, %cst_122 : f32
      %535 = arith.bitcast %533 : f32 to i32
      %c1_i32_123 = arith.constant 1 : i32
      %536 = arith.shrui %535, %c1_i32_123 : i32
      %c1597463007_i32_124 = arith.constant 1597463007 : i32
      %537 = arith.subi %c1597463007_i32_124, %536 : i32
      %538 = arith.bitcast %537 : i32 to f32
      %cst_125 = arith.constant 1.500000e+00 : f32
      %539 = arith.mulf %538, %538 : f32
      %540 = arith.mulf %539, %534 : f32
      %541 = arith.subf %cst_125, %540 : f32
      %542 = arith.mulf %541, %539 : f32
      %543 = arith.subf %531, %2 : f32
      %544 = arith.mulf %543, %542 : f32
      %545 = arith.mulf %544, %0 : f32
      %546 = arith.addf %545, %1 : f32
      affine.store %546, %arg5[0, 0, %arg6, %530] : memref<1x64x112x112xf32>
      %547 = affine.apply #map31(%c0)
      %548 = affine.load %arg4[0, 0, %arg6, %547] : memref<1x64x112x112xf32>
      %549 = arith.truncf %cst : f64 to f32
      %550 = arith.addf %3, %549 : f32
      %cst_126 = arith.constant 5.000000e-01 : f32
      %551 = arith.mulf %550, %cst_126 : f32
      %552 = arith.bitcast %550 : f32 to i32
      %c1_i32_127 = arith.constant 1 : i32
      %553 = arith.shrui %552, %c1_i32_127 : i32
      %c1597463007_i32_128 = arith.constant 1597463007 : i32
      %554 = arith.subi %c1597463007_i32_128, %553 : i32
      %555 = arith.bitcast %554 : i32 to f32
      %cst_129 = arith.constant 1.500000e+00 : f32
      %556 = arith.mulf %555, %555 : f32
      %557 = arith.mulf %556, %551 : f32
      %558 = arith.subf %cst_129, %557 : f32
      %559 = arith.mulf %558, %556 : f32
      %560 = arith.subf %548, %2 : f32
      %561 = arith.mulf %560, %559 : f32
      %562 = arith.mulf %561, %0 : f32
      %563 = arith.addf %562, %1 : f32
      affine.store %563, %arg5[0, 0, %arg6, %547] : memref<1x64x112x112xf32>
      %564 = affine.apply #map32(%c0)
      %565 = affine.load %arg4[0, 0, %arg6, %564] : memref<1x64x112x112xf32>
      %566 = arith.truncf %cst : f64 to f32
      %567 = arith.addf %3, %566 : f32
      %cst_130 = arith.constant 5.000000e-01 : f32
      %568 = arith.mulf %567, %cst_130 : f32
      %569 = arith.bitcast %567 : f32 to i32
      %c1_i32_131 = arith.constant 1 : i32
      %570 = arith.shrui %569, %c1_i32_131 : i32
      %c1597463007_i32_132 = arith.constant 1597463007 : i32
      %571 = arith.subi %c1597463007_i32_132, %570 : i32
      %572 = arith.bitcast %571 : i32 to f32
      %cst_133 = arith.constant 1.500000e+00 : f32
      %573 = arith.mulf %572, %572 : f32
      %574 = arith.mulf %573, %568 : f32
      %575 = arith.subf %cst_133, %574 : f32
      %576 = arith.mulf %575, %573 : f32
      %577 = arith.subf %565, %2 : f32
      %578 = arith.mulf %577, %576 : f32
      %579 = arith.mulf %578, %0 : f32
      %580 = arith.addf %579, %1 : f32
      affine.store %580, %arg5[0, 0, %arg6, %564] : memref<1x64x112x112xf32>
      %581 = affine.apply #map33(%c0)
      %582 = affine.load %arg4[0, 0, %arg6, %581] : memref<1x64x112x112xf32>
      %583 = arith.truncf %cst : f64 to f32
      %584 = arith.addf %3, %583 : f32
      %cst_134 = arith.constant 5.000000e-01 : f32
      %585 = arith.mulf %584, %cst_134 : f32
      %586 = arith.bitcast %584 : f32 to i32
      %c1_i32_135 = arith.constant 1 : i32
      %587 = arith.shrui %586, %c1_i32_135 : i32
      %c1597463007_i32_136 = arith.constant 1597463007 : i32
      %588 = arith.subi %c1597463007_i32_136, %587 : i32
      %589 = arith.bitcast %588 : i32 to f32
      %cst_137 = arith.constant 1.500000e+00 : f32
      %590 = arith.mulf %589, %589 : f32
      %591 = arith.mulf %590, %585 : f32
      %592 = arith.subf %cst_137, %591 : f32
      %593 = arith.mulf %592, %590 : f32
      %594 = arith.subf %582, %2 : f32
      %595 = arith.mulf %594, %593 : f32
      %596 = arith.mulf %595, %0 : f32
      %597 = arith.addf %596, %1 : f32
      affine.store %597, %arg5[0, 0, %arg6, %581] : memref<1x64x112x112xf32>
      %598 = affine.apply #map34(%c0)
      %599 = affine.load %arg4[0, 0, %arg6, %598] : memref<1x64x112x112xf32>
      %600 = arith.truncf %cst : f64 to f32
      %601 = arith.addf %3, %600 : f32
      %cst_138 = arith.constant 5.000000e-01 : f32
      %602 = arith.mulf %601, %cst_138 : f32
      %603 = arith.bitcast %601 : f32 to i32
      %c1_i32_139 = arith.constant 1 : i32
      %604 = arith.shrui %603, %c1_i32_139 : i32
      %c1597463007_i32_140 = arith.constant 1597463007 : i32
      %605 = arith.subi %c1597463007_i32_140, %604 : i32
      %606 = arith.bitcast %605 : i32 to f32
      %cst_141 = arith.constant 1.500000e+00 : f32
      %607 = arith.mulf %606, %606 : f32
      %608 = arith.mulf %607, %602 : f32
      %609 = arith.subf %cst_141, %608 : f32
      %610 = arith.mulf %609, %607 : f32
      %611 = arith.subf %599, %2 : f32
      %612 = arith.mulf %611, %610 : f32
      %613 = arith.mulf %612, %0 : f32
      %614 = arith.addf %613, %1 : f32
      affine.store %614, %arg5[0, 0, %arg6, %598] : memref<1x64x112x112xf32>
      %615 = affine.apply #map35(%c0)
      %616 = affine.load %arg4[0, 0, %arg6, %615] : memref<1x64x112x112xf32>
      %617 = arith.truncf %cst : f64 to f32
      %618 = arith.addf %3, %617 : f32
      %cst_142 = arith.constant 5.000000e-01 : f32
      %619 = arith.mulf %618, %cst_142 : f32
      %620 = arith.bitcast %618 : f32 to i32
      %c1_i32_143 = arith.constant 1 : i32
      %621 = arith.shrui %620, %c1_i32_143 : i32
      %c1597463007_i32_144 = arith.constant 1597463007 : i32
      %622 = arith.subi %c1597463007_i32_144, %621 : i32
      %623 = arith.bitcast %622 : i32 to f32
      %cst_145 = arith.constant 1.500000e+00 : f32
      %624 = arith.mulf %623, %623 : f32
      %625 = arith.mulf %624, %619 : f32
      %626 = arith.subf %cst_145, %625 : f32
      %627 = arith.mulf %626, %624 : f32
      %628 = arith.subf %616, %2 : f32
      %629 = arith.mulf %628, %627 : f32
      %630 = arith.mulf %629, %0 : f32
      %631 = arith.addf %630, %1 : f32
      affine.store %631, %arg5[0, 0, %arg6, %615] : memref<1x64x112x112xf32>
      %632 = affine.apply #map36(%c0)
      %633 = affine.load %arg4[0, 0, %arg6, %632] : memref<1x64x112x112xf32>
      %634 = arith.truncf %cst : f64 to f32
      %635 = arith.addf %3, %634 : f32
      %cst_146 = arith.constant 5.000000e-01 : f32
      %636 = arith.mulf %635, %cst_146 : f32
      %637 = arith.bitcast %635 : f32 to i32
      %c1_i32_147 = arith.constant 1 : i32
      %638 = arith.shrui %637, %c1_i32_147 : i32
      %c1597463007_i32_148 = arith.constant 1597463007 : i32
      %639 = arith.subi %c1597463007_i32_148, %638 : i32
      %640 = arith.bitcast %639 : i32 to f32
      %cst_149 = arith.constant 1.500000e+00 : f32
      %641 = arith.mulf %640, %640 : f32
      %642 = arith.mulf %641, %636 : f32
      %643 = arith.subf %cst_149, %642 : f32
      %644 = arith.mulf %643, %641 : f32
      %645 = arith.subf %633, %2 : f32
      %646 = arith.mulf %645, %644 : f32
      %647 = arith.mulf %646, %0 : f32
      %648 = arith.addf %647, %1 : f32
      affine.store %648, %arg5[0, 0, %arg6, %632] : memref<1x64x112x112xf32>
      %649 = affine.apply #map37(%c0)
      %650 = affine.load %arg4[0, 0, %arg6, %649] : memref<1x64x112x112xf32>
      %651 = arith.truncf %cst : f64 to f32
      %652 = arith.addf %3, %651 : f32
      %cst_150 = arith.constant 5.000000e-01 : f32
      %653 = arith.mulf %652, %cst_150 : f32
      %654 = arith.bitcast %652 : f32 to i32
      %c1_i32_151 = arith.constant 1 : i32
      %655 = arith.shrui %654, %c1_i32_151 : i32
      %c1597463007_i32_152 = arith.constant 1597463007 : i32
      %656 = arith.subi %c1597463007_i32_152, %655 : i32
      %657 = arith.bitcast %656 : i32 to f32
      %cst_153 = arith.constant 1.500000e+00 : f32
      %658 = arith.mulf %657, %657 : f32
      %659 = arith.mulf %658, %653 : f32
      %660 = arith.subf %cst_153, %659 : f32
      %661 = arith.mulf %660, %658 : f32
      %662 = arith.subf %650, %2 : f32
      %663 = arith.mulf %662, %661 : f32
      %664 = arith.mulf %663, %0 : f32
      %665 = arith.addf %664, %1 : f32
      affine.store %665, %arg5[0, 0, %arg6, %649] : memref<1x64x112x112xf32>
      %666 = affine.apply #map38(%c0)
      %667 = affine.load %arg4[0, 0, %arg6, %666] : memref<1x64x112x112xf32>
      %668 = arith.truncf %cst : f64 to f32
      %669 = arith.addf %3, %668 : f32
      %cst_154 = arith.constant 5.000000e-01 : f32
      %670 = arith.mulf %669, %cst_154 : f32
      %671 = arith.bitcast %669 : f32 to i32
      %c1_i32_155 = arith.constant 1 : i32
      %672 = arith.shrui %671, %c1_i32_155 : i32
      %c1597463007_i32_156 = arith.constant 1597463007 : i32
      %673 = arith.subi %c1597463007_i32_156, %672 : i32
      %674 = arith.bitcast %673 : i32 to f32
      %cst_157 = arith.constant 1.500000e+00 : f32
      %675 = arith.mulf %674, %674 : f32
      %676 = arith.mulf %675, %670 : f32
      %677 = arith.subf %cst_157, %676 : f32
      %678 = arith.mulf %677, %675 : f32
      %679 = arith.subf %667, %2 : f32
      %680 = arith.mulf %679, %678 : f32
      %681 = arith.mulf %680, %0 : f32
      %682 = arith.addf %681, %1 : f32
      affine.store %682, %arg5[0, 0, %arg6, %666] : memref<1x64x112x112xf32>
      %683 = affine.apply #map39(%c0)
      %684 = affine.load %arg4[0, 0, %arg6, %683] : memref<1x64x112x112xf32>
      %685 = arith.truncf %cst : f64 to f32
      %686 = arith.addf %3, %685 : f32
      %cst_158 = arith.constant 5.000000e-01 : f32
      %687 = arith.mulf %686, %cst_158 : f32
      %688 = arith.bitcast %686 : f32 to i32
      %c1_i32_159 = arith.constant 1 : i32
      %689 = arith.shrui %688, %c1_i32_159 : i32
      %c1597463007_i32_160 = arith.constant 1597463007 : i32
      %690 = arith.subi %c1597463007_i32_160, %689 : i32
      %691 = arith.bitcast %690 : i32 to f32
      %cst_161 = arith.constant 1.500000e+00 : f32
      %692 = arith.mulf %691, %691 : f32
      %693 = arith.mulf %692, %687 : f32
      %694 = arith.subf %cst_161, %693 : f32
      %695 = arith.mulf %694, %692 : f32
      %696 = arith.subf %684, %2 : f32
      %697 = arith.mulf %696, %695 : f32
      %698 = arith.mulf %697, %0 : f32
      %699 = arith.addf %698, %1 : f32
      affine.store %699, %arg5[0, 0, %arg6, %683] : memref<1x64x112x112xf32>
      %700 = affine.apply #map40(%c0)
      %701 = affine.load %arg4[0, 0, %arg6, %700] : memref<1x64x112x112xf32>
      %702 = arith.truncf %cst : f64 to f32
      %703 = arith.addf %3, %702 : f32
      %cst_162 = arith.constant 5.000000e-01 : f32
      %704 = arith.mulf %703, %cst_162 : f32
      %705 = arith.bitcast %703 : f32 to i32
      %c1_i32_163 = arith.constant 1 : i32
      %706 = arith.shrui %705, %c1_i32_163 : i32
      %c1597463007_i32_164 = arith.constant 1597463007 : i32
      %707 = arith.subi %c1597463007_i32_164, %706 : i32
      %708 = arith.bitcast %707 : i32 to f32
      %cst_165 = arith.constant 1.500000e+00 : f32
      %709 = arith.mulf %708, %708 : f32
      %710 = arith.mulf %709, %704 : f32
      %711 = arith.subf %cst_165, %710 : f32
      %712 = arith.mulf %711, %709 : f32
      %713 = arith.subf %701, %2 : f32
      %714 = arith.mulf %713, %712 : f32
      %715 = arith.mulf %714, %0 : f32
      %716 = arith.addf %715, %1 : f32
      affine.store %716, %arg5[0, 0, %arg6, %700] : memref<1x64x112x112xf32>
      %717 = affine.apply #map41(%c0)
      %718 = affine.load %arg4[0, 0, %arg6, %717] : memref<1x64x112x112xf32>
      %719 = arith.truncf %cst : f64 to f32
      %720 = arith.addf %3, %719 : f32
      %cst_166 = arith.constant 5.000000e-01 : f32
      %721 = arith.mulf %720, %cst_166 : f32
      %722 = arith.bitcast %720 : f32 to i32
      %c1_i32_167 = arith.constant 1 : i32
      %723 = arith.shrui %722, %c1_i32_167 : i32
      %c1597463007_i32_168 = arith.constant 1597463007 : i32
      %724 = arith.subi %c1597463007_i32_168, %723 : i32
      %725 = arith.bitcast %724 : i32 to f32
      %cst_169 = arith.constant 1.500000e+00 : f32
      %726 = arith.mulf %725, %725 : f32
      %727 = arith.mulf %726, %721 : f32
      %728 = arith.subf %cst_169, %727 : f32
      %729 = arith.mulf %728, %726 : f32
      %730 = arith.subf %718, %2 : f32
      %731 = arith.mulf %730, %729 : f32
      %732 = arith.mulf %731, %0 : f32
      %733 = arith.addf %732, %1 : f32
      affine.store %733, %arg5[0, 0, %arg6, %717] : memref<1x64x112x112xf32>
      %734 = affine.apply #map42(%c0)
      %735 = affine.load %arg4[0, 0, %arg6, %734] : memref<1x64x112x112xf32>
      %736 = arith.truncf %cst : f64 to f32
      %737 = arith.addf %3, %736 : f32
      %cst_170 = arith.constant 5.000000e-01 : f32
      %738 = arith.mulf %737, %cst_170 : f32
      %739 = arith.bitcast %737 : f32 to i32
      %c1_i32_171 = arith.constant 1 : i32
      %740 = arith.shrui %739, %c1_i32_171 : i32
      %c1597463007_i32_172 = arith.constant 1597463007 : i32
      %741 = arith.subi %c1597463007_i32_172, %740 : i32
      %742 = arith.bitcast %741 : i32 to f32
      %cst_173 = arith.constant 1.500000e+00 : f32
      %743 = arith.mulf %742, %742 : f32
      %744 = arith.mulf %743, %738 : f32
      %745 = arith.subf %cst_173, %744 : f32
      %746 = arith.mulf %745, %743 : f32
      %747 = arith.subf %735, %2 : f32
      %748 = arith.mulf %747, %746 : f32
      %749 = arith.mulf %748, %0 : f32
      %750 = arith.addf %749, %1 : f32
      affine.store %750, %arg5[0, 0, %arg6, %734] : memref<1x64x112x112xf32>
      %751 = affine.apply #map43(%c0)
      %752 = affine.load %arg4[0, 0, %arg6, %751] : memref<1x64x112x112xf32>
      %753 = arith.truncf %cst : f64 to f32
      %754 = arith.addf %3, %753 : f32
      %cst_174 = arith.constant 5.000000e-01 : f32
      %755 = arith.mulf %754, %cst_174 : f32
      %756 = arith.bitcast %754 : f32 to i32
      %c1_i32_175 = arith.constant 1 : i32
      %757 = arith.shrui %756, %c1_i32_175 : i32
      %c1597463007_i32_176 = arith.constant 1597463007 : i32
      %758 = arith.subi %c1597463007_i32_176, %757 : i32
      %759 = arith.bitcast %758 : i32 to f32
      %cst_177 = arith.constant 1.500000e+00 : f32
      %760 = arith.mulf %759, %759 : f32
      %761 = arith.mulf %760, %755 : f32
      %762 = arith.subf %cst_177, %761 : f32
      %763 = arith.mulf %762, %760 : f32
      %764 = arith.subf %752, %2 : f32
      %765 = arith.mulf %764, %763 : f32
      %766 = arith.mulf %765, %0 : f32
      %767 = arith.addf %766, %1 : f32
      affine.store %767, %arg5[0, 0, %arg6, %751] : memref<1x64x112x112xf32>
      %768 = affine.apply #map44(%c0)
      %769 = affine.load %arg4[0, 0, %arg6, %768] : memref<1x64x112x112xf32>
      %770 = arith.truncf %cst : f64 to f32
      %771 = arith.addf %3, %770 : f32
      %cst_178 = arith.constant 5.000000e-01 : f32
      %772 = arith.mulf %771, %cst_178 : f32
      %773 = arith.bitcast %771 : f32 to i32
      %c1_i32_179 = arith.constant 1 : i32
      %774 = arith.shrui %773, %c1_i32_179 : i32
      %c1597463007_i32_180 = arith.constant 1597463007 : i32
      %775 = arith.subi %c1597463007_i32_180, %774 : i32
      %776 = arith.bitcast %775 : i32 to f32
      %cst_181 = arith.constant 1.500000e+00 : f32
      %777 = arith.mulf %776, %776 : f32
      %778 = arith.mulf %777, %772 : f32
      %779 = arith.subf %cst_181, %778 : f32
      %780 = arith.mulf %779, %777 : f32
      %781 = arith.subf %769, %2 : f32
      %782 = arith.mulf %781, %780 : f32
      %783 = arith.mulf %782, %0 : f32
      %784 = arith.addf %783, %1 : f32
      affine.store %784, %arg5[0, 0, %arg6, %768] : memref<1x64x112x112xf32>
      %785 = affine.apply #map45(%c0)
      %786 = affine.load %arg4[0, 0, %arg6, %785] : memref<1x64x112x112xf32>
      %787 = arith.truncf %cst : f64 to f32
      %788 = arith.addf %3, %787 : f32
      %cst_182 = arith.constant 5.000000e-01 : f32
      %789 = arith.mulf %788, %cst_182 : f32
      %790 = arith.bitcast %788 : f32 to i32
      %c1_i32_183 = arith.constant 1 : i32
      %791 = arith.shrui %790, %c1_i32_183 : i32
      %c1597463007_i32_184 = arith.constant 1597463007 : i32
      %792 = arith.subi %c1597463007_i32_184, %791 : i32
      %793 = arith.bitcast %792 : i32 to f32
      %cst_185 = arith.constant 1.500000e+00 : f32
      %794 = arith.mulf %793, %793 : f32
      %795 = arith.mulf %794, %789 : f32
      %796 = arith.subf %cst_185, %795 : f32
      %797 = arith.mulf %796, %794 : f32
      %798 = arith.subf %786, %2 : f32
      %799 = arith.mulf %798, %797 : f32
      %800 = arith.mulf %799, %0 : f32
      %801 = arith.addf %800, %1 : f32
      affine.store %801, %arg5[0, 0, %arg6, %785] : memref<1x64x112x112xf32>
      %802 = affine.apply #map46(%c0)
      %803 = affine.load %arg4[0, 0, %arg6, %802] : memref<1x64x112x112xf32>
      %804 = arith.truncf %cst : f64 to f32
      %805 = arith.addf %3, %804 : f32
      %cst_186 = arith.constant 5.000000e-01 : f32
      %806 = arith.mulf %805, %cst_186 : f32
      %807 = arith.bitcast %805 : f32 to i32
      %c1_i32_187 = arith.constant 1 : i32
      %808 = arith.shrui %807, %c1_i32_187 : i32
      %c1597463007_i32_188 = arith.constant 1597463007 : i32
      %809 = arith.subi %c1597463007_i32_188, %808 : i32
      %810 = arith.bitcast %809 : i32 to f32
      %cst_189 = arith.constant 1.500000e+00 : f32
      %811 = arith.mulf %810, %810 : f32
      %812 = arith.mulf %811, %806 : f32
      %813 = arith.subf %cst_189, %812 : f32
      %814 = arith.mulf %813, %811 : f32
      %815 = arith.subf %803, %2 : f32
      %816 = arith.mulf %815, %814 : f32
      %817 = arith.mulf %816, %0 : f32
      %818 = arith.addf %817, %1 : f32
      affine.store %818, %arg5[0, 0, %arg6, %802] : memref<1x64x112x112xf32>
      %819 = affine.apply #map47(%c0)
      %820 = affine.load %arg4[0, 0, %arg6, %819] : memref<1x64x112x112xf32>
      %821 = arith.truncf %cst : f64 to f32
      %822 = arith.addf %3, %821 : f32
      %cst_190 = arith.constant 5.000000e-01 : f32
      %823 = arith.mulf %822, %cst_190 : f32
      %824 = arith.bitcast %822 : f32 to i32
      %c1_i32_191 = arith.constant 1 : i32
      %825 = arith.shrui %824, %c1_i32_191 : i32
      %c1597463007_i32_192 = arith.constant 1597463007 : i32
      %826 = arith.subi %c1597463007_i32_192, %825 : i32
      %827 = arith.bitcast %826 : i32 to f32
      %cst_193 = arith.constant 1.500000e+00 : f32
      %828 = arith.mulf %827, %827 : f32
      %829 = arith.mulf %828, %823 : f32
      %830 = arith.subf %cst_193, %829 : f32
      %831 = arith.mulf %830, %828 : f32
      %832 = arith.subf %820, %2 : f32
      %833 = arith.mulf %832, %831 : f32
      %834 = arith.mulf %833, %0 : f32
      %835 = arith.addf %834, %1 : f32
      affine.store %835, %arg5[0, 0, %arg6, %819] : memref<1x64x112x112xf32>
      %836 = affine.apply #map48(%c0)
      %837 = affine.load %arg4[0, 0, %arg6, %836] : memref<1x64x112x112xf32>
      %838 = arith.truncf %cst : f64 to f32
      %839 = arith.addf %3, %838 : f32
      %cst_194 = arith.constant 5.000000e-01 : f32
      %840 = arith.mulf %839, %cst_194 : f32
      %841 = arith.bitcast %839 : f32 to i32
      %c1_i32_195 = arith.constant 1 : i32
      %842 = arith.shrui %841, %c1_i32_195 : i32
      %c1597463007_i32_196 = arith.constant 1597463007 : i32
      %843 = arith.subi %c1597463007_i32_196, %842 : i32
      %844 = arith.bitcast %843 : i32 to f32
      %cst_197 = arith.constant 1.500000e+00 : f32
      %845 = arith.mulf %844, %844 : f32
      %846 = arith.mulf %845, %840 : f32
      %847 = arith.subf %cst_197, %846 : f32
      %848 = arith.mulf %847, %845 : f32
      %849 = arith.subf %837, %2 : f32
      %850 = arith.mulf %849, %848 : f32
      %851 = arith.mulf %850, %0 : f32
      %852 = arith.addf %851, %1 : f32
      affine.store %852, %arg5[0, 0, %arg6, %836] : memref<1x64x112x112xf32>
      %853 = affine.apply #map49(%c0)
      %854 = affine.load %arg4[0, 0, %arg6, %853] : memref<1x64x112x112xf32>
      %855 = arith.truncf %cst : f64 to f32
      %856 = arith.addf %3, %855 : f32
      %cst_198 = arith.constant 5.000000e-01 : f32
      %857 = arith.mulf %856, %cst_198 : f32
      %858 = arith.bitcast %856 : f32 to i32
      %c1_i32_199 = arith.constant 1 : i32
      %859 = arith.shrui %858, %c1_i32_199 : i32
      %c1597463007_i32_200 = arith.constant 1597463007 : i32
      %860 = arith.subi %c1597463007_i32_200, %859 : i32
      %861 = arith.bitcast %860 : i32 to f32
      %cst_201 = arith.constant 1.500000e+00 : f32
      %862 = arith.mulf %861, %861 : f32
      %863 = arith.mulf %862, %857 : f32
      %864 = arith.subf %cst_201, %863 : f32
      %865 = arith.mulf %864, %862 : f32
      %866 = arith.subf %854, %2 : f32
      %867 = arith.mulf %866, %865 : f32
      %868 = arith.mulf %867, %0 : f32
      %869 = arith.addf %868, %1 : f32
      affine.store %869, %arg5[0, 0, %arg6, %853] : memref<1x64x112x112xf32>
      %870 = affine.apply #map50(%c0)
      %871 = affine.load %arg4[0, 0, %arg6, %870] : memref<1x64x112x112xf32>
      %872 = arith.truncf %cst : f64 to f32
      %873 = arith.addf %3, %872 : f32
      %cst_202 = arith.constant 5.000000e-01 : f32
      %874 = arith.mulf %873, %cst_202 : f32
      %875 = arith.bitcast %873 : f32 to i32
      %c1_i32_203 = arith.constant 1 : i32
      %876 = arith.shrui %875, %c1_i32_203 : i32
      %c1597463007_i32_204 = arith.constant 1597463007 : i32
      %877 = arith.subi %c1597463007_i32_204, %876 : i32
      %878 = arith.bitcast %877 : i32 to f32
      %cst_205 = arith.constant 1.500000e+00 : f32
      %879 = arith.mulf %878, %878 : f32
      %880 = arith.mulf %879, %874 : f32
      %881 = arith.subf %cst_205, %880 : f32
      %882 = arith.mulf %881, %879 : f32
      %883 = arith.subf %871, %2 : f32
      %884 = arith.mulf %883, %882 : f32
      %885 = arith.mulf %884, %0 : f32
      %886 = arith.addf %885, %1 : f32
      affine.store %886, %arg5[0, 0, %arg6, %870] : memref<1x64x112x112xf32>
      %887 = affine.apply #map51(%c0)
      %888 = affine.load %arg4[0, 0, %arg6, %887] : memref<1x64x112x112xf32>
      %889 = arith.truncf %cst : f64 to f32
      %890 = arith.addf %3, %889 : f32
      %cst_206 = arith.constant 5.000000e-01 : f32
      %891 = arith.mulf %890, %cst_206 : f32
      %892 = arith.bitcast %890 : f32 to i32
      %c1_i32_207 = arith.constant 1 : i32
      %893 = arith.shrui %892, %c1_i32_207 : i32
      %c1597463007_i32_208 = arith.constant 1597463007 : i32
      %894 = arith.subi %c1597463007_i32_208, %893 : i32
      %895 = arith.bitcast %894 : i32 to f32
      %cst_209 = arith.constant 1.500000e+00 : f32
      %896 = arith.mulf %895, %895 : f32
      %897 = arith.mulf %896, %891 : f32
      %898 = arith.subf %cst_209, %897 : f32
      %899 = arith.mulf %898, %896 : f32
      %900 = arith.subf %888, %2 : f32
      %901 = arith.mulf %900, %899 : f32
      %902 = arith.mulf %901, %0 : f32
      %903 = arith.addf %902, %1 : f32
      affine.store %903, %arg5[0, 0, %arg6, %887] : memref<1x64x112x112xf32>
      %904 = affine.apply #map52(%c0)
      %905 = affine.load %arg4[0, 0, %arg6, %904] : memref<1x64x112x112xf32>
      %906 = arith.truncf %cst : f64 to f32
      %907 = arith.addf %3, %906 : f32
      %cst_210 = arith.constant 5.000000e-01 : f32
      %908 = arith.mulf %907, %cst_210 : f32
      %909 = arith.bitcast %907 : f32 to i32
      %c1_i32_211 = arith.constant 1 : i32
      %910 = arith.shrui %909, %c1_i32_211 : i32
      %c1597463007_i32_212 = arith.constant 1597463007 : i32
      %911 = arith.subi %c1597463007_i32_212, %910 : i32
      %912 = arith.bitcast %911 : i32 to f32
      %cst_213 = arith.constant 1.500000e+00 : f32
      %913 = arith.mulf %912, %912 : f32
      %914 = arith.mulf %913, %908 : f32
      %915 = arith.subf %cst_213, %914 : f32
      %916 = arith.mulf %915, %913 : f32
      %917 = arith.subf %905, %2 : f32
      %918 = arith.mulf %917, %916 : f32
      %919 = arith.mulf %918, %0 : f32
      %920 = arith.addf %919, %1 : f32
      affine.store %920, %arg5[0, 0, %arg6, %904] : memref<1x64x112x112xf32>
      %921 = affine.apply #map53(%c0)
      %922 = affine.load %arg4[0, 0, %arg6, %921] : memref<1x64x112x112xf32>
      %923 = arith.truncf %cst : f64 to f32
      %924 = arith.addf %3, %923 : f32
      %cst_214 = arith.constant 5.000000e-01 : f32
      %925 = arith.mulf %924, %cst_214 : f32
      %926 = arith.bitcast %924 : f32 to i32
      %c1_i32_215 = arith.constant 1 : i32
      %927 = arith.shrui %926, %c1_i32_215 : i32
      %c1597463007_i32_216 = arith.constant 1597463007 : i32
      %928 = arith.subi %c1597463007_i32_216, %927 : i32
      %929 = arith.bitcast %928 : i32 to f32
      %cst_217 = arith.constant 1.500000e+00 : f32
      %930 = arith.mulf %929, %929 : f32
      %931 = arith.mulf %930, %925 : f32
      %932 = arith.subf %cst_217, %931 : f32
      %933 = arith.mulf %932, %930 : f32
      %934 = arith.subf %922, %2 : f32
      %935 = arith.mulf %934, %933 : f32
      %936 = arith.mulf %935, %0 : f32
      %937 = arith.addf %936, %1 : f32
      affine.store %937, %arg5[0, 0, %arg6, %921] : memref<1x64x112x112xf32>
      %938 = affine.apply #map54(%c0)
      %939 = affine.load %arg4[0, 0, %arg6, %938] : memref<1x64x112x112xf32>
      %940 = arith.truncf %cst : f64 to f32
      %941 = arith.addf %3, %940 : f32
      %cst_218 = arith.constant 5.000000e-01 : f32
      %942 = arith.mulf %941, %cst_218 : f32
      %943 = arith.bitcast %941 : f32 to i32
      %c1_i32_219 = arith.constant 1 : i32
      %944 = arith.shrui %943, %c1_i32_219 : i32
      %c1597463007_i32_220 = arith.constant 1597463007 : i32
      %945 = arith.subi %c1597463007_i32_220, %944 : i32
      %946 = arith.bitcast %945 : i32 to f32
      %cst_221 = arith.constant 1.500000e+00 : f32
      %947 = arith.mulf %946, %946 : f32
      %948 = arith.mulf %947, %942 : f32
      %949 = arith.subf %cst_221, %948 : f32
      %950 = arith.mulf %949, %947 : f32
      %951 = arith.subf %939, %2 : f32
      %952 = arith.mulf %951, %950 : f32
      %953 = arith.mulf %952, %0 : f32
      %954 = arith.addf %953, %1 : f32
      affine.store %954, %arg5[0, 0, %arg6, %938] : memref<1x64x112x112xf32>
      %955 = affine.apply #map55(%c0)
      %956 = affine.load %arg4[0, 0, %arg6, %955] : memref<1x64x112x112xf32>
      %957 = arith.truncf %cst : f64 to f32
      %958 = arith.addf %3, %957 : f32
      %cst_222 = arith.constant 5.000000e-01 : f32
      %959 = arith.mulf %958, %cst_222 : f32
      %960 = arith.bitcast %958 : f32 to i32
      %c1_i32_223 = arith.constant 1 : i32
      %961 = arith.shrui %960, %c1_i32_223 : i32
      %c1597463007_i32_224 = arith.constant 1597463007 : i32
      %962 = arith.subi %c1597463007_i32_224, %961 : i32
      %963 = arith.bitcast %962 : i32 to f32
      %cst_225 = arith.constant 1.500000e+00 : f32
      %964 = arith.mulf %963, %963 : f32
      %965 = arith.mulf %964, %959 : f32
      %966 = arith.subf %cst_225, %965 : f32
      %967 = arith.mulf %966, %964 : f32
      %968 = arith.subf %956, %2 : f32
      %969 = arith.mulf %968, %967 : f32
      %970 = arith.mulf %969, %0 : f32
      %971 = arith.addf %970, %1 : f32
      affine.store %971, %arg5[0, 0, %arg6, %955] : memref<1x64x112x112xf32>
      %972 = affine.apply #map56(%c0)
      %973 = affine.load %arg4[0, 0, %arg6, %972] : memref<1x64x112x112xf32>
      %974 = arith.truncf %cst : f64 to f32
      %975 = arith.addf %3, %974 : f32
      %cst_226 = arith.constant 5.000000e-01 : f32
      %976 = arith.mulf %975, %cst_226 : f32
      %977 = arith.bitcast %975 : f32 to i32
      %c1_i32_227 = arith.constant 1 : i32
      %978 = arith.shrui %977, %c1_i32_227 : i32
      %c1597463007_i32_228 = arith.constant 1597463007 : i32
      %979 = arith.subi %c1597463007_i32_228, %978 : i32
      %980 = arith.bitcast %979 : i32 to f32
      %cst_229 = arith.constant 1.500000e+00 : f32
      %981 = arith.mulf %980, %980 : f32
      %982 = arith.mulf %981, %976 : f32
      %983 = arith.subf %cst_229, %982 : f32
      %984 = arith.mulf %983, %981 : f32
      %985 = arith.subf %973, %2 : f32
      %986 = arith.mulf %985, %984 : f32
      %987 = arith.mulf %986, %0 : f32
      %988 = arith.addf %987, %1 : f32
      affine.store %988, %arg5[0, 0, %arg6, %972] : memref<1x64x112x112xf32>
      %989 = affine.apply #map57(%c0)
      %990 = affine.load %arg4[0, 0, %arg6, %989] : memref<1x64x112x112xf32>
      %991 = arith.truncf %cst : f64 to f32
      %992 = arith.addf %3, %991 : f32
      %cst_230 = arith.constant 5.000000e-01 : f32
      %993 = arith.mulf %992, %cst_230 : f32
      %994 = arith.bitcast %992 : f32 to i32
      %c1_i32_231 = arith.constant 1 : i32
      %995 = arith.shrui %994, %c1_i32_231 : i32
      %c1597463007_i32_232 = arith.constant 1597463007 : i32
      %996 = arith.subi %c1597463007_i32_232, %995 : i32
      %997 = arith.bitcast %996 : i32 to f32
      %cst_233 = arith.constant 1.500000e+00 : f32
      %998 = arith.mulf %997, %997 : f32
      %999 = arith.mulf %998, %993 : f32
      %1000 = arith.subf %cst_233, %999 : f32
      %1001 = arith.mulf %1000, %998 : f32
      %1002 = arith.subf %990, %2 : f32
      %1003 = arith.mulf %1002, %1001 : f32
      %1004 = arith.mulf %1003, %0 : f32
      %1005 = arith.addf %1004, %1 : f32
      affine.store %1005, %arg5[0, 0, %arg6, %989] : memref<1x64x112x112xf32>
      %1006 = affine.apply #map58(%c0)
      %1007 = affine.load %arg4[0, 0, %arg6, %1006] : memref<1x64x112x112xf32>
      %1008 = arith.truncf %cst : f64 to f32
      %1009 = arith.addf %3, %1008 : f32
      %cst_234 = arith.constant 5.000000e-01 : f32
      %1010 = arith.mulf %1009, %cst_234 : f32
      %1011 = arith.bitcast %1009 : f32 to i32
      %c1_i32_235 = arith.constant 1 : i32
      %1012 = arith.shrui %1011, %c1_i32_235 : i32
      %c1597463007_i32_236 = arith.constant 1597463007 : i32
      %1013 = arith.subi %c1597463007_i32_236, %1012 : i32
      %1014 = arith.bitcast %1013 : i32 to f32
      %cst_237 = arith.constant 1.500000e+00 : f32
      %1015 = arith.mulf %1014, %1014 : f32
      %1016 = arith.mulf %1015, %1010 : f32
      %1017 = arith.subf %cst_237, %1016 : f32
      %1018 = arith.mulf %1017, %1015 : f32
      %1019 = arith.subf %1007, %2 : f32
      %1020 = arith.mulf %1019, %1018 : f32
      %1021 = arith.mulf %1020, %0 : f32
      %1022 = arith.addf %1021, %1 : f32
      affine.store %1022, %arg5[0, 0, %arg6, %1006] : memref<1x64x112x112xf32>
      %1023 = affine.apply #map59(%c0)
      %1024 = affine.load %arg4[0, 0, %arg6, %1023] : memref<1x64x112x112xf32>
      %1025 = arith.truncf %cst : f64 to f32
      %1026 = arith.addf %3, %1025 : f32
      %cst_238 = arith.constant 5.000000e-01 : f32
      %1027 = arith.mulf %1026, %cst_238 : f32
      %1028 = arith.bitcast %1026 : f32 to i32
      %c1_i32_239 = arith.constant 1 : i32
      %1029 = arith.shrui %1028, %c1_i32_239 : i32
      %c1597463007_i32_240 = arith.constant 1597463007 : i32
      %1030 = arith.subi %c1597463007_i32_240, %1029 : i32
      %1031 = arith.bitcast %1030 : i32 to f32
      %cst_241 = arith.constant 1.500000e+00 : f32
      %1032 = arith.mulf %1031, %1031 : f32
      %1033 = arith.mulf %1032, %1027 : f32
      %1034 = arith.subf %cst_241, %1033 : f32
      %1035 = arith.mulf %1034, %1032 : f32
      %1036 = arith.subf %1024, %2 : f32
      %1037 = arith.mulf %1036, %1035 : f32
      %1038 = arith.mulf %1037, %0 : f32
      %1039 = arith.addf %1038, %1 : f32
      affine.store %1039, %arg5[0, 0, %arg6, %1023] : memref<1x64x112x112xf32>
      %1040 = affine.apply #map60(%c0)
      %1041 = affine.load %arg4[0, 0, %arg6, %1040] : memref<1x64x112x112xf32>
      %1042 = arith.truncf %cst : f64 to f32
      %1043 = arith.addf %3, %1042 : f32
      %cst_242 = arith.constant 5.000000e-01 : f32
      %1044 = arith.mulf %1043, %cst_242 : f32
      %1045 = arith.bitcast %1043 : f32 to i32
      %c1_i32_243 = arith.constant 1 : i32
      %1046 = arith.shrui %1045, %c1_i32_243 : i32
      %c1597463007_i32_244 = arith.constant 1597463007 : i32
      %1047 = arith.subi %c1597463007_i32_244, %1046 : i32
      %1048 = arith.bitcast %1047 : i32 to f32
      %cst_245 = arith.constant 1.500000e+00 : f32
      %1049 = arith.mulf %1048, %1048 : f32
      %1050 = arith.mulf %1049, %1044 : f32
      %1051 = arith.subf %cst_245, %1050 : f32
      %1052 = arith.mulf %1051, %1049 : f32
      %1053 = arith.subf %1041, %2 : f32
      %1054 = arith.mulf %1053, %1052 : f32
      %1055 = arith.mulf %1054, %0 : f32
      %1056 = arith.addf %1055, %1 : f32
      affine.store %1056, %arg5[0, 0, %arg6, %1040] : memref<1x64x112x112xf32>
      %1057 = affine.apply #map61(%c0)
      %1058 = affine.load %arg4[0, 0, %arg6, %1057] : memref<1x64x112x112xf32>
      %1059 = arith.truncf %cst : f64 to f32
      %1060 = arith.addf %3, %1059 : f32
      %cst_246 = arith.constant 5.000000e-01 : f32
      %1061 = arith.mulf %1060, %cst_246 : f32
      %1062 = arith.bitcast %1060 : f32 to i32
      %c1_i32_247 = arith.constant 1 : i32
      %1063 = arith.shrui %1062, %c1_i32_247 : i32
      %c1597463007_i32_248 = arith.constant 1597463007 : i32
      %1064 = arith.subi %c1597463007_i32_248, %1063 : i32
      %1065 = arith.bitcast %1064 : i32 to f32
      %cst_249 = arith.constant 1.500000e+00 : f32
      %1066 = arith.mulf %1065, %1065 : f32
      %1067 = arith.mulf %1066, %1061 : f32
      %1068 = arith.subf %cst_249, %1067 : f32
      %1069 = arith.mulf %1068, %1066 : f32
      %1070 = arith.subf %1058, %2 : f32
      %1071 = arith.mulf %1070, %1069 : f32
      %1072 = arith.mulf %1071, %0 : f32
      %1073 = arith.addf %1072, %1 : f32
      affine.store %1073, %arg5[0, 0, %arg6, %1057] : memref<1x64x112x112xf32>
      %1074 = affine.apply #map62(%c0)
      %1075 = affine.load %arg4[0, 0, %arg6, %1074] : memref<1x64x112x112xf32>
      %1076 = arith.truncf %cst : f64 to f32
      %1077 = arith.addf %3, %1076 : f32
      %cst_250 = arith.constant 5.000000e-01 : f32
      %1078 = arith.mulf %1077, %cst_250 : f32
      %1079 = arith.bitcast %1077 : f32 to i32
      %c1_i32_251 = arith.constant 1 : i32
      %1080 = arith.shrui %1079, %c1_i32_251 : i32
      %c1597463007_i32_252 = arith.constant 1597463007 : i32
      %1081 = arith.subi %c1597463007_i32_252, %1080 : i32
      %1082 = arith.bitcast %1081 : i32 to f32
      %cst_253 = arith.constant 1.500000e+00 : f32
      %1083 = arith.mulf %1082, %1082 : f32
      %1084 = arith.mulf %1083, %1078 : f32
      %1085 = arith.subf %cst_253, %1084 : f32
      %1086 = arith.mulf %1085, %1083 : f32
      %1087 = arith.subf %1075, %2 : f32
      %1088 = arith.mulf %1087, %1086 : f32
      %1089 = arith.mulf %1088, %0 : f32
      %1090 = arith.addf %1089, %1 : f32
      affine.store %1090, %arg5[0, 0, %arg6, %1074] : memref<1x64x112x112xf32>
      %1091 = affine.apply #map63(%c0)
      %1092 = affine.load %arg4[0, 0, %arg6, %1091] : memref<1x64x112x112xf32>
      %1093 = arith.truncf %cst : f64 to f32
      %1094 = arith.addf %3, %1093 : f32
      %cst_254 = arith.constant 5.000000e-01 : f32
      %1095 = arith.mulf %1094, %cst_254 : f32
      %1096 = arith.bitcast %1094 : f32 to i32
      %c1_i32_255 = arith.constant 1 : i32
      %1097 = arith.shrui %1096, %c1_i32_255 : i32
      %c1597463007_i32_256 = arith.constant 1597463007 : i32
      %1098 = arith.subi %c1597463007_i32_256, %1097 : i32
      %1099 = arith.bitcast %1098 : i32 to f32
      %cst_257 = arith.constant 1.500000e+00 : f32
      %1100 = arith.mulf %1099, %1099 : f32
      %1101 = arith.mulf %1100, %1095 : f32
      %1102 = arith.subf %cst_257, %1101 : f32
      %1103 = arith.mulf %1102, %1100 : f32
      %1104 = arith.subf %1092, %2 : f32
      %1105 = arith.mulf %1104, %1103 : f32
      %1106 = arith.mulf %1105, %0 : f32
      %1107 = arith.addf %1106, %1 : f32
      affine.store %1107, %arg5[0, 0, %arg6, %1091] : memref<1x64x112x112xf32>
      %1108 = affine.apply #map64(%c0)
      %1109 = affine.load %arg4[0, 0, %arg6, %1108] : memref<1x64x112x112xf32>
      %1110 = arith.truncf %cst : f64 to f32
      %1111 = arith.addf %3, %1110 : f32
      %cst_258 = arith.constant 5.000000e-01 : f32
      %1112 = arith.mulf %1111, %cst_258 : f32
      %1113 = arith.bitcast %1111 : f32 to i32
      %c1_i32_259 = arith.constant 1 : i32
      %1114 = arith.shrui %1113, %c1_i32_259 : i32
      %c1597463007_i32_260 = arith.constant 1597463007 : i32
      %1115 = arith.subi %c1597463007_i32_260, %1114 : i32
      %1116 = arith.bitcast %1115 : i32 to f32
      %cst_261 = arith.constant 1.500000e+00 : f32
      %1117 = arith.mulf %1116, %1116 : f32
      %1118 = arith.mulf %1117, %1112 : f32
      %1119 = arith.subf %cst_261, %1118 : f32
      %1120 = arith.mulf %1119, %1117 : f32
      %1121 = arith.subf %1109, %2 : f32
      %1122 = arith.mulf %1121, %1120 : f32
      %1123 = arith.mulf %1122, %0 : f32
      %1124 = arith.addf %1123, %1 : f32
      affine.store %1124, %arg5[0, 0, %arg6, %1108] : memref<1x64x112x112xf32>
      %1125 = affine.apply #map65(%c0)
      %1126 = affine.load %arg4[0, 0, %arg6, %1125] : memref<1x64x112x112xf32>
      %1127 = arith.truncf %cst : f64 to f32
      %1128 = arith.addf %3, %1127 : f32
      %cst_262 = arith.constant 5.000000e-01 : f32
      %1129 = arith.mulf %1128, %cst_262 : f32
      %1130 = arith.bitcast %1128 : f32 to i32
      %c1_i32_263 = arith.constant 1 : i32
      %1131 = arith.shrui %1130, %c1_i32_263 : i32
      %c1597463007_i32_264 = arith.constant 1597463007 : i32
      %1132 = arith.subi %c1597463007_i32_264, %1131 : i32
      %1133 = arith.bitcast %1132 : i32 to f32
      %cst_265 = arith.constant 1.500000e+00 : f32
      %1134 = arith.mulf %1133, %1133 : f32
      %1135 = arith.mulf %1134, %1129 : f32
      %1136 = arith.subf %cst_265, %1135 : f32
      %1137 = arith.mulf %1136, %1134 : f32
      %1138 = arith.subf %1126, %2 : f32
      %1139 = arith.mulf %1138, %1137 : f32
      %1140 = arith.mulf %1139, %0 : f32
      %1141 = arith.addf %1140, %1 : f32
      affine.store %1141, %arg5[0, 0, %arg6, %1125] : memref<1x64x112x112xf32>
      %1142 = affine.apply #map66(%c0)
      %1143 = affine.load %arg4[0, 0, %arg6, %1142] : memref<1x64x112x112xf32>
      %1144 = arith.truncf %cst : f64 to f32
      %1145 = arith.addf %3, %1144 : f32
      %cst_266 = arith.constant 5.000000e-01 : f32
      %1146 = arith.mulf %1145, %cst_266 : f32
      %1147 = arith.bitcast %1145 : f32 to i32
      %c1_i32_267 = arith.constant 1 : i32
      %1148 = arith.shrui %1147, %c1_i32_267 : i32
      %c1597463007_i32_268 = arith.constant 1597463007 : i32
      %1149 = arith.subi %c1597463007_i32_268, %1148 : i32
      %1150 = arith.bitcast %1149 : i32 to f32
      %cst_269 = arith.constant 1.500000e+00 : f32
      %1151 = arith.mulf %1150, %1150 : f32
      %1152 = arith.mulf %1151, %1146 : f32
      %1153 = arith.subf %cst_269, %1152 : f32
      %1154 = arith.mulf %1153, %1151 : f32
      %1155 = arith.subf %1143, %2 : f32
      %1156 = arith.mulf %1155, %1154 : f32
      %1157 = arith.mulf %1156, %0 : f32
      %1158 = arith.addf %1157, %1 : f32
      affine.store %1158, %arg5[0, 0, %arg6, %1142] : memref<1x64x112x112xf32>
      %1159 = affine.apply #map67(%c0)
      %1160 = affine.load %arg4[0, 0, %arg6, %1159] : memref<1x64x112x112xf32>
      %1161 = arith.truncf %cst : f64 to f32
      %1162 = arith.addf %3, %1161 : f32
      %cst_270 = arith.constant 5.000000e-01 : f32
      %1163 = arith.mulf %1162, %cst_270 : f32
      %1164 = arith.bitcast %1162 : f32 to i32
      %c1_i32_271 = arith.constant 1 : i32
      %1165 = arith.shrui %1164, %c1_i32_271 : i32
      %c1597463007_i32_272 = arith.constant 1597463007 : i32
      %1166 = arith.subi %c1597463007_i32_272, %1165 : i32
      %1167 = arith.bitcast %1166 : i32 to f32
      %cst_273 = arith.constant 1.500000e+00 : f32
      %1168 = arith.mulf %1167, %1167 : f32
      %1169 = arith.mulf %1168, %1163 : f32
      %1170 = arith.subf %cst_273, %1169 : f32
      %1171 = arith.mulf %1170, %1168 : f32
      %1172 = arith.subf %1160, %2 : f32
      %1173 = arith.mulf %1172, %1171 : f32
      %1174 = arith.mulf %1173, %0 : f32
      %1175 = arith.addf %1174, %1 : f32
      affine.store %1175, %arg5[0, 0, %arg6, %1159] : memref<1x64x112x112xf32>
      %1176 = affine.apply #map68(%c0)
      %1177 = affine.load %arg4[0, 0, %arg6, %1176] : memref<1x64x112x112xf32>
      %1178 = arith.truncf %cst : f64 to f32
      %1179 = arith.addf %3, %1178 : f32
      %cst_274 = arith.constant 5.000000e-01 : f32
      %1180 = arith.mulf %1179, %cst_274 : f32
      %1181 = arith.bitcast %1179 : f32 to i32
      %c1_i32_275 = arith.constant 1 : i32
      %1182 = arith.shrui %1181, %c1_i32_275 : i32
      %c1597463007_i32_276 = arith.constant 1597463007 : i32
      %1183 = arith.subi %c1597463007_i32_276, %1182 : i32
      %1184 = arith.bitcast %1183 : i32 to f32
      %cst_277 = arith.constant 1.500000e+00 : f32
      %1185 = arith.mulf %1184, %1184 : f32
      %1186 = arith.mulf %1185, %1180 : f32
      %1187 = arith.subf %cst_277, %1186 : f32
      %1188 = arith.mulf %1187, %1185 : f32
      %1189 = arith.subf %1177, %2 : f32
      %1190 = arith.mulf %1189, %1188 : f32
      %1191 = arith.mulf %1190, %0 : f32
      %1192 = arith.addf %1191, %1 : f32
      affine.store %1192, %arg5[0, 0, %arg6, %1176] : memref<1x64x112x112xf32>
      %1193 = affine.apply #map69(%c0)
      %1194 = affine.load %arg4[0, 0, %arg6, %1193] : memref<1x64x112x112xf32>
      %1195 = arith.truncf %cst : f64 to f32
      %1196 = arith.addf %3, %1195 : f32
      %cst_278 = arith.constant 5.000000e-01 : f32
      %1197 = arith.mulf %1196, %cst_278 : f32
      %1198 = arith.bitcast %1196 : f32 to i32
      %c1_i32_279 = arith.constant 1 : i32
      %1199 = arith.shrui %1198, %c1_i32_279 : i32
      %c1597463007_i32_280 = arith.constant 1597463007 : i32
      %1200 = arith.subi %c1597463007_i32_280, %1199 : i32
      %1201 = arith.bitcast %1200 : i32 to f32
      %cst_281 = arith.constant 1.500000e+00 : f32
      %1202 = arith.mulf %1201, %1201 : f32
      %1203 = arith.mulf %1202, %1197 : f32
      %1204 = arith.subf %cst_281, %1203 : f32
      %1205 = arith.mulf %1204, %1202 : f32
      %1206 = arith.subf %1194, %2 : f32
      %1207 = arith.mulf %1206, %1205 : f32
      %1208 = arith.mulf %1207, %0 : f32
      %1209 = arith.addf %1208, %1 : f32
      affine.store %1209, %arg5[0, 0, %arg6, %1193] : memref<1x64x112x112xf32>
      %1210 = affine.apply #map70(%c0)
      %1211 = affine.load %arg4[0, 0, %arg6, %1210] : memref<1x64x112x112xf32>
      %1212 = arith.truncf %cst : f64 to f32
      %1213 = arith.addf %3, %1212 : f32
      %cst_282 = arith.constant 5.000000e-01 : f32
      %1214 = arith.mulf %1213, %cst_282 : f32
      %1215 = arith.bitcast %1213 : f32 to i32
      %c1_i32_283 = arith.constant 1 : i32
      %1216 = arith.shrui %1215, %c1_i32_283 : i32
      %c1597463007_i32_284 = arith.constant 1597463007 : i32
      %1217 = arith.subi %c1597463007_i32_284, %1216 : i32
      %1218 = arith.bitcast %1217 : i32 to f32
      %cst_285 = arith.constant 1.500000e+00 : f32
      %1219 = arith.mulf %1218, %1218 : f32
      %1220 = arith.mulf %1219, %1214 : f32
      %1221 = arith.subf %cst_285, %1220 : f32
      %1222 = arith.mulf %1221, %1219 : f32
      %1223 = arith.subf %1211, %2 : f32
      %1224 = arith.mulf %1223, %1222 : f32
      %1225 = arith.mulf %1224, %0 : f32
      %1226 = arith.addf %1225, %1 : f32
      affine.store %1226, %arg5[0, 0, %arg6, %1210] : memref<1x64x112x112xf32>
      %1227 = affine.apply #map71(%c0)
      %1228 = affine.load %arg4[0, 0, %arg6, %1227] : memref<1x64x112x112xf32>
      %1229 = arith.truncf %cst : f64 to f32
      %1230 = arith.addf %3, %1229 : f32
      %cst_286 = arith.constant 5.000000e-01 : f32
      %1231 = arith.mulf %1230, %cst_286 : f32
      %1232 = arith.bitcast %1230 : f32 to i32
      %c1_i32_287 = arith.constant 1 : i32
      %1233 = arith.shrui %1232, %c1_i32_287 : i32
      %c1597463007_i32_288 = arith.constant 1597463007 : i32
      %1234 = arith.subi %c1597463007_i32_288, %1233 : i32
      %1235 = arith.bitcast %1234 : i32 to f32
      %cst_289 = arith.constant 1.500000e+00 : f32
      %1236 = arith.mulf %1235, %1235 : f32
      %1237 = arith.mulf %1236, %1231 : f32
      %1238 = arith.subf %cst_289, %1237 : f32
      %1239 = arith.mulf %1238, %1236 : f32
      %1240 = arith.subf %1228, %2 : f32
      %1241 = arith.mulf %1240, %1239 : f32
      %1242 = arith.mulf %1241, %0 : f32
      %1243 = arith.addf %1242, %1 : f32
      affine.store %1243, %arg5[0, 0, %arg6, %1227] : memref<1x64x112x112xf32>
      %1244 = affine.apply #map72(%c0)
      %1245 = affine.load %arg4[0, 0, %arg6, %1244] : memref<1x64x112x112xf32>
      %1246 = arith.truncf %cst : f64 to f32
      %1247 = arith.addf %3, %1246 : f32
      %cst_290 = arith.constant 5.000000e-01 : f32
      %1248 = arith.mulf %1247, %cst_290 : f32
      %1249 = arith.bitcast %1247 : f32 to i32
      %c1_i32_291 = arith.constant 1 : i32
      %1250 = arith.shrui %1249, %c1_i32_291 : i32
      %c1597463007_i32_292 = arith.constant 1597463007 : i32
      %1251 = arith.subi %c1597463007_i32_292, %1250 : i32
      %1252 = arith.bitcast %1251 : i32 to f32
      %cst_293 = arith.constant 1.500000e+00 : f32
      %1253 = arith.mulf %1252, %1252 : f32
      %1254 = arith.mulf %1253, %1248 : f32
      %1255 = arith.subf %cst_293, %1254 : f32
      %1256 = arith.mulf %1255, %1253 : f32
      %1257 = arith.subf %1245, %2 : f32
      %1258 = arith.mulf %1257, %1256 : f32
      %1259 = arith.mulf %1258, %0 : f32
      %1260 = arith.addf %1259, %1 : f32
      affine.store %1260, %arg5[0, 0, %arg6, %1244] : memref<1x64x112x112xf32>
      %1261 = affine.apply #map73(%c0)
      %1262 = affine.load %arg4[0, 0, %arg6, %1261] : memref<1x64x112x112xf32>
      %1263 = arith.truncf %cst : f64 to f32
      %1264 = arith.addf %3, %1263 : f32
      %cst_294 = arith.constant 5.000000e-01 : f32
      %1265 = arith.mulf %1264, %cst_294 : f32
      %1266 = arith.bitcast %1264 : f32 to i32
      %c1_i32_295 = arith.constant 1 : i32
      %1267 = arith.shrui %1266, %c1_i32_295 : i32
      %c1597463007_i32_296 = arith.constant 1597463007 : i32
      %1268 = arith.subi %c1597463007_i32_296, %1267 : i32
      %1269 = arith.bitcast %1268 : i32 to f32
      %cst_297 = arith.constant 1.500000e+00 : f32
      %1270 = arith.mulf %1269, %1269 : f32
      %1271 = arith.mulf %1270, %1265 : f32
      %1272 = arith.subf %cst_297, %1271 : f32
      %1273 = arith.mulf %1272, %1270 : f32
      %1274 = arith.subf %1262, %2 : f32
      %1275 = arith.mulf %1274, %1273 : f32
      %1276 = arith.mulf %1275, %0 : f32
      %1277 = arith.addf %1276, %1 : f32
      affine.store %1277, %arg5[0, 0, %arg6, %1261] : memref<1x64x112x112xf32>
      %1278 = affine.apply #map74(%c0)
      %1279 = affine.load %arg4[0, 0, %arg6, %1278] : memref<1x64x112x112xf32>
      %1280 = arith.truncf %cst : f64 to f32
      %1281 = arith.addf %3, %1280 : f32
      %cst_298 = arith.constant 5.000000e-01 : f32
      %1282 = arith.mulf %1281, %cst_298 : f32
      %1283 = arith.bitcast %1281 : f32 to i32
      %c1_i32_299 = arith.constant 1 : i32
      %1284 = arith.shrui %1283, %c1_i32_299 : i32
      %c1597463007_i32_300 = arith.constant 1597463007 : i32
      %1285 = arith.subi %c1597463007_i32_300, %1284 : i32
      %1286 = arith.bitcast %1285 : i32 to f32
      %cst_301 = arith.constant 1.500000e+00 : f32
      %1287 = arith.mulf %1286, %1286 : f32
      %1288 = arith.mulf %1287, %1282 : f32
      %1289 = arith.subf %cst_301, %1288 : f32
      %1290 = arith.mulf %1289, %1287 : f32
      %1291 = arith.subf %1279, %2 : f32
      %1292 = arith.mulf %1291, %1290 : f32
      %1293 = arith.mulf %1292, %0 : f32
      %1294 = arith.addf %1293, %1 : f32
      affine.store %1294, %arg5[0, 0, %arg6, %1278] : memref<1x64x112x112xf32>
      %1295 = affine.apply #map75(%c0)
      %1296 = affine.load %arg4[0, 0, %arg6, %1295] : memref<1x64x112x112xf32>
      %1297 = arith.truncf %cst : f64 to f32
      %1298 = arith.addf %3, %1297 : f32
      %cst_302 = arith.constant 5.000000e-01 : f32
      %1299 = arith.mulf %1298, %cst_302 : f32
      %1300 = arith.bitcast %1298 : f32 to i32
      %c1_i32_303 = arith.constant 1 : i32
      %1301 = arith.shrui %1300, %c1_i32_303 : i32
      %c1597463007_i32_304 = arith.constant 1597463007 : i32
      %1302 = arith.subi %c1597463007_i32_304, %1301 : i32
      %1303 = arith.bitcast %1302 : i32 to f32
      %cst_305 = arith.constant 1.500000e+00 : f32
      %1304 = arith.mulf %1303, %1303 : f32
      %1305 = arith.mulf %1304, %1299 : f32
      %1306 = arith.subf %cst_305, %1305 : f32
      %1307 = arith.mulf %1306, %1304 : f32
      %1308 = arith.subf %1296, %2 : f32
      %1309 = arith.mulf %1308, %1307 : f32
      %1310 = arith.mulf %1309, %0 : f32
      %1311 = arith.addf %1310, %1 : f32
      affine.store %1311, %arg5[0, 0, %arg6, %1295] : memref<1x64x112x112xf32>
      %1312 = affine.apply #map76(%c0)
      %1313 = affine.load %arg4[0, 0, %arg6, %1312] : memref<1x64x112x112xf32>
      %1314 = arith.truncf %cst : f64 to f32
      %1315 = arith.addf %3, %1314 : f32
      %cst_306 = arith.constant 5.000000e-01 : f32
      %1316 = arith.mulf %1315, %cst_306 : f32
      %1317 = arith.bitcast %1315 : f32 to i32
      %c1_i32_307 = arith.constant 1 : i32
      %1318 = arith.shrui %1317, %c1_i32_307 : i32
      %c1597463007_i32_308 = arith.constant 1597463007 : i32
      %1319 = arith.subi %c1597463007_i32_308, %1318 : i32
      %1320 = arith.bitcast %1319 : i32 to f32
      %cst_309 = arith.constant 1.500000e+00 : f32
      %1321 = arith.mulf %1320, %1320 : f32
      %1322 = arith.mulf %1321, %1316 : f32
      %1323 = arith.subf %cst_309, %1322 : f32
      %1324 = arith.mulf %1323, %1321 : f32
      %1325 = arith.subf %1313, %2 : f32
      %1326 = arith.mulf %1325, %1324 : f32
      %1327 = arith.mulf %1326, %0 : f32
      %1328 = arith.addf %1327, %1 : f32
      affine.store %1328, %arg5[0, 0, %arg6, %1312] : memref<1x64x112x112xf32>
      %1329 = affine.apply #map77(%c0)
      %1330 = affine.load %arg4[0, 0, %arg6, %1329] : memref<1x64x112x112xf32>
      %1331 = arith.truncf %cst : f64 to f32
      %1332 = arith.addf %3, %1331 : f32
      %cst_310 = arith.constant 5.000000e-01 : f32
      %1333 = arith.mulf %1332, %cst_310 : f32
      %1334 = arith.bitcast %1332 : f32 to i32
      %c1_i32_311 = arith.constant 1 : i32
      %1335 = arith.shrui %1334, %c1_i32_311 : i32
      %c1597463007_i32_312 = arith.constant 1597463007 : i32
      %1336 = arith.subi %c1597463007_i32_312, %1335 : i32
      %1337 = arith.bitcast %1336 : i32 to f32
      %cst_313 = arith.constant 1.500000e+00 : f32
      %1338 = arith.mulf %1337, %1337 : f32
      %1339 = arith.mulf %1338, %1333 : f32
      %1340 = arith.subf %cst_313, %1339 : f32
      %1341 = arith.mulf %1340, %1338 : f32
      %1342 = arith.subf %1330, %2 : f32
      %1343 = arith.mulf %1342, %1341 : f32
      %1344 = arith.mulf %1343, %0 : f32
      %1345 = arith.addf %1344, %1 : f32
      affine.store %1345, %arg5[0, 0, %arg6, %1329] : memref<1x64x112x112xf32>
      %1346 = affine.apply #map78(%c0)
      %1347 = affine.load %arg4[0, 0, %arg6, %1346] : memref<1x64x112x112xf32>
      %1348 = arith.truncf %cst : f64 to f32
      %1349 = arith.addf %3, %1348 : f32
      %cst_314 = arith.constant 5.000000e-01 : f32
      %1350 = arith.mulf %1349, %cst_314 : f32
      %1351 = arith.bitcast %1349 : f32 to i32
      %c1_i32_315 = arith.constant 1 : i32
      %1352 = arith.shrui %1351, %c1_i32_315 : i32
      %c1597463007_i32_316 = arith.constant 1597463007 : i32
      %1353 = arith.subi %c1597463007_i32_316, %1352 : i32
      %1354 = arith.bitcast %1353 : i32 to f32
      %cst_317 = arith.constant 1.500000e+00 : f32
      %1355 = arith.mulf %1354, %1354 : f32
      %1356 = arith.mulf %1355, %1350 : f32
      %1357 = arith.subf %cst_317, %1356 : f32
      %1358 = arith.mulf %1357, %1355 : f32
      %1359 = arith.subf %1347, %2 : f32
      %1360 = arith.mulf %1359, %1358 : f32
      %1361 = arith.mulf %1360, %0 : f32
      %1362 = arith.addf %1361, %1 : f32
      affine.store %1362, %arg5[0, 0, %arg6, %1346] : memref<1x64x112x112xf32>
      %1363 = affine.apply #map79(%c0)
      %1364 = affine.load %arg4[0, 0, %arg6, %1363] : memref<1x64x112x112xf32>
      %1365 = arith.truncf %cst : f64 to f32
      %1366 = arith.addf %3, %1365 : f32
      %cst_318 = arith.constant 5.000000e-01 : f32
      %1367 = arith.mulf %1366, %cst_318 : f32
      %1368 = arith.bitcast %1366 : f32 to i32
      %c1_i32_319 = arith.constant 1 : i32
      %1369 = arith.shrui %1368, %c1_i32_319 : i32
      %c1597463007_i32_320 = arith.constant 1597463007 : i32
      %1370 = arith.subi %c1597463007_i32_320, %1369 : i32
      %1371 = arith.bitcast %1370 : i32 to f32
      %cst_321 = arith.constant 1.500000e+00 : f32
      %1372 = arith.mulf %1371, %1371 : f32
      %1373 = arith.mulf %1372, %1367 : f32
      %1374 = arith.subf %cst_321, %1373 : f32
      %1375 = arith.mulf %1374, %1372 : f32
      %1376 = arith.subf %1364, %2 : f32
      %1377 = arith.mulf %1376, %1375 : f32
      %1378 = arith.mulf %1377, %0 : f32
      %1379 = arith.addf %1378, %1 : f32
      affine.store %1379, %arg5[0, 0, %arg6, %1363] : memref<1x64x112x112xf32>
      %1380 = affine.apply #map80(%c0)
      %1381 = affine.load %arg4[0, 0, %arg6, %1380] : memref<1x64x112x112xf32>
      %1382 = arith.truncf %cst : f64 to f32
      %1383 = arith.addf %3, %1382 : f32
      %cst_322 = arith.constant 5.000000e-01 : f32
      %1384 = arith.mulf %1383, %cst_322 : f32
      %1385 = arith.bitcast %1383 : f32 to i32
      %c1_i32_323 = arith.constant 1 : i32
      %1386 = arith.shrui %1385, %c1_i32_323 : i32
      %c1597463007_i32_324 = arith.constant 1597463007 : i32
      %1387 = arith.subi %c1597463007_i32_324, %1386 : i32
      %1388 = arith.bitcast %1387 : i32 to f32
      %cst_325 = arith.constant 1.500000e+00 : f32
      %1389 = arith.mulf %1388, %1388 : f32
      %1390 = arith.mulf %1389, %1384 : f32
      %1391 = arith.subf %cst_325, %1390 : f32
      %1392 = arith.mulf %1391, %1389 : f32
      %1393 = arith.subf %1381, %2 : f32
      %1394 = arith.mulf %1393, %1392 : f32
      %1395 = arith.mulf %1394, %0 : f32
      %1396 = arith.addf %1395, %1 : f32
      affine.store %1396, %arg5[0, 0, %arg6, %1380] : memref<1x64x112x112xf32>
      %1397 = affine.apply #map81(%c0)
      %1398 = affine.load %arg4[0, 0, %arg6, %1397] : memref<1x64x112x112xf32>
      %1399 = arith.truncf %cst : f64 to f32
      %1400 = arith.addf %3, %1399 : f32
      %cst_326 = arith.constant 5.000000e-01 : f32
      %1401 = arith.mulf %1400, %cst_326 : f32
      %1402 = arith.bitcast %1400 : f32 to i32
      %c1_i32_327 = arith.constant 1 : i32
      %1403 = arith.shrui %1402, %c1_i32_327 : i32
      %c1597463007_i32_328 = arith.constant 1597463007 : i32
      %1404 = arith.subi %c1597463007_i32_328, %1403 : i32
      %1405 = arith.bitcast %1404 : i32 to f32
      %cst_329 = arith.constant 1.500000e+00 : f32
      %1406 = arith.mulf %1405, %1405 : f32
      %1407 = arith.mulf %1406, %1401 : f32
      %1408 = arith.subf %cst_329, %1407 : f32
      %1409 = arith.mulf %1408, %1406 : f32
      %1410 = arith.subf %1398, %2 : f32
      %1411 = arith.mulf %1410, %1409 : f32
      %1412 = arith.mulf %1411, %0 : f32
      %1413 = arith.addf %1412, %1 : f32
      affine.store %1413, %arg5[0, 0, %arg6, %1397] : memref<1x64x112x112xf32>
      %1414 = affine.apply #map82(%c0)
      %1415 = affine.load %arg4[0, 0, %arg6, %1414] : memref<1x64x112x112xf32>
      %1416 = arith.truncf %cst : f64 to f32
      %1417 = arith.addf %3, %1416 : f32
      %cst_330 = arith.constant 5.000000e-01 : f32
      %1418 = arith.mulf %1417, %cst_330 : f32
      %1419 = arith.bitcast %1417 : f32 to i32
      %c1_i32_331 = arith.constant 1 : i32
      %1420 = arith.shrui %1419, %c1_i32_331 : i32
      %c1597463007_i32_332 = arith.constant 1597463007 : i32
      %1421 = arith.subi %c1597463007_i32_332, %1420 : i32
      %1422 = arith.bitcast %1421 : i32 to f32
      %cst_333 = arith.constant 1.500000e+00 : f32
      %1423 = arith.mulf %1422, %1422 : f32
      %1424 = arith.mulf %1423, %1418 : f32
      %1425 = arith.subf %cst_333, %1424 : f32
      %1426 = arith.mulf %1425, %1423 : f32
      %1427 = arith.subf %1415, %2 : f32
      %1428 = arith.mulf %1427, %1426 : f32
      %1429 = arith.mulf %1428, %0 : f32
      %1430 = arith.addf %1429, %1 : f32
      affine.store %1430, %arg5[0, 0, %arg6, %1414] : memref<1x64x112x112xf32>
      %1431 = affine.apply #map83(%c0)
      %1432 = affine.load %arg4[0, 0, %arg6, %1431] : memref<1x64x112x112xf32>
      %1433 = arith.truncf %cst : f64 to f32
      %1434 = arith.addf %3, %1433 : f32
      %cst_334 = arith.constant 5.000000e-01 : f32
      %1435 = arith.mulf %1434, %cst_334 : f32
      %1436 = arith.bitcast %1434 : f32 to i32
      %c1_i32_335 = arith.constant 1 : i32
      %1437 = arith.shrui %1436, %c1_i32_335 : i32
      %c1597463007_i32_336 = arith.constant 1597463007 : i32
      %1438 = arith.subi %c1597463007_i32_336, %1437 : i32
      %1439 = arith.bitcast %1438 : i32 to f32
      %cst_337 = arith.constant 1.500000e+00 : f32
      %1440 = arith.mulf %1439, %1439 : f32
      %1441 = arith.mulf %1440, %1435 : f32
      %1442 = arith.subf %cst_337, %1441 : f32
      %1443 = arith.mulf %1442, %1440 : f32
      %1444 = arith.subf %1432, %2 : f32
      %1445 = arith.mulf %1444, %1443 : f32
      %1446 = arith.mulf %1445, %0 : f32
      %1447 = arith.addf %1446, %1 : f32
      affine.store %1447, %arg5[0, 0, %arg6, %1431] : memref<1x64x112x112xf32>
      %1448 = affine.apply #map84(%c0)
      %1449 = affine.load %arg4[0, 0, %arg6, %1448] : memref<1x64x112x112xf32>
      %1450 = arith.truncf %cst : f64 to f32
      %1451 = arith.addf %3, %1450 : f32
      %cst_338 = arith.constant 5.000000e-01 : f32
      %1452 = arith.mulf %1451, %cst_338 : f32
      %1453 = arith.bitcast %1451 : f32 to i32
      %c1_i32_339 = arith.constant 1 : i32
      %1454 = arith.shrui %1453, %c1_i32_339 : i32
      %c1597463007_i32_340 = arith.constant 1597463007 : i32
      %1455 = arith.subi %c1597463007_i32_340, %1454 : i32
      %1456 = arith.bitcast %1455 : i32 to f32
      %cst_341 = arith.constant 1.500000e+00 : f32
      %1457 = arith.mulf %1456, %1456 : f32
      %1458 = arith.mulf %1457, %1452 : f32
      %1459 = arith.subf %cst_341, %1458 : f32
      %1460 = arith.mulf %1459, %1457 : f32
      %1461 = arith.subf %1449, %2 : f32
      %1462 = arith.mulf %1461, %1460 : f32
      %1463 = arith.mulf %1462, %0 : f32
      %1464 = arith.addf %1463, %1 : f32
      affine.store %1464, %arg5[0, 0, %arg6, %1448] : memref<1x64x112x112xf32>
      %1465 = affine.apply #map85(%c0)
      %1466 = affine.load %arg4[0, 0, %arg6, %1465] : memref<1x64x112x112xf32>
      %1467 = arith.truncf %cst : f64 to f32
      %1468 = arith.addf %3, %1467 : f32
      %cst_342 = arith.constant 5.000000e-01 : f32
      %1469 = arith.mulf %1468, %cst_342 : f32
      %1470 = arith.bitcast %1468 : f32 to i32
      %c1_i32_343 = arith.constant 1 : i32
      %1471 = arith.shrui %1470, %c1_i32_343 : i32
      %c1597463007_i32_344 = arith.constant 1597463007 : i32
      %1472 = arith.subi %c1597463007_i32_344, %1471 : i32
      %1473 = arith.bitcast %1472 : i32 to f32
      %cst_345 = arith.constant 1.500000e+00 : f32
      %1474 = arith.mulf %1473, %1473 : f32
      %1475 = arith.mulf %1474, %1469 : f32
      %1476 = arith.subf %cst_345, %1475 : f32
      %1477 = arith.mulf %1476, %1474 : f32
      %1478 = arith.subf %1466, %2 : f32
      %1479 = arith.mulf %1478, %1477 : f32
      %1480 = arith.mulf %1479, %0 : f32
      %1481 = arith.addf %1480, %1 : f32
      affine.store %1481, %arg5[0, 0, %arg6, %1465] : memref<1x64x112x112xf32>
      %1482 = affine.apply #map86(%c0)
      %1483 = affine.load %arg4[0, 0, %arg6, %1482] : memref<1x64x112x112xf32>
      %1484 = arith.truncf %cst : f64 to f32
      %1485 = arith.addf %3, %1484 : f32
      %cst_346 = arith.constant 5.000000e-01 : f32
      %1486 = arith.mulf %1485, %cst_346 : f32
      %1487 = arith.bitcast %1485 : f32 to i32
      %c1_i32_347 = arith.constant 1 : i32
      %1488 = arith.shrui %1487, %c1_i32_347 : i32
      %c1597463007_i32_348 = arith.constant 1597463007 : i32
      %1489 = arith.subi %c1597463007_i32_348, %1488 : i32
      %1490 = arith.bitcast %1489 : i32 to f32
      %cst_349 = arith.constant 1.500000e+00 : f32
      %1491 = arith.mulf %1490, %1490 : f32
      %1492 = arith.mulf %1491, %1486 : f32
      %1493 = arith.subf %cst_349, %1492 : f32
      %1494 = arith.mulf %1493, %1491 : f32
      %1495 = arith.subf %1483, %2 : f32
      %1496 = arith.mulf %1495, %1494 : f32
      %1497 = arith.mulf %1496, %0 : f32
      %1498 = arith.addf %1497, %1 : f32
      affine.store %1498, %arg5[0, 0, %arg6, %1482] : memref<1x64x112x112xf32>
      %1499 = affine.apply #map87(%c0)
      %1500 = affine.load %arg4[0, 0, %arg6, %1499] : memref<1x64x112x112xf32>
      %1501 = arith.truncf %cst : f64 to f32
      %1502 = arith.addf %3, %1501 : f32
      %cst_350 = arith.constant 5.000000e-01 : f32
      %1503 = arith.mulf %1502, %cst_350 : f32
      %1504 = arith.bitcast %1502 : f32 to i32
      %c1_i32_351 = arith.constant 1 : i32
      %1505 = arith.shrui %1504, %c1_i32_351 : i32
      %c1597463007_i32_352 = arith.constant 1597463007 : i32
      %1506 = arith.subi %c1597463007_i32_352, %1505 : i32
      %1507 = arith.bitcast %1506 : i32 to f32
      %cst_353 = arith.constant 1.500000e+00 : f32
      %1508 = arith.mulf %1507, %1507 : f32
      %1509 = arith.mulf %1508, %1503 : f32
      %1510 = arith.subf %cst_353, %1509 : f32
      %1511 = arith.mulf %1510, %1508 : f32
      %1512 = arith.subf %1500, %2 : f32
      %1513 = arith.mulf %1512, %1511 : f32
      %1514 = arith.mulf %1513, %0 : f32
      %1515 = arith.addf %1514, %1 : f32
      affine.store %1515, %arg5[0, 0, %arg6, %1499] : memref<1x64x112x112xf32>
      %1516 = affine.apply #map88(%c0)
      %1517 = affine.load %arg4[0, 0, %arg6, %1516] : memref<1x64x112x112xf32>
      %1518 = arith.truncf %cst : f64 to f32
      %1519 = arith.addf %3, %1518 : f32
      %cst_354 = arith.constant 5.000000e-01 : f32
      %1520 = arith.mulf %1519, %cst_354 : f32
      %1521 = arith.bitcast %1519 : f32 to i32
      %c1_i32_355 = arith.constant 1 : i32
      %1522 = arith.shrui %1521, %c1_i32_355 : i32
      %c1597463007_i32_356 = arith.constant 1597463007 : i32
      %1523 = arith.subi %c1597463007_i32_356, %1522 : i32
      %1524 = arith.bitcast %1523 : i32 to f32
      %cst_357 = arith.constant 1.500000e+00 : f32
      %1525 = arith.mulf %1524, %1524 : f32
      %1526 = arith.mulf %1525, %1520 : f32
      %1527 = arith.subf %cst_357, %1526 : f32
      %1528 = arith.mulf %1527, %1525 : f32
      %1529 = arith.subf %1517, %2 : f32
      %1530 = arith.mulf %1529, %1528 : f32
      %1531 = arith.mulf %1530, %0 : f32
      %1532 = arith.addf %1531, %1 : f32
      affine.store %1532, %arg5[0, 0, %arg6, %1516] : memref<1x64x112x112xf32>
      %1533 = affine.apply #map89(%c0)
      %1534 = affine.load %arg4[0, 0, %arg6, %1533] : memref<1x64x112x112xf32>
      %1535 = arith.truncf %cst : f64 to f32
      %1536 = arith.addf %3, %1535 : f32
      %cst_358 = arith.constant 5.000000e-01 : f32
      %1537 = arith.mulf %1536, %cst_358 : f32
      %1538 = arith.bitcast %1536 : f32 to i32
      %c1_i32_359 = arith.constant 1 : i32
      %1539 = arith.shrui %1538, %c1_i32_359 : i32
      %c1597463007_i32_360 = arith.constant 1597463007 : i32
      %1540 = arith.subi %c1597463007_i32_360, %1539 : i32
      %1541 = arith.bitcast %1540 : i32 to f32
      %cst_361 = arith.constant 1.500000e+00 : f32
      %1542 = arith.mulf %1541, %1541 : f32
      %1543 = arith.mulf %1542, %1537 : f32
      %1544 = arith.subf %cst_361, %1543 : f32
      %1545 = arith.mulf %1544, %1542 : f32
      %1546 = arith.subf %1534, %2 : f32
      %1547 = arith.mulf %1546, %1545 : f32
      %1548 = arith.mulf %1547, %0 : f32
      %1549 = arith.addf %1548, %1 : f32
      affine.store %1549, %arg5[0, 0, %arg6, %1533] : memref<1x64x112x112xf32>
      %1550 = affine.apply #map90(%c0)
      %1551 = affine.load %arg4[0, 0, %arg6, %1550] : memref<1x64x112x112xf32>
      %1552 = arith.truncf %cst : f64 to f32
      %1553 = arith.addf %3, %1552 : f32
      %cst_362 = arith.constant 5.000000e-01 : f32
      %1554 = arith.mulf %1553, %cst_362 : f32
      %1555 = arith.bitcast %1553 : f32 to i32
      %c1_i32_363 = arith.constant 1 : i32
      %1556 = arith.shrui %1555, %c1_i32_363 : i32
      %c1597463007_i32_364 = arith.constant 1597463007 : i32
      %1557 = arith.subi %c1597463007_i32_364, %1556 : i32
      %1558 = arith.bitcast %1557 : i32 to f32
      %cst_365 = arith.constant 1.500000e+00 : f32
      %1559 = arith.mulf %1558, %1558 : f32
      %1560 = arith.mulf %1559, %1554 : f32
      %1561 = arith.subf %cst_365, %1560 : f32
      %1562 = arith.mulf %1561, %1559 : f32
      %1563 = arith.subf %1551, %2 : f32
      %1564 = arith.mulf %1563, %1562 : f32
      %1565 = arith.mulf %1564, %0 : f32
      %1566 = arith.addf %1565, %1 : f32
      affine.store %1566, %arg5[0, 0, %arg6, %1550] : memref<1x64x112x112xf32>
      %1567 = affine.apply #map91(%c0)
      %1568 = affine.load %arg4[0, 0, %arg6, %1567] : memref<1x64x112x112xf32>
      %1569 = arith.truncf %cst : f64 to f32
      %1570 = arith.addf %3, %1569 : f32
      %cst_366 = arith.constant 5.000000e-01 : f32
      %1571 = arith.mulf %1570, %cst_366 : f32
      %1572 = arith.bitcast %1570 : f32 to i32
      %c1_i32_367 = arith.constant 1 : i32
      %1573 = arith.shrui %1572, %c1_i32_367 : i32
      %c1597463007_i32_368 = arith.constant 1597463007 : i32
      %1574 = arith.subi %c1597463007_i32_368, %1573 : i32
      %1575 = arith.bitcast %1574 : i32 to f32
      %cst_369 = arith.constant 1.500000e+00 : f32
      %1576 = arith.mulf %1575, %1575 : f32
      %1577 = arith.mulf %1576, %1571 : f32
      %1578 = arith.subf %cst_369, %1577 : f32
      %1579 = arith.mulf %1578, %1576 : f32
      %1580 = arith.subf %1568, %2 : f32
      %1581 = arith.mulf %1580, %1579 : f32
      %1582 = arith.mulf %1581, %0 : f32
      %1583 = arith.addf %1582, %1 : f32
      affine.store %1583, %arg5[0, 0, %arg6, %1567] : memref<1x64x112x112xf32>
      %1584 = affine.apply #map92(%c0)
      %1585 = affine.load %arg4[0, 0, %arg6, %1584] : memref<1x64x112x112xf32>
      %1586 = arith.truncf %cst : f64 to f32
      %1587 = arith.addf %3, %1586 : f32
      %cst_370 = arith.constant 5.000000e-01 : f32
      %1588 = arith.mulf %1587, %cst_370 : f32
      %1589 = arith.bitcast %1587 : f32 to i32
      %c1_i32_371 = arith.constant 1 : i32
      %1590 = arith.shrui %1589, %c1_i32_371 : i32
      %c1597463007_i32_372 = arith.constant 1597463007 : i32
      %1591 = arith.subi %c1597463007_i32_372, %1590 : i32
      %1592 = arith.bitcast %1591 : i32 to f32
      %cst_373 = arith.constant 1.500000e+00 : f32
      %1593 = arith.mulf %1592, %1592 : f32
      %1594 = arith.mulf %1593, %1588 : f32
      %1595 = arith.subf %cst_373, %1594 : f32
      %1596 = arith.mulf %1595, %1593 : f32
      %1597 = arith.subf %1585, %2 : f32
      %1598 = arith.mulf %1597, %1596 : f32
      %1599 = arith.mulf %1598, %0 : f32
      %1600 = arith.addf %1599, %1 : f32
      affine.store %1600, %arg5[0, 0, %arg6, %1584] : memref<1x64x112x112xf32>
      %1601 = affine.apply #map93(%c0)
      %1602 = affine.load %arg4[0, 0, %arg6, %1601] : memref<1x64x112x112xf32>
      %1603 = arith.truncf %cst : f64 to f32
      %1604 = arith.addf %3, %1603 : f32
      %cst_374 = arith.constant 5.000000e-01 : f32
      %1605 = arith.mulf %1604, %cst_374 : f32
      %1606 = arith.bitcast %1604 : f32 to i32
      %c1_i32_375 = arith.constant 1 : i32
      %1607 = arith.shrui %1606, %c1_i32_375 : i32
      %c1597463007_i32_376 = arith.constant 1597463007 : i32
      %1608 = arith.subi %c1597463007_i32_376, %1607 : i32
      %1609 = arith.bitcast %1608 : i32 to f32
      %cst_377 = arith.constant 1.500000e+00 : f32
      %1610 = arith.mulf %1609, %1609 : f32
      %1611 = arith.mulf %1610, %1605 : f32
      %1612 = arith.subf %cst_377, %1611 : f32
      %1613 = arith.mulf %1612, %1610 : f32
      %1614 = arith.subf %1602, %2 : f32
      %1615 = arith.mulf %1614, %1613 : f32
      %1616 = arith.mulf %1615, %0 : f32
      %1617 = arith.addf %1616, %1 : f32
      affine.store %1617, %arg5[0, 0, %arg6, %1601] : memref<1x64x112x112xf32>
      %1618 = affine.apply #map94(%c0)
      %1619 = affine.load %arg4[0, 0, %arg6, %1618] : memref<1x64x112x112xf32>
      %1620 = arith.truncf %cst : f64 to f32
      %1621 = arith.addf %3, %1620 : f32
      %cst_378 = arith.constant 5.000000e-01 : f32
      %1622 = arith.mulf %1621, %cst_378 : f32
      %1623 = arith.bitcast %1621 : f32 to i32
      %c1_i32_379 = arith.constant 1 : i32
      %1624 = arith.shrui %1623, %c1_i32_379 : i32
      %c1597463007_i32_380 = arith.constant 1597463007 : i32
      %1625 = arith.subi %c1597463007_i32_380, %1624 : i32
      %1626 = arith.bitcast %1625 : i32 to f32
      %cst_381 = arith.constant 1.500000e+00 : f32
      %1627 = arith.mulf %1626, %1626 : f32
      %1628 = arith.mulf %1627, %1622 : f32
      %1629 = arith.subf %cst_381, %1628 : f32
      %1630 = arith.mulf %1629, %1627 : f32
      %1631 = arith.subf %1619, %2 : f32
      %1632 = arith.mulf %1631, %1630 : f32
      %1633 = arith.mulf %1632, %0 : f32
      %1634 = arith.addf %1633, %1 : f32
      affine.store %1634, %arg5[0, 0, %arg6, %1618] : memref<1x64x112x112xf32>
      %1635 = affine.apply #map95(%c0)
      %1636 = affine.load %arg4[0, 0, %arg6, %1635] : memref<1x64x112x112xf32>
      %1637 = arith.truncf %cst : f64 to f32
      %1638 = arith.addf %3, %1637 : f32
      %cst_382 = arith.constant 5.000000e-01 : f32
      %1639 = arith.mulf %1638, %cst_382 : f32
      %1640 = arith.bitcast %1638 : f32 to i32
      %c1_i32_383 = arith.constant 1 : i32
      %1641 = arith.shrui %1640, %c1_i32_383 : i32
      %c1597463007_i32_384 = arith.constant 1597463007 : i32
      %1642 = arith.subi %c1597463007_i32_384, %1641 : i32
      %1643 = arith.bitcast %1642 : i32 to f32
      %cst_385 = arith.constant 1.500000e+00 : f32
      %1644 = arith.mulf %1643, %1643 : f32
      %1645 = arith.mulf %1644, %1639 : f32
      %1646 = arith.subf %cst_385, %1645 : f32
      %1647 = arith.mulf %1646, %1644 : f32
      %1648 = arith.subf %1636, %2 : f32
      %1649 = arith.mulf %1648, %1647 : f32
      %1650 = arith.mulf %1649, %0 : f32
      %1651 = arith.addf %1650, %1 : f32
      affine.store %1651, %arg5[0, 0, %arg6, %1635] : memref<1x64x112x112xf32>
      %1652 = affine.apply #map96(%c0)
      %1653 = affine.load %arg4[0, 0, %arg6, %1652] : memref<1x64x112x112xf32>
      %1654 = arith.truncf %cst : f64 to f32
      %1655 = arith.addf %3, %1654 : f32
      %cst_386 = arith.constant 5.000000e-01 : f32
      %1656 = arith.mulf %1655, %cst_386 : f32
      %1657 = arith.bitcast %1655 : f32 to i32
      %c1_i32_387 = arith.constant 1 : i32
      %1658 = arith.shrui %1657, %c1_i32_387 : i32
      %c1597463007_i32_388 = arith.constant 1597463007 : i32
      %1659 = arith.subi %c1597463007_i32_388, %1658 : i32
      %1660 = arith.bitcast %1659 : i32 to f32
      %cst_389 = arith.constant 1.500000e+00 : f32
      %1661 = arith.mulf %1660, %1660 : f32
      %1662 = arith.mulf %1661, %1656 : f32
      %1663 = arith.subf %cst_389, %1662 : f32
      %1664 = arith.mulf %1663, %1661 : f32
      %1665 = arith.subf %1653, %2 : f32
      %1666 = arith.mulf %1665, %1664 : f32
      %1667 = arith.mulf %1666, %0 : f32
      %1668 = arith.addf %1667, %1 : f32
      affine.store %1668, %arg5[0, 0, %arg6, %1652] : memref<1x64x112x112xf32>
      %1669 = affine.apply #map97(%c0)
      %1670 = affine.load %arg4[0, 0, %arg6, %1669] : memref<1x64x112x112xf32>
      %1671 = arith.truncf %cst : f64 to f32
      %1672 = arith.addf %3, %1671 : f32
      %cst_390 = arith.constant 5.000000e-01 : f32
      %1673 = arith.mulf %1672, %cst_390 : f32
      %1674 = arith.bitcast %1672 : f32 to i32
      %c1_i32_391 = arith.constant 1 : i32
      %1675 = arith.shrui %1674, %c1_i32_391 : i32
      %c1597463007_i32_392 = arith.constant 1597463007 : i32
      %1676 = arith.subi %c1597463007_i32_392, %1675 : i32
      %1677 = arith.bitcast %1676 : i32 to f32
      %cst_393 = arith.constant 1.500000e+00 : f32
      %1678 = arith.mulf %1677, %1677 : f32
      %1679 = arith.mulf %1678, %1673 : f32
      %1680 = arith.subf %cst_393, %1679 : f32
      %1681 = arith.mulf %1680, %1678 : f32
      %1682 = arith.subf %1670, %2 : f32
      %1683 = arith.mulf %1682, %1681 : f32
      %1684 = arith.mulf %1683, %0 : f32
      %1685 = arith.addf %1684, %1 : f32
      affine.store %1685, %arg5[0, 0, %arg6, %1669] : memref<1x64x112x112xf32>
      %1686 = affine.apply #map98(%c0)
      %1687 = affine.load %arg4[0, 0, %arg6, %1686] : memref<1x64x112x112xf32>
      %1688 = arith.truncf %cst : f64 to f32
      %1689 = arith.addf %3, %1688 : f32
      %cst_394 = arith.constant 5.000000e-01 : f32
      %1690 = arith.mulf %1689, %cst_394 : f32
      %1691 = arith.bitcast %1689 : f32 to i32
      %c1_i32_395 = arith.constant 1 : i32
      %1692 = arith.shrui %1691, %c1_i32_395 : i32
      %c1597463007_i32_396 = arith.constant 1597463007 : i32
      %1693 = arith.subi %c1597463007_i32_396, %1692 : i32
      %1694 = arith.bitcast %1693 : i32 to f32
      %cst_397 = arith.constant 1.500000e+00 : f32
      %1695 = arith.mulf %1694, %1694 : f32
      %1696 = arith.mulf %1695, %1690 : f32
      %1697 = arith.subf %cst_397, %1696 : f32
      %1698 = arith.mulf %1697, %1695 : f32
      %1699 = arith.subf %1687, %2 : f32
      %1700 = arith.mulf %1699, %1698 : f32
      %1701 = arith.mulf %1700, %0 : f32
      %1702 = arith.addf %1701, %1 : f32
      affine.store %1702, %arg5[0, 0, %arg6, %1686] : memref<1x64x112x112xf32>
      %1703 = affine.apply #map99(%c0)
      %1704 = affine.load %arg4[0, 0, %arg6, %1703] : memref<1x64x112x112xf32>
      %1705 = arith.truncf %cst : f64 to f32
      %1706 = arith.addf %3, %1705 : f32
      %cst_398 = arith.constant 5.000000e-01 : f32
      %1707 = arith.mulf %1706, %cst_398 : f32
      %1708 = arith.bitcast %1706 : f32 to i32
      %c1_i32_399 = arith.constant 1 : i32
      %1709 = arith.shrui %1708, %c1_i32_399 : i32
      %c1597463007_i32_400 = arith.constant 1597463007 : i32
      %1710 = arith.subi %c1597463007_i32_400, %1709 : i32
      %1711 = arith.bitcast %1710 : i32 to f32
      %cst_401 = arith.constant 1.500000e+00 : f32
      %1712 = arith.mulf %1711, %1711 : f32
      %1713 = arith.mulf %1712, %1707 : f32
      %1714 = arith.subf %cst_401, %1713 : f32
      %1715 = arith.mulf %1714, %1712 : f32
      %1716 = arith.subf %1704, %2 : f32
      %1717 = arith.mulf %1716, %1715 : f32
      %1718 = arith.mulf %1717, %0 : f32
      %1719 = arith.addf %1718, %1 : f32
      affine.store %1719, %arg5[0, 0, %arg6, %1703] : memref<1x64x112x112xf32>
      %1720 = affine.apply #map100(%c0)
      %1721 = affine.load %arg4[0, 0, %arg6, %1720] : memref<1x64x112x112xf32>
      %1722 = arith.truncf %cst : f64 to f32
      %1723 = arith.addf %3, %1722 : f32
      %cst_402 = arith.constant 5.000000e-01 : f32
      %1724 = arith.mulf %1723, %cst_402 : f32
      %1725 = arith.bitcast %1723 : f32 to i32
      %c1_i32_403 = arith.constant 1 : i32
      %1726 = arith.shrui %1725, %c1_i32_403 : i32
      %c1597463007_i32_404 = arith.constant 1597463007 : i32
      %1727 = arith.subi %c1597463007_i32_404, %1726 : i32
      %1728 = arith.bitcast %1727 : i32 to f32
      %cst_405 = arith.constant 1.500000e+00 : f32
      %1729 = arith.mulf %1728, %1728 : f32
      %1730 = arith.mulf %1729, %1724 : f32
      %1731 = arith.subf %cst_405, %1730 : f32
      %1732 = arith.mulf %1731, %1729 : f32
      %1733 = arith.subf %1721, %2 : f32
      %1734 = arith.mulf %1733, %1732 : f32
      %1735 = arith.mulf %1734, %0 : f32
      %1736 = arith.addf %1735, %1 : f32
      affine.store %1736, %arg5[0, 0, %arg6, %1720] : memref<1x64x112x112xf32>
      %1737 = affine.apply #map101(%c0)
      %1738 = affine.load %arg4[0, 0, %arg6, %1737] : memref<1x64x112x112xf32>
      %1739 = arith.truncf %cst : f64 to f32
      %1740 = arith.addf %3, %1739 : f32
      %cst_406 = arith.constant 5.000000e-01 : f32
      %1741 = arith.mulf %1740, %cst_406 : f32
      %1742 = arith.bitcast %1740 : f32 to i32
      %c1_i32_407 = arith.constant 1 : i32
      %1743 = arith.shrui %1742, %c1_i32_407 : i32
      %c1597463007_i32_408 = arith.constant 1597463007 : i32
      %1744 = arith.subi %c1597463007_i32_408, %1743 : i32
      %1745 = arith.bitcast %1744 : i32 to f32
      %cst_409 = arith.constant 1.500000e+00 : f32
      %1746 = arith.mulf %1745, %1745 : f32
      %1747 = arith.mulf %1746, %1741 : f32
      %1748 = arith.subf %cst_409, %1747 : f32
      %1749 = arith.mulf %1748, %1746 : f32
      %1750 = arith.subf %1738, %2 : f32
      %1751 = arith.mulf %1750, %1749 : f32
      %1752 = arith.mulf %1751, %0 : f32
      %1753 = arith.addf %1752, %1 : f32
      affine.store %1753, %arg5[0, 0, %arg6, %1737] : memref<1x64x112x112xf32>
      %1754 = affine.apply #map102(%c0)
      %1755 = affine.load %arg4[0, 0, %arg6, %1754] : memref<1x64x112x112xf32>
      %1756 = arith.truncf %cst : f64 to f32
      %1757 = arith.addf %3, %1756 : f32
      %cst_410 = arith.constant 5.000000e-01 : f32
      %1758 = arith.mulf %1757, %cst_410 : f32
      %1759 = arith.bitcast %1757 : f32 to i32
      %c1_i32_411 = arith.constant 1 : i32
      %1760 = arith.shrui %1759, %c1_i32_411 : i32
      %c1597463007_i32_412 = arith.constant 1597463007 : i32
      %1761 = arith.subi %c1597463007_i32_412, %1760 : i32
      %1762 = arith.bitcast %1761 : i32 to f32
      %cst_413 = arith.constant 1.500000e+00 : f32
      %1763 = arith.mulf %1762, %1762 : f32
      %1764 = arith.mulf %1763, %1758 : f32
      %1765 = arith.subf %cst_413, %1764 : f32
      %1766 = arith.mulf %1765, %1763 : f32
      %1767 = arith.subf %1755, %2 : f32
      %1768 = arith.mulf %1767, %1766 : f32
      %1769 = arith.mulf %1768, %0 : f32
      %1770 = arith.addf %1769, %1 : f32
      affine.store %1770, %arg5[0, 0, %arg6, %1754] : memref<1x64x112x112xf32>
      %1771 = affine.apply #map103(%c0)
      %1772 = affine.load %arg4[0, 0, %arg6, %1771] : memref<1x64x112x112xf32>
      %1773 = arith.truncf %cst : f64 to f32
      %1774 = arith.addf %3, %1773 : f32
      %cst_414 = arith.constant 5.000000e-01 : f32
      %1775 = arith.mulf %1774, %cst_414 : f32
      %1776 = arith.bitcast %1774 : f32 to i32
      %c1_i32_415 = arith.constant 1 : i32
      %1777 = arith.shrui %1776, %c1_i32_415 : i32
      %c1597463007_i32_416 = arith.constant 1597463007 : i32
      %1778 = arith.subi %c1597463007_i32_416, %1777 : i32
      %1779 = arith.bitcast %1778 : i32 to f32
      %cst_417 = arith.constant 1.500000e+00 : f32
      %1780 = arith.mulf %1779, %1779 : f32
      %1781 = arith.mulf %1780, %1775 : f32
      %1782 = arith.subf %cst_417, %1781 : f32
      %1783 = arith.mulf %1782, %1780 : f32
      %1784 = arith.subf %1772, %2 : f32
      %1785 = arith.mulf %1784, %1783 : f32
      %1786 = arith.mulf %1785, %0 : f32
      %1787 = arith.addf %1786, %1 : f32
      affine.store %1787, %arg5[0, 0, %arg6, %1771] : memref<1x64x112x112xf32>
      %1788 = affine.apply #map104(%c0)
      %1789 = affine.load %arg4[0, 0, %arg6, %1788] : memref<1x64x112x112xf32>
      %1790 = arith.truncf %cst : f64 to f32
      %1791 = arith.addf %3, %1790 : f32
      %cst_418 = arith.constant 5.000000e-01 : f32
      %1792 = arith.mulf %1791, %cst_418 : f32
      %1793 = arith.bitcast %1791 : f32 to i32
      %c1_i32_419 = arith.constant 1 : i32
      %1794 = arith.shrui %1793, %c1_i32_419 : i32
      %c1597463007_i32_420 = arith.constant 1597463007 : i32
      %1795 = arith.subi %c1597463007_i32_420, %1794 : i32
      %1796 = arith.bitcast %1795 : i32 to f32
      %cst_421 = arith.constant 1.500000e+00 : f32
      %1797 = arith.mulf %1796, %1796 : f32
      %1798 = arith.mulf %1797, %1792 : f32
      %1799 = arith.subf %cst_421, %1798 : f32
      %1800 = arith.mulf %1799, %1797 : f32
      %1801 = arith.subf %1789, %2 : f32
      %1802 = arith.mulf %1801, %1800 : f32
      %1803 = arith.mulf %1802, %0 : f32
      %1804 = arith.addf %1803, %1 : f32
      affine.store %1804, %arg5[0, 0, %arg6, %1788] : memref<1x64x112x112xf32>
      %1805 = affine.apply #map105(%c0)
      %1806 = affine.load %arg4[0, 0, %arg6, %1805] : memref<1x64x112x112xf32>
      %1807 = arith.truncf %cst : f64 to f32
      %1808 = arith.addf %3, %1807 : f32
      %cst_422 = arith.constant 5.000000e-01 : f32
      %1809 = arith.mulf %1808, %cst_422 : f32
      %1810 = arith.bitcast %1808 : f32 to i32
      %c1_i32_423 = arith.constant 1 : i32
      %1811 = arith.shrui %1810, %c1_i32_423 : i32
      %c1597463007_i32_424 = arith.constant 1597463007 : i32
      %1812 = arith.subi %c1597463007_i32_424, %1811 : i32
      %1813 = arith.bitcast %1812 : i32 to f32
      %cst_425 = arith.constant 1.500000e+00 : f32
      %1814 = arith.mulf %1813, %1813 : f32
      %1815 = arith.mulf %1814, %1809 : f32
      %1816 = arith.subf %cst_425, %1815 : f32
      %1817 = arith.mulf %1816, %1814 : f32
      %1818 = arith.subf %1806, %2 : f32
      %1819 = arith.mulf %1818, %1817 : f32
      %1820 = arith.mulf %1819, %0 : f32
      %1821 = arith.addf %1820, %1 : f32
      affine.store %1821, %arg5[0, 0, %arg6, %1805] : memref<1x64x112x112xf32>
      %1822 = affine.apply #map106(%c0)
      %1823 = affine.load %arg4[0, 0, %arg6, %1822] : memref<1x64x112x112xf32>
      %1824 = arith.truncf %cst : f64 to f32
      %1825 = arith.addf %3, %1824 : f32
      %cst_426 = arith.constant 5.000000e-01 : f32
      %1826 = arith.mulf %1825, %cst_426 : f32
      %1827 = arith.bitcast %1825 : f32 to i32
      %c1_i32_427 = arith.constant 1 : i32
      %1828 = arith.shrui %1827, %c1_i32_427 : i32
      %c1597463007_i32_428 = arith.constant 1597463007 : i32
      %1829 = arith.subi %c1597463007_i32_428, %1828 : i32
      %1830 = arith.bitcast %1829 : i32 to f32
      %cst_429 = arith.constant 1.500000e+00 : f32
      %1831 = arith.mulf %1830, %1830 : f32
      %1832 = arith.mulf %1831, %1826 : f32
      %1833 = arith.subf %cst_429, %1832 : f32
      %1834 = arith.mulf %1833, %1831 : f32
      %1835 = arith.subf %1823, %2 : f32
      %1836 = arith.mulf %1835, %1834 : f32
      %1837 = arith.mulf %1836, %0 : f32
      %1838 = arith.addf %1837, %1 : f32
      affine.store %1838, %arg5[0, 0, %arg6, %1822] : memref<1x64x112x112xf32>
      %1839 = affine.apply #map107(%c0)
      %1840 = affine.load %arg4[0, 0, %arg6, %1839] : memref<1x64x112x112xf32>
      %1841 = arith.truncf %cst : f64 to f32
      %1842 = arith.addf %3, %1841 : f32
      %cst_430 = arith.constant 5.000000e-01 : f32
      %1843 = arith.mulf %1842, %cst_430 : f32
      %1844 = arith.bitcast %1842 : f32 to i32
      %c1_i32_431 = arith.constant 1 : i32
      %1845 = arith.shrui %1844, %c1_i32_431 : i32
      %c1597463007_i32_432 = arith.constant 1597463007 : i32
      %1846 = arith.subi %c1597463007_i32_432, %1845 : i32
      %1847 = arith.bitcast %1846 : i32 to f32
      %cst_433 = arith.constant 1.500000e+00 : f32
      %1848 = arith.mulf %1847, %1847 : f32
      %1849 = arith.mulf %1848, %1843 : f32
      %1850 = arith.subf %cst_433, %1849 : f32
      %1851 = arith.mulf %1850, %1848 : f32
      %1852 = arith.subf %1840, %2 : f32
      %1853 = arith.mulf %1852, %1851 : f32
      %1854 = arith.mulf %1853, %0 : f32
      %1855 = arith.addf %1854, %1 : f32
      affine.store %1855, %arg5[0, 0, %arg6, %1839] : memref<1x64x112x112xf32>
      %1856 = affine.apply #map108(%c0)
      %1857 = affine.load %arg4[0, 0, %arg6, %1856] : memref<1x64x112x112xf32>
      %1858 = arith.truncf %cst : f64 to f32
      %1859 = arith.addf %3, %1858 : f32
      %cst_434 = arith.constant 5.000000e-01 : f32
      %1860 = arith.mulf %1859, %cst_434 : f32
      %1861 = arith.bitcast %1859 : f32 to i32
      %c1_i32_435 = arith.constant 1 : i32
      %1862 = arith.shrui %1861, %c1_i32_435 : i32
      %c1597463007_i32_436 = arith.constant 1597463007 : i32
      %1863 = arith.subi %c1597463007_i32_436, %1862 : i32
      %1864 = arith.bitcast %1863 : i32 to f32
      %cst_437 = arith.constant 1.500000e+00 : f32
      %1865 = arith.mulf %1864, %1864 : f32
      %1866 = arith.mulf %1865, %1860 : f32
      %1867 = arith.subf %cst_437, %1866 : f32
      %1868 = arith.mulf %1867, %1865 : f32
      %1869 = arith.subf %1857, %2 : f32
      %1870 = arith.mulf %1869, %1868 : f32
      %1871 = arith.mulf %1870, %0 : f32
      %1872 = arith.addf %1871, %1 : f32
      affine.store %1872, %arg5[0, 0, %arg6, %1856] : memref<1x64x112x112xf32>
      %1873 = affine.apply #map109(%c0)
      %1874 = affine.load %arg4[0, 0, %arg6, %1873] : memref<1x64x112x112xf32>
      %1875 = arith.truncf %cst : f64 to f32
      %1876 = arith.addf %3, %1875 : f32
      %cst_438 = arith.constant 5.000000e-01 : f32
      %1877 = arith.mulf %1876, %cst_438 : f32
      %1878 = arith.bitcast %1876 : f32 to i32
      %c1_i32_439 = arith.constant 1 : i32
      %1879 = arith.shrui %1878, %c1_i32_439 : i32
      %c1597463007_i32_440 = arith.constant 1597463007 : i32
      %1880 = arith.subi %c1597463007_i32_440, %1879 : i32
      %1881 = arith.bitcast %1880 : i32 to f32
      %cst_441 = arith.constant 1.500000e+00 : f32
      %1882 = arith.mulf %1881, %1881 : f32
      %1883 = arith.mulf %1882, %1877 : f32
      %1884 = arith.subf %cst_441, %1883 : f32
      %1885 = arith.mulf %1884, %1882 : f32
      %1886 = arith.subf %1874, %2 : f32
      %1887 = arith.mulf %1886, %1885 : f32
      %1888 = arith.mulf %1887, %0 : f32
      %1889 = arith.addf %1888, %1 : f32
      affine.store %1889, %arg5[0, 0, %arg6, %1873] : memref<1x64x112x112xf32>
      %1890 = affine.apply #map110(%c0)
      %1891 = affine.load %arg4[0, 0, %arg6, %1890] : memref<1x64x112x112xf32>
      %1892 = arith.truncf %cst : f64 to f32
      %1893 = arith.addf %3, %1892 : f32
      %cst_442 = arith.constant 5.000000e-01 : f32
      %1894 = arith.mulf %1893, %cst_442 : f32
      %1895 = arith.bitcast %1893 : f32 to i32
      %c1_i32_443 = arith.constant 1 : i32
      %1896 = arith.shrui %1895, %c1_i32_443 : i32
      %c1597463007_i32_444 = arith.constant 1597463007 : i32
      %1897 = arith.subi %c1597463007_i32_444, %1896 : i32
      %1898 = arith.bitcast %1897 : i32 to f32
      %cst_445 = arith.constant 1.500000e+00 : f32
      %1899 = arith.mulf %1898, %1898 : f32
      %1900 = arith.mulf %1899, %1894 : f32
      %1901 = arith.subf %cst_445, %1900 : f32
      %1902 = arith.mulf %1901, %1899 : f32
      %1903 = arith.subf %1891, %2 : f32
      %1904 = arith.mulf %1903, %1902 : f32
      %1905 = arith.mulf %1904, %0 : f32
      %1906 = arith.addf %1905, %1 : f32
      affine.store %1906, %arg5[0, 0, %arg6, %1890] : memref<1x64x112x112xf32>
    }
    return
  }
}
