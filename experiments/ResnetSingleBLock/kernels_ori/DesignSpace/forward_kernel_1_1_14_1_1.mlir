#map = affine_map<(d0) -> (d0 + 1)>
#map1 = affine_map<(d0) -> (d0 + 2)>
#map2 = affine_map<(d0) -> (d0 + 3)>
#map3 = affine_map<(d0) -> (d0 + 4)>
#map4 = affine_map<(d0) -> (d0 + 5)>
#map5 = affine_map<(d0) -> (d0 + 6)>
#map6 = affine_map<(d0) -> (d0 + 7)>
#map7 = affine_map<(d0) -> (d0 + 8)>
#map8 = affine_map<(d0) -> (d0 + 9)>
#map9 = affine_map<(d0) -> (d0 + 10)>
#map10 = affine_map<(d0) -> (d0 + 11)>
#map11 = affine_map<(d0) -> (d0 + 12)>
#map12 = affine_map<(d0) -> (d0 + 13)>
module {
  func.func @forward_kernel_1(%arg0: memref<64xf32>, %arg1: memref<64xf32>, %arg2: memref<64xf32>, %arg3: memref<64xf32>, %arg4: memref<1x64x112x112xf32>, %arg5: memref<1x64x112x112xf32>) attributes {Kernel, forward_kernel_1} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 1.000000e-05 : f64
    affine.for %arg6 = 0 to 16 {
      %0 = affine.load %arg0[0] : memref<64xf32>
      %1 = affine.load %arg1[0] : memref<64xf32>
      %2 = affine.load %arg2[0] : memref<64xf32>
      %3 = affine.load %arg3[0] : memref<64xf32>
      affine.for %arg7 = 0 to 112 step 14 {
        %4 = affine.load %arg4[0, 0, %arg6, %arg7] : memref<1x64x112x112xf32>
        %5 = arith.truncf %cst : f64 to f32
        %6 = arith.addf %3, %5 : f32
        %cst_0 = arith.constant 5.000000e-01 : f32
        %7 = arith.mulf %6, %cst_0 : f32
        %8 = arith.bitcast %6 : f32 to i32
        %c1_i32 = arith.constant 1 : i32
        %9 = arith.shrui %8, %c1_i32 : i32
        %c1597463007_i32 = arith.constant 1597463007 : i32
        %10 = arith.subi %c1597463007_i32, %9 : i32
        %11 = arith.bitcast %10 : i32 to f32
        %cst_1 = arith.constant 1.500000e+00 : f32
        %12 = arith.mulf %11, %11 : f32
        %13 = arith.mulf %12, %7 : f32
        %14 = arith.subf %cst_1, %13 : f32
        %15 = arith.mulf %14, %12 : f32
        %16 = arith.subf %4, %2 : f32
        %17 = arith.mulf %16, %15 : f32
        %18 = arith.mulf %17, %0 : f32
        %19 = arith.addf %18, %1 : f32
        affine.store %19, %arg5[0, 0, %arg6, %arg7] : memref<1x64x112x112xf32>
        %20 = affine.apply #map(%arg7)
        %21 = affine.load %arg4[0, 0, %arg6, %20] : memref<1x64x112x112xf32>
        %22 = arith.truncf %cst : f64 to f32
        %23 = arith.addf %3, %22 : f32
        %cst_2 = arith.constant 5.000000e-01 : f32
        %24 = arith.mulf %23, %cst_2 : f32
        %25 = arith.bitcast %23 : f32 to i32
        %c1_i32_3 = arith.constant 1 : i32
        %26 = arith.shrui %25, %c1_i32_3 : i32
        %c1597463007_i32_4 = arith.constant 1597463007 : i32
        %27 = arith.subi %c1597463007_i32_4, %26 : i32
        %28 = arith.bitcast %27 : i32 to f32
        %cst_5 = arith.constant 1.500000e+00 : f32
        %29 = arith.mulf %28, %28 : f32
        %30 = arith.mulf %29, %24 : f32
        %31 = arith.subf %cst_5, %30 : f32
        %32 = arith.mulf %31, %29 : f32
        %33 = arith.subf %21, %2 : f32
        %34 = arith.mulf %33, %32 : f32
        %35 = arith.mulf %34, %0 : f32
        %36 = arith.addf %35, %1 : f32
        affine.store %36, %arg5[0, 0, %arg6, %20] : memref<1x64x112x112xf32>
        %37 = affine.apply #map1(%arg7)
        %38 = affine.load %arg4[0, 0, %arg6, %37] : memref<1x64x112x112xf32>
        %39 = arith.truncf %cst : f64 to f32
        %40 = arith.addf %3, %39 : f32
        %cst_6 = arith.constant 5.000000e-01 : f32
        %41 = arith.mulf %40, %cst_6 : f32
        %42 = arith.bitcast %40 : f32 to i32
        %c1_i32_7 = arith.constant 1 : i32
        %43 = arith.shrui %42, %c1_i32_7 : i32
        %c1597463007_i32_8 = arith.constant 1597463007 : i32
        %44 = arith.subi %c1597463007_i32_8, %43 : i32
        %45 = arith.bitcast %44 : i32 to f32
        %cst_9 = arith.constant 1.500000e+00 : f32
        %46 = arith.mulf %45, %45 : f32
        %47 = arith.mulf %46, %41 : f32
        %48 = arith.subf %cst_9, %47 : f32
        %49 = arith.mulf %48, %46 : f32
        %50 = arith.subf %38, %2 : f32
        %51 = arith.mulf %50, %49 : f32
        %52 = arith.mulf %51, %0 : f32
        %53 = arith.addf %52, %1 : f32
        affine.store %53, %arg5[0, 0, %arg6, %37] : memref<1x64x112x112xf32>
        %54 = affine.apply #map2(%arg7)
        %55 = affine.load %arg4[0, 0, %arg6, %54] : memref<1x64x112x112xf32>
        %56 = arith.truncf %cst : f64 to f32
        %57 = arith.addf %3, %56 : f32
        %cst_10 = arith.constant 5.000000e-01 : f32
        %58 = arith.mulf %57, %cst_10 : f32
        %59 = arith.bitcast %57 : f32 to i32
        %c1_i32_11 = arith.constant 1 : i32
        %60 = arith.shrui %59, %c1_i32_11 : i32
        %c1597463007_i32_12 = arith.constant 1597463007 : i32
        %61 = arith.subi %c1597463007_i32_12, %60 : i32
        %62 = arith.bitcast %61 : i32 to f32
        %cst_13 = arith.constant 1.500000e+00 : f32
        %63 = arith.mulf %62, %62 : f32
        %64 = arith.mulf %63, %58 : f32
        %65 = arith.subf %cst_13, %64 : f32
        %66 = arith.mulf %65, %63 : f32
        %67 = arith.subf %55, %2 : f32
        %68 = arith.mulf %67, %66 : f32
        %69 = arith.mulf %68, %0 : f32
        %70 = arith.addf %69, %1 : f32
        affine.store %70, %arg5[0, 0, %arg6, %54] : memref<1x64x112x112xf32>
        %71 = affine.apply #map3(%arg7)
        %72 = affine.load %arg4[0, 0, %arg6, %71] : memref<1x64x112x112xf32>
        %73 = arith.truncf %cst : f64 to f32
        %74 = arith.addf %3, %73 : f32
        %cst_14 = arith.constant 5.000000e-01 : f32
        %75 = arith.mulf %74, %cst_14 : f32
        %76 = arith.bitcast %74 : f32 to i32
        %c1_i32_15 = arith.constant 1 : i32
        %77 = arith.shrui %76, %c1_i32_15 : i32
        %c1597463007_i32_16 = arith.constant 1597463007 : i32
        %78 = arith.subi %c1597463007_i32_16, %77 : i32
        %79 = arith.bitcast %78 : i32 to f32
        %cst_17 = arith.constant 1.500000e+00 : f32
        %80 = arith.mulf %79, %79 : f32
        %81 = arith.mulf %80, %75 : f32
        %82 = arith.subf %cst_17, %81 : f32
        %83 = arith.mulf %82, %80 : f32
        %84 = arith.subf %72, %2 : f32
        %85 = arith.mulf %84, %83 : f32
        %86 = arith.mulf %85, %0 : f32
        %87 = arith.addf %86, %1 : f32
        affine.store %87, %arg5[0, 0, %arg6, %71] : memref<1x64x112x112xf32>
        %88 = affine.apply #map4(%arg7)
        %89 = affine.load %arg4[0, 0, %arg6, %88] : memref<1x64x112x112xf32>
        %90 = arith.truncf %cst : f64 to f32
        %91 = arith.addf %3, %90 : f32
        %cst_18 = arith.constant 5.000000e-01 : f32
        %92 = arith.mulf %91, %cst_18 : f32
        %93 = arith.bitcast %91 : f32 to i32
        %c1_i32_19 = arith.constant 1 : i32
        %94 = arith.shrui %93, %c1_i32_19 : i32
        %c1597463007_i32_20 = arith.constant 1597463007 : i32
        %95 = arith.subi %c1597463007_i32_20, %94 : i32
        %96 = arith.bitcast %95 : i32 to f32
        %cst_21 = arith.constant 1.500000e+00 : f32
        %97 = arith.mulf %96, %96 : f32
        %98 = arith.mulf %97, %92 : f32
        %99 = arith.subf %cst_21, %98 : f32
        %100 = arith.mulf %99, %97 : f32
        %101 = arith.subf %89, %2 : f32
        %102 = arith.mulf %101, %100 : f32
        %103 = arith.mulf %102, %0 : f32
        %104 = arith.addf %103, %1 : f32
        affine.store %104, %arg5[0, 0, %arg6, %88] : memref<1x64x112x112xf32>
        %105 = affine.apply #map5(%arg7)
        %106 = affine.load %arg4[0, 0, %arg6, %105] : memref<1x64x112x112xf32>
        %107 = arith.truncf %cst : f64 to f32
        %108 = arith.addf %3, %107 : f32
        %cst_22 = arith.constant 5.000000e-01 : f32
        %109 = arith.mulf %108, %cst_22 : f32
        %110 = arith.bitcast %108 : f32 to i32
        %c1_i32_23 = arith.constant 1 : i32
        %111 = arith.shrui %110, %c1_i32_23 : i32
        %c1597463007_i32_24 = arith.constant 1597463007 : i32
        %112 = arith.subi %c1597463007_i32_24, %111 : i32
        %113 = arith.bitcast %112 : i32 to f32
        %cst_25 = arith.constant 1.500000e+00 : f32
        %114 = arith.mulf %113, %113 : f32
        %115 = arith.mulf %114, %109 : f32
        %116 = arith.subf %cst_25, %115 : f32
        %117 = arith.mulf %116, %114 : f32
        %118 = arith.subf %106, %2 : f32
        %119 = arith.mulf %118, %117 : f32
        %120 = arith.mulf %119, %0 : f32
        %121 = arith.addf %120, %1 : f32
        affine.store %121, %arg5[0, 0, %arg6, %105] : memref<1x64x112x112xf32>
        %122 = affine.apply #map6(%arg7)
        %123 = affine.load %arg4[0, 0, %arg6, %122] : memref<1x64x112x112xf32>
        %124 = arith.truncf %cst : f64 to f32
        %125 = arith.addf %3, %124 : f32
        %cst_26 = arith.constant 5.000000e-01 : f32
        %126 = arith.mulf %125, %cst_26 : f32
        %127 = arith.bitcast %125 : f32 to i32
        %c1_i32_27 = arith.constant 1 : i32
        %128 = arith.shrui %127, %c1_i32_27 : i32
        %c1597463007_i32_28 = arith.constant 1597463007 : i32
        %129 = arith.subi %c1597463007_i32_28, %128 : i32
        %130 = arith.bitcast %129 : i32 to f32
        %cst_29 = arith.constant 1.500000e+00 : f32
        %131 = arith.mulf %130, %130 : f32
        %132 = arith.mulf %131, %126 : f32
        %133 = arith.subf %cst_29, %132 : f32
        %134 = arith.mulf %133, %131 : f32
        %135 = arith.subf %123, %2 : f32
        %136 = arith.mulf %135, %134 : f32
        %137 = arith.mulf %136, %0 : f32
        %138 = arith.addf %137, %1 : f32
        affine.store %138, %arg5[0, 0, %arg6, %122] : memref<1x64x112x112xf32>
        %139 = affine.apply #map7(%arg7)
        %140 = affine.load %arg4[0, 0, %arg6, %139] : memref<1x64x112x112xf32>
        %141 = arith.truncf %cst : f64 to f32
        %142 = arith.addf %3, %141 : f32
        %cst_30 = arith.constant 5.000000e-01 : f32
        %143 = arith.mulf %142, %cst_30 : f32
        %144 = arith.bitcast %142 : f32 to i32
        %c1_i32_31 = arith.constant 1 : i32
        %145 = arith.shrui %144, %c1_i32_31 : i32
        %c1597463007_i32_32 = arith.constant 1597463007 : i32
        %146 = arith.subi %c1597463007_i32_32, %145 : i32
        %147 = arith.bitcast %146 : i32 to f32
        %cst_33 = arith.constant 1.500000e+00 : f32
        %148 = arith.mulf %147, %147 : f32
        %149 = arith.mulf %148, %143 : f32
        %150 = arith.subf %cst_33, %149 : f32
        %151 = arith.mulf %150, %148 : f32
        %152 = arith.subf %140, %2 : f32
        %153 = arith.mulf %152, %151 : f32
        %154 = arith.mulf %153, %0 : f32
        %155 = arith.addf %154, %1 : f32
        affine.store %155, %arg5[0, 0, %arg6, %139] : memref<1x64x112x112xf32>
        %156 = affine.apply #map8(%arg7)
        %157 = affine.load %arg4[0, 0, %arg6, %156] : memref<1x64x112x112xf32>
        %158 = arith.truncf %cst : f64 to f32
        %159 = arith.addf %3, %158 : f32
        %cst_34 = arith.constant 5.000000e-01 : f32
        %160 = arith.mulf %159, %cst_34 : f32
        %161 = arith.bitcast %159 : f32 to i32
        %c1_i32_35 = arith.constant 1 : i32
        %162 = arith.shrui %161, %c1_i32_35 : i32
        %c1597463007_i32_36 = arith.constant 1597463007 : i32
        %163 = arith.subi %c1597463007_i32_36, %162 : i32
        %164 = arith.bitcast %163 : i32 to f32
        %cst_37 = arith.constant 1.500000e+00 : f32
        %165 = arith.mulf %164, %164 : f32
        %166 = arith.mulf %165, %160 : f32
        %167 = arith.subf %cst_37, %166 : f32
        %168 = arith.mulf %167, %165 : f32
        %169 = arith.subf %157, %2 : f32
        %170 = arith.mulf %169, %168 : f32
        %171 = arith.mulf %170, %0 : f32
        %172 = arith.addf %171, %1 : f32
        affine.store %172, %arg5[0, 0, %arg6, %156] : memref<1x64x112x112xf32>
        %173 = affine.apply #map9(%arg7)
        %174 = affine.load %arg4[0, 0, %arg6, %173] : memref<1x64x112x112xf32>
        %175 = arith.truncf %cst : f64 to f32
        %176 = arith.addf %3, %175 : f32
        %cst_38 = arith.constant 5.000000e-01 : f32
        %177 = arith.mulf %176, %cst_38 : f32
        %178 = arith.bitcast %176 : f32 to i32
        %c1_i32_39 = arith.constant 1 : i32
        %179 = arith.shrui %178, %c1_i32_39 : i32
        %c1597463007_i32_40 = arith.constant 1597463007 : i32
        %180 = arith.subi %c1597463007_i32_40, %179 : i32
        %181 = arith.bitcast %180 : i32 to f32
        %cst_41 = arith.constant 1.500000e+00 : f32
        %182 = arith.mulf %181, %181 : f32
        %183 = arith.mulf %182, %177 : f32
        %184 = arith.subf %cst_41, %183 : f32
        %185 = arith.mulf %184, %182 : f32
        %186 = arith.subf %174, %2 : f32
        %187 = arith.mulf %186, %185 : f32
        %188 = arith.mulf %187, %0 : f32
        %189 = arith.addf %188, %1 : f32
        affine.store %189, %arg5[0, 0, %arg6, %173] : memref<1x64x112x112xf32>
        %190 = affine.apply #map10(%arg7)
        %191 = affine.load %arg4[0, 0, %arg6, %190] : memref<1x64x112x112xf32>
        %192 = arith.truncf %cst : f64 to f32
        %193 = arith.addf %3, %192 : f32
        %cst_42 = arith.constant 5.000000e-01 : f32
        %194 = arith.mulf %193, %cst_42 : f32
        %195 = arith.bitcast %193 : f32 to i32
        %c1_i32_43 = arith.constant 1 : i32
        %196 = arith.shrui %195, %c1_i32_43 : i32
        %c1597463007_i32_44 = arith.constant 1597463007 : i32
        %197 = arith.subi %c1597463007_i32_44, %196 : i32
        %198 = arith.bitcast %197 : i32 to f32
        %cst_45 = arith.constant 1.500000e+00 : f32
        %199 = arith.mulf %198, %198 : f32
        %200 = arith.mulf %199, %194 : f32
        %201 = arith.subf %cst_45, %200 : f32
        %202 = arith.mulf %201, %199 : f32
        %203 = arith.subf %191, %2 : f32
        %204 = arith.mulf %203, %202 : f32
        %205 = arith.mulf %204, %0 : f32
        %206 = arith.addf %205, %1 : f32
        affine.store %206, %arg5[0, 0, %arg6, %190] : memref<1x64x112x112xf32>
        %207 = affine.apply #map11(%arg7)
        %208 = affine.load %arg4[0, 0, %arg6, %207] : memref<1x64x112x112xf32>
        %209 = arith.truncf %cst : f64 to f32
        %210 = arith.addf %3, %209 : f32
        %cst_46 = arith.constant 5.000000e-01 : f32
        %211 = arith.mulf %210, %cst_46 : f32
        %212 = arith.bitcast %210 : f32 to i32
        %c1_i32_47 = arith.constant 1 : i32
        %213 = arith.shrui %212, %c1_i32_47 : i32
        %c1597463007_i32_48 = arith.constant 1597463007 : i32
        %214 = arith.subi %c1597463007_i32_48, %213 : i32
        %215 = arith.bitcast %214 : i32 to f32
        %cst_49 = arith.constant 1.500000e+00 : f32
        %216 = arith.mulf %215, %215 : f32
        %217 = arith.mulf %216, %211 : f32
        %218 = arith.subf %cst_49, %217 : f32
        %219 = arith.mulf %218, %216 : f32
        %220 = arith.subf %208, %2 : f32
        %221 = arith.mulf %220, %219 : f32
        %222 = arith.mulf %221, %0 : f32
        %223 = arith.addf %222, %1 : f32
        affine.store %223, %arg5[0, 0, %arg6, %207] : memref<1x64x112x112xf32>
        %224 = affine.apply #map12(%arg7)
        %225 = affine.load %arg4[0, 0, %arg6, %224] : memref<1x64x112x112xf32>
        %226 = arith.truncf %cst : f64 to f32
        %227 = arith.addf %3, %226 : f32
        %cst_50 = arith.constant 5.000000e-01 : f32
        %228 = arith.mulf %227, %cst_50 : f32
        %229 = arith.bitcast %227 : f32 to i32
        %c1_i32_51 = arith.constant 1 : i32
        %230 = arith.shrui %229, %c1_i32_51 : i32
        %c1597463007_i32_52 = arith.constant 1597463007 : i32
        %231 = arith.subi %c1597463007_i32_52, %230 : i32
        %232 = arith.bitcast %231 : i32 to f32
        %cst_53 = arith.constant 1.500000e+00 : f32
        %233 = arith.mulf %232, %232 : f32
        %234 = arith.mulf %233, %228 : f32
        %235 = arith.subf %cst_53, %234 : f32
        %236 = arith.mulf %235, %233 : f32
        %237 = arith.subf %225, %2 : f32
        %238 = arith.mulf %237, %236 : f32
        %239 = arith.mulf %238, %0 : f32
        %240 = arith.addf %239, %1 : f32
        affine.store %240, %arg5[0, 0, %arg6, %224] : memref<1x64x112x112xf32>
      }
    }
    return
  }
}
