#map = affine_map<(d0) -> (d0 + 1)>
#map1 = affine_map<(d0) -> (d0 + 2)>
#map2 = affine_map<(d0) -> (d0 + 3)>
#map3 = affine_map<(d0) -> (d0 + 4)>
#map4 = affine_map<(d0) -> (d0 + 5)>
#map5 = affine_map<(d0) -> (d0 + 6)>
#map6 = affine_map<(d0) -> (d0 + 7)>
#map7 = affine_map<(d0) -> (d0 + 8)>
#map8 = affine_map<(d0) -> (d0 + 9)>
#map9 = affine_map<(d0) -> (d0 + 10)>
#map10 = affine_map<(d0) -> (d0 + 11)>
#map11 = affine_map<(d0) -> (d0 + 12)>
#map12 = affine_map<(d0) -> (d0 + 13)>
#map13 = affine_map<(d0) -> (d0 + 14)>
#map14 = affine_map<(d0) -> (d0 + 15)>
#map15 = affine_map<(d0) -> (d0 + 16)>
#map16 = affine_map<(d0) -> (d0 + 17)>
#map17 = affine_map<(d0) -> (d0 + 18)>
#map18 = affine_map<(d0) -> (d0 + 19)>
#map19 = affine_map<(d0) -> (d0 + 20)>
#map20 = affine_map<(d0) -> (d0 + 21)>
#map21 = affine_map<(d0) -> (d0 + 22)>
#map22 = affine_map<(d0) -> (d0 + 23)>
#map23 = affine_map<(d0) -> (d0 + 24)>
#map24 = affine_map<(d0) -> (d0 + 25)>
#map25 = affine_map<(d0) -> (d0 + 26)>
#map26 = affine_map<(d0) -> (d0 + 27)>
#map27 = affine_map<(d0) -> (d0 + 28)>
#map28 = affine_map<(d0) -> (d0 + 29)>
#map29 = affine_map<(d0) -> (d0 + 30)>
#map30 = affine_map<(d0) -> (d0 + 31)>
#map31 = affine_map<(d0) -> (d0 + 32)>
#map32 = affine_map<(d0) -> (d0 + 33)>
#map33 = affine_map<(d0) -> (d0 + 34)>
#map34 = affine_map<(d0) -> (d0 + 35)>
#map35 = affine_map<(d0) -> (d0 + 36)>
#map36 = affine_map<(d0) -> (d0 + 37)>
#map37 = affine_map<(d0) -> (d0 + 38)>
#map38 = affine_map<(d0) -> (d0 + 39)>
#map39 = affine_map<(d0) -> (d0 + 40)>
#map40 = affine_map<(d0) -> (d0 + 41)>
#map41 = affine_map<(d0) -> (d0 + 42)>
#map42 = affine_map<(d0) -> (d0 + 43)>
#map43 = affine_map<(d0) -> (d0 + 44)>
#map44 = affine_map<(d0) -> (d0 + 45)>
#map45 = affine_map<(d0) -> (d0 + 46)>
#map46 = affine_map<(d0) -> (d0 + 47)>
#map47 = affine_map<(d0) -> (d0 + 48)>
#map48 = affine_map<(d0) -> (d0 + 49)>
#map49 = affine_map<(d0) -> (d0 + 50)>
#map50 = affine_map<(d0) -> (d0 + 51)>
#map51 = affine_map<(d0) -> (d0 + 52)>
#map52 = affine_map<(d0) -> (d0 + 53)>
#map53 = affine_map<(d0) -> (d0 + 54)>
#map54 = affine_map<(d0) -> (d0 + 55)>
module {
  func.func @forward_kernel_1(%arg0: memref<64xf32>, %arg1: memref<64xf32>, %arg2: memref<64xf32>, %arg3: memref<64xf32>, %arg4: memref<1x64x112x112xf32>, %arg5: memref<1x64x112x112xf32>) attributes {Kernel, forward_kernel_1} {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %cst = arith.constant 1.000000e-05 : f64
    affine.for %arg6 = 0 to 16 {
      %0 = affine.load %arg0[0] : memref<64xf32>
      %1 = affine.load %arg1[0] : memref<64xf32>
      %2 = affine.load %arg2[0] : memref<64xf32>
      %3 = affine.load %arg3[0] : memref<64xf32>
      affine.for %arg7 = 0 to 112 step 56 {
        %4 = affine.load %arg4[0, 0, %arg6, %arg7] : memref<1x64x112x112xf32>
        %5 = arith.truncf %cst : f64 to f32
        %6 = arith.addf %3, %5 : f32
        %cst_0 = arith.constant 5.000000e-01 : f32
        %7 = arith.mulf %6, %cst_0 : f32
        %8 = arith.bitcast %6 : f32 to i32
        %c1_i32 = arith.constant 1 : i32
        %9 = arith.shrui %8, %c1_i32 : i32
        %c1597463007_i32 = arith.constant 1597463007 : i32
        %10 = arith.subi %c1597463007_i32, %9 : i32
        %11 = arith.bitcast %10 : i32 to f32
        %cst_1 = arith.constant 1.500000e+00 : f32
        %12 = arith.mulf %11, %11 : f32
        %13 = arith.mulf %12, %7 : f32
        %14 = arith.subf %cst_1, %13 : f32
        %15 = arith.mulf %14, %12 : f32
        %16 = arith.subf %4, %2 : f32
        %17 = arith.mulf %16, %15 : f32
        %18 = arith.mulf %17, %0 : f32
        %19 = arith.addf %18, %1 : f32
        affine.store %19, %arg5[0, 0, %arg6, %arg7] : memref<1x64x112x112xf32>
        %20 = affine.apply #map(%arg7)
        %21 = affine.load %arg4[0, 0, %arg6, %20] : memref<1x64x112x112xf32>
        %22 = arith.truncf %cst : f64 to f32
        %23 = arith.addf %3, %22 : f32
        %cst_2 = arith.constant 5.000000e-01 : f32
        %24 = arith.mulf %23, %cst_2 : f32
        %25 = arith.bitcast %23 : f32 to i32
        %c1_i32_3 = arith.constant 1 : i32
        %26 = arith.shrui %25, %c1_i32_3 : i32
        %c1597463007_i32_4 = arith.constant 1597463007 : i32
        %27 = arith.subi %c1597463007_i32_4, %26 : i32
        %28 = arith.bitcast %27 : i32 to f32
        %cst_5 = arith.constant 1.500000e+00 : f32
        %29 = arith.mulf %28, %28 : f32
        %30 = arith.mulf %29, %24 : f32
        %31 = arith.subf %cst_5, %30 : f32
        %32 = arith.mulf %31, %29 : f32
        %33 = arith.subf %21, %2 : f32
        %34 = arith.mulf %33, %32 : f32
        %35 = arith.mulf %34, %0 : f32
        %36 = arith.addf %35, %1 : f32
        affine.store %36, %arg5[0, 0, %arg6, %20] : memref<1x64x112x112xf32>
        %37 = affine.apply #map1(%arg7)
        %38 = affine.load %arg4[0, 0, %arg6, %37] : memref<1x64x112x112xf32>
        %39 = arith.truncf %cst : f64 to f32
        %40 = arith.addf %3, %39 : f32
        %cst_6 = arith.constant 5.000000e-01 : f32
        %41 = arith.mulf %40, %cst_6 : f32
        %42 = arith.bitcast %40 : f32 to i32
        %c1_i32_7 = arith.constant 1 : i32
        %43 = arith.shrui %42, %c1_i32_7 : i32
        %c1597463007_i32_8 = arith.constant 1597463007 : i32
        %44 = arith.subi %c1597463007_i32_8, %43 : i32
        %45 = arith.bitcast %44 : i32 to f32
        %cst_9 = arith.constant 1.500000e+00 : f32
        %46 = arith.mulf %45, %45 : f32
        %47 = arith.mulf %46, %41 : f32
        %48 = arith.subf %cst_9, %47 : f32
        %49 = arith.mulf %48, %46 : f32
        %50 = arith.subf %38, %2 : f32
        %51 = arith.mulf %50, %49 : f32
        %52 = arith.mulf %51, %0 : f32
        %53 = arith.addf %52, %1 : f32
        affine.store %53, %arg5[0, 0, %arg6, %37] : memref<1x64x112x112xf32>
        %54 = affine.apply #map2(%arg7)
        %55 = affine.load %arg4[0, 0, %arg6, %54] : memref<1x64x112x112xf32>
        %56 = arith.truncf %cst : f64 to f32
        %57 = arith.addf %3, %56 : f32
        %cst_10 = arith.constant 5.000000e-01 : f32
        %58 = arith.mulf %57, %cst_10 : f32
        %59 = arith.bitcast %57 : f32 to i32
        %c1_i32_11 = arith.constant 1 : i32
        %60 = arith.shrui %59, %c1_i32_11 : i32
        %c1597463007_i32_12 = arith.constant 1597463007 : i32
        %61 = arith.subi %c1597463007_i32_12, %60 : i32
        %62 = arith.bitcast %61 : i32 to f32
        %cst_13 = arith.constant 1.500000e+00 : f32
        %63 = arith.mulf %62, %62 : f32
        %64 = arith.mulf %63, %58 : f32
        %65 = arith.subf %cst_13, %64 : f32
        %66 = arith.mulf %65, %63 : f32
        %67 = arith.subf %55, %2 : f32
        %68 = arith.mulf %67, %66 : f32
        %69 = arith.mulf %68, %0 : f32
        %70 = arith.addf %69, %1 : f32
        affine.store %70, %arg5[0, 0, %arg6, %54] : memref<1x64x112x112xf32>
        %71 = affine.apply #map3(%arg7)
        %72 = affine.load %arg4[0, 0, %arg6, %71] : memref<1x64x112x112xf32>
        %73 = arith.truncf %cst : f64 to f32
        %74 = arith.addf %3, %73 : f32
        %cst_14 = arith.constant 5.000000e-01 : f32
        %75 = arith.mulf %74, %cst_14 : f32
        %76 = arith.bitcast %74 : f32 to i32
        %c1_i32_15 = arith.constant 1 : i32
        %77 = arith.shrui %76, %c1_i32_15 : i32
        %c1597463007_i32_16 = arith.constant 1597463007 : i32
        %78 = arith.subi %c1597463007_i32_16, %77 : i32
        %79 = arith.bitcast %78 : i32 to f32
        %cst_17 = arith.constant 1.500000e+00 : f32
        %80 = arith.mulf %79, %79 : f32
        %81 = arith.mulf %80, %75 : f32
        %82 = arith.subf %cst_17, %81 : f32
        %83 = arith.mulf %82, %80 : f32
        %84 = arith.subf %72, %2 : f32
        %85 = arith.mulf %84, %83 : f32
        %86 = arith.mulf %85, %0 : f32
        %87 = arith.addf %86, %1 : f32
        affine.store %87, %arg5[0, 0, %arg6, %71] : memref<1x64x112x112xf32>
        %88 = affine.apply #map4(%arg7)
        %89 = affine.load %arg4[0, 0, %arg6, %88] : memref<1x64x112x112xf32>
        %90 = arith.truncf %cst : f64 to f32
        %91 = arith.addf %3, %90 : f32
        %cst_18 = arith.constant 5.000000e-01 : f32
        %92 = arith.mulf %91, %cst_18 : f32
        %93 = arith.bitcast %91 : f32 to i32
        %c1_i32_19 = arith.constant 1 : i32
        %94 = arith.shrui %93, %c1_i32_19 : i32
        %c1597463007_i32_20 = arith.constant 1597463007 : i32
        %95 = arith.subi %c1597463007_i32_20, %94 : i32
        %96 = arith.bitcast %95 : i32 to f32
        %cst_21 = arith.constant 1.500000e+00 : f32
        %97 = arith.mulf %96, %96 : f32
        %98 = arith.mulf %97, %92 : f32
        %99 = arith.subf %cst_21, %98 : f32
        %100 = arith.mulf %99, %97 : f32
        %101 = arith.subf %89, %2 : f32
        %102 = arith.mulf %101, %100 : f32
        %103 = arith.mulf %102, %0 : f32
        %104 = arith.addf %103, %1 : f32
        affine.store %104, %arg5[0, 0, %arg6, %88] : memref<1x64x112x112xf32>
        %105 = affine.apply #map5(%arg7)
        %106 = affine.load %arg4[0, 0, %arg6, %105] : memref<1x64x112x112xf32>
        %107 = arith.truncf %cst : f64 to f32
        %108 = arith.addf %3, %107 : f32
        %cst_22 = arith.constant 5.000000e-01 : f32
        %109 = arith.mulf %108, %cst_22 : f32
        %110 = arith.bitcast %108 : f32 to i32
        %c1_i32_23 = arith.constant 1 : i32
        %111 = arith.shrui %110, %c1_i32_23 : i32
        %c1597463007_i32_24 = arith.constant 1597463007 : i32
        %112 = arith.subi %c1597463007_i32_24, %111 : i32
        %113 = arith.bitcast %112 : i32 to f32
        %cst_25 = arith.constant 1.500000e+00 : f32
        %114 = arith.mulf %113, %113 : f32
        %115 = arith.mulf %114, %109 : f32
        %116 = arith.subf %cst_25, %115 : f32
        %117 = arith.mulf %116, %114 : f32
        %118 = arith.subf %106, %2 : f32
        %119 = arith.mulf %118, %117 : f32
        %120 = arith.mulf %119, %0 : f32
        %121 = arith.addf %120, %1 : f32
        affine.store %121, %arg5[0, 0, %arg6, %105] : memref<1x64x112x112xf32>
        %122 = affine.apply #map6(%arg7)
        %123 = affine.load %arg4[0, 0, %arg6, %122] : memref<1x64x112x112xf32>
        %124 = arith.truncf %cst : f64 to f32
        %125 = arith.addf %3, %124 : f32
        %cst_26 = arith.constant 5.000000e-01 : f32
        %126 = arith.mulf %125, %cst_26 : f32
        %127 = arith.bitcast %125 : f32 to i32
        %c1_i32_27 = arith.constant 1 : i32
        %128 = arith.shrui %127, %c1_i32_27 : i32
        %c1597463007_i32_28 = arith.constant 1597463007 : i32
        %129 = arith.subi %c1597463007_i32_28, %128 : i32
        %130 = arith.bitcast %129 : i32 to f32
        %cst_29 = arith.constant 1.500000e+00 : f32
        %131 = arith.mulf %130, %130 : f32
        %132 = arith.mulf %131, %126 : f32
        %133 = arith.subf %cst_29, %132 : f32
        %134 = arith.mulf %133, %131 : f32
        %135 = arith.subf %123, %2 : f32
        %136 = arith.mulf %135, %134 : f32
        %137 = arith.mulf %136, %0 : f32
        %138 = arith.addf %137, %1 : f32
        affine.store %138, %arg5[0, 0, %arg6, %122] : memref<1x64x112x112xf32>
        %139 = affine.apply #map7(%arg7)
        %140 = affine.load %arg4[0, 0, %arg6, %139] : memref<1x64x112x112xf32>
        %141 = arith.truncf %cst : f64 to f32
        %142 = arith.addf %3, %141 : f32
        %cst_30 = arith.constant 5.000000e-01 : f32
        %143 = arith.mulf %142, %cst_30 : f32
        %144 = arith.bitcast %142 : f32 to i32
        %c1_i32_31 = arith.constant 1 : i32
        %145 = arith.shrui %144, %c1_i32_31 : i32
        %c1597463007_i32_32 = arith.constant 1597463007 : i32
        %146 = arith.subi %c1597463007_i32_32, %145 : i32
        %147 = arith.bitcast %146 : i32 to f32
        %cst_33 = arith.constant 1.500000e+00 : f32
        %148 = arith.mulf %147, %147 : f32
        %149 = arith.mulf %148, %143 : f32
        %150 = arith.subf %cst_33, %149 : f32
        %151 = arith.mulf %150, %148 : f32
        %152 = arith.subf %140, %2 : f32
        %153 = arith.mulf %152, %151 : f32
        %154 = arith.mulf %153, %0 : f32
        %155 = arith.addf %154, %1 : f32
        affine.store %155, %arg5[0, 0, %arg6, %139] : memref<1x64x112x112xf32>
        %156 = affine.apply #map8(%arg7)
        %157 = affine.load %arg4[0, 0, %arg6, %156] : memref<1x64x112x112xf32>
        %158 = arith.truncf %cst : f64 to f32
        %159 = arith.addf %3, %158 : f32
        %cst_34 = arith.constant 5.000000e-01 : f32
        %160 = arith.mulf %159, %cst_34 : f32
        %161 = arith.bitcast %159 : f32 to i32
        %c1_i32_35 = arith.constant 1 : i32
        %162 = arith.shrui %161, %c1_i32_35 : i32
        %c1597463007_i32_36 = arith.constant 1597463007 : i32
        %163 = arith.subi %c1597463007_i32_36, %162 : i32
        %164 = arith.bitcast %163 : i32 to f32
        %cst_37 = arith.constant 1.500000e+00 : f32
        %165 = arith.mulf %164, %164 : f32
        %166 = arith.mulf %165, %160 : f32
        %167 = arith.subf %cst_37, %166 : f32
        %168 = arith.mulf %167, %165 : f32
        %169 = arith.subf %157, %2 : f32
        %170 = arith.mulf %169, %168 : f32
        %171 = arith.mulf %170, %0 : f32
        %172 = arith.addf %171, %1 : f32
        affine.store %172, %arg5[0, 0, %arg6, %156] : memref<1x64x112x112xf32>
        %173 = affine.apply #map9(%arg7)
        %174 = affine.load %arg4[0, 0, %arg6, %173] : memref<1x64x112x112xf32>
        %175 = arith.truncf %cst : f64 to f32
        %176 = arith.addf %3, %175 : f32
        %cst_38 = arith.constant 5.000000e-01 : f32
        %177 = arith.mulf %176, %cst_38 : f32
        %178 = arith.bitcast %176 : f32 to i32
        %c1_i32_39 = arith.constant 1 : i32
        %179 = arith.shrui %178, %c1_i32_39 : i32
        %c1597463007_i32_40 = arith.constant 1597463007 : i32
        %180 = arith.subi %c1597463007_i32_40, %179 : i32
        %181 = arith.bitcast %180 : i32 to f32
        %cst_41 = arith.constant 1.500000e+00 : f32
        %182 = arith.mulf %181, %181 : f32
        %183 = arith.mulf %182, %177 : f32
        %184 = arith.subf %cst_41, %183 : f32
        %185 = arith.mulf %184, %182 : f32
        %186 = arith.subf %174, %2 : f32
        %187 = arith.mulf %186, %185 : f32
        %188 = arith.mulf %187, %0 : f32
        %189 = arith.addf %188, %1 : f32
        affine.store %189, %arg5[0, 0, %arg6, %173] : memref<1x64x112x112xf32>
        %190 = affine.apply #map10(%arg7)
        %191 = affine.load %arg4[0, 0, %arg6, %190] : memref<1x64x112x112xf32>
        %192 = arith.truncf %cst : f64 to f32
        %193 = arith.addf %3, %192 : f32
        %cst_42 = arith.constant 5.000000e-01 : f32
        %194 = arith.mulf %193, %cst_42 : f32
        %195 = arith.bitcast %193 : f32 to i32
        %c1_i32_43 = arith.constant 1 : i32
        %196 = arith.shrui %195, %c1_i32_43 : i32
        %c1597463007_i32_44 = arith.constant 1597463007 : i32
        %197 = arith.subi %c1597463007_i32_44, %196 : i32
        %198 = arith.bitcast %197 : i32 to f32
        %cst_45 = arith.constant 1.500000e+00 : f32
        %199 = arith.mulf %198, %198 : f32
        %200 = arith.mulf %199, %194 : f32
        %201 = arith.subf %cst_45, %200 : f32
        %202 = arith.mulf %201, %199 : f32
        %203 = arith.subf %191, %2 : f32
        %204 = arith.mulf %203, %202 : f32
        %205 = arith.mulf %204, %0 : f32
        %206 = arith.addf %205, %1 : f32
        affine.store %206, %arg5[0, 0, %arg6, %190] : memref<1x64x112x112xf32>
        %207 = affine.apply #map11(%arg7)
        %208 = affine.load %arg4[0, 0, %arg6, %207] : memref<1x64x112x112xf32>
        %209 = arith.truncf %cst : f64 to f32
        %210 = arith.addf %3, %209 : f32
        %cst_46 = arith.constant 5.000000e-01 : f32
        %211 = arith.mulf %210, %cst_46 : f32
        %212 = arith.bitcast %210 : f32 to i32
        %c1_i32_47 = arith.constant 1 : i32
        %213 = arith.shrui %212, %c1_i32_47 : i32
        %c1597463007_i32_48 = arith.constant 1597463007 : i32
        %214 = arith.subi %c1597463007_i32_48, %213 : i32
        %215 = arith.bitcast %214 : i32 to f32
        %cst_49 = arith.constant 1.500000e+00 : f32
        %216 = arith.mulf %215, %215 : f32
        %217 = arith.mulf %216, %211 : f32
        %218 = arith.subf %cst_49, %217 : f32
        %219 = arith.mulf %218, %216 : f32
        %220 = arith.subf %208, %2 : f32
        %221 = arith.mulf %220, %219 : f32
        %222 = arith.mulf %221, %0 : f32
        %223 = arith.addf %222, %1 : f32
        affine.store %223, %arg5[0, 0, %arg6, %207] : memref<1x64x112x112xf32>
        %224 = affine.apply #map12(%arg7)
        %225 = affine.load %arg4[0, 0, %arg6, %224] : memref<1x64x112x112xf32>
        %226 = arith.truncf %cst : f64 to f32
        %227 = arith.addf %3, %226 : f32
        %cst_50 = arith.constant 5.000000e-01 : f32
        %228 = arith.mulf %227, %cst_50 : f32
        %229 = arith.bitcast %227 : f32 to i32
        %c1_i32_51 = arith.constant 1 : i32
        %230 = arith.shrui %229, %c1_i32_51 : i32
        %c1597463007_i32_52 = arith.constant 1597463007 : i32
        %231 = arith.subi %c1597463007_i32_52, %230 : i32
        %232 = arith.bitcast %231 : i32 to f32
        %cst_53 = arith.constant 1.500000e+00 : f32
        %233 = arith.mulf %232, %232 : f32
        %234 = arith.mulf %233, %228 : f32
        %235 = arith.subf %cst_53, %234 : f32
        %236 = arith.mulf %235, %233 : f32
        %237 = arith.subf %225, %2 : f32
        %238 = arith.mulf %237, %236 : f32
        %239 = arith.mulf %238, %0 : f32
        %240 = arith.addf %239, %1 : f32
        affine.store %240, %arg5[0, 0, %arg6, %224] : memref<1x64x112x112xf32>
        %241 = affine.apply #map13(%arg7)
        %242 = affine.load %arg4[0, 0, %arg6, %241] : memref<1x64x112x112xf32>
        %243 = arith.truncf %cst : f64 to f32
        %244 = arith.addf %3, %243 : f32
        %cst_54 = arith.constant 5.000000e-01 : f32
        %245 = arith.mulf %244, %cst_54 : f32
        %246 = arith.bitcast %244 : f32 to i32
        %c1_i32_55 = arith.constant 1 : i32
        %247 = arith.shrui %246, %c1_i32_55 : i32
        %c1597463007_i32_56 = arith.constant 1597463007 : i32
        %248 = arith.subi %c1597463007_i32_56, %247 : i32
        %249 = arith.bitcast %248 : i32 to f32
        %cst_57 = arith.constant 1.500000e+00 : f32
        %250 = arith.mulf %249, %249 : f32
        %251 = arith.mulf %250, %245 : f32
        %252 = arith.subf %cst_57, %251 : f32
        %253 = arith.mulf %252, %250 : f32
        %254 = arith.subf %242, %2 : f32
        %255 = arith.mulf %254, %253 : f32
        %256 = arith.mulf %255, %0 : f32
        %257 = arith.addf %256, %1 : f32
        affine.store %257, %arg5[0, 0, %arg6, %241] : memref<1x64x112x112xf32>
        %258 = affine.apply #map14(%arg7)
        %259 = affine.load %arg4[0, 0, %arg6, %258] : memref<1x64x112x112xf32>
        %260 = arith.truncf %cst : f64 to f32
        %261 = arith.addf %3, %260 : f32
        %cst_58 = arith.constant 5.000000e-01 : f32
        %262 = arith.mulf %261, %cst_58 : f32
        %263 = arith.bitcast %261 : f32 to i32
        %c1_i32_59 = arith.constant 1 : i32
        %264 = arith.shrui %263, %c1_i32_59 : i32
        %c1597463007_i32_60 = arith.constant 1597463007 : i32
        %265 = arith.subi %c1597463007_i32_60, %264 : i32
        %266 = arith.bitcast %265 : i32 to f32
        %cst_61 = arith.constant 1.500000e+00 : f32
        %267 = arith.mulf %266, %266 : f32
        %268 = arith.mulf %267, %262 : f32
        %269 = arith.subf %cst_61, %268 : f32
        %270 = arith.mulf %269, %267 : f32
        %271 = arith.subf %259, %2 : f32
        %272 = arith.mulf %271, %270 : f32
        %273 = arith.mulf %272, %0 : f32
        %274 = arith.addf %273, %1 : f32
        affine.store %274, %arg5[0, 0, %arg6, %258] : memref<1x64x112x112xf32>
        %275 = affine.apply #map15(%arg7)
        %276 = affine.load %arg4[0, 0, %arg6, %275] : memref<1x64x112x112xf32>
        %277 = arith.truncf %cst : f64 to f32
        %278 = arith.addf %3, %277 : f32
        %cst_62 = arith.constant 5.000000e-01 : f32
        %279 = arith.mulf %278, %cst_62 : f32
        %280 = arith.bitcast %278 : f32 to i32
        %c1_i32_63 = arith.constant 1 : i32
        %281 = arith.shrui %280, %c1_i32_63 : i32
        %c1597463007_i32_64 = arith.constant 1597463007 : i32
        %282 = arith.subi %c1597463007_i32_64, %281 : i32
        %283 = arith.bitcast %282 : i32 to f32
        %cst_65 = arith.constant 1.500000e+00 : f32
        %284 = arith.mulf %283, %283 : f32
        %285 = arith.mulf %284, %279 : f32
        %286 = arith.subf %cst_65, %285 : f32
        %287 = arith.mulf %286, %284 : f32
        %288 = arith.subf %276, %2 : f32
        %289 = arith.mulf %288, %287 : f32
        %290 = arith.mulf %289, %0 : f32
        %291 = arith.addf %290, %1 : f32
        affine.store %291, %arg5[0, 0, %arg6, %275] : memref<1x64x112x112xf32>
        %292 = affine.apply #map16(%arg7)
        %293 = affine.load %arg4[0, 0, %arg6, %292] : memref<1x64x112x112xf32>
        %294 = arith.truncf %cst : f64 to f32
        %295 = arith.addf %3, %294 : f32
        %cst_66 = arith.constant 5.000000e-01 : f32
        %296 = arith.mulf %295, %cst_66 : f32
        %297 = arith.bitcast %295 : f32 to i32
        %c1_i32_67 = arith.constant 1 : i32
        %298 = arith.shrui %297, %c1_i32_67 : i32
        %c1597463007_i32_68 = arith.constant 1597463007 : i32
        %299 = arith.subi %c1597463007_i32_68, %298 : i32
        %300 = arith.bitcast %299 : i32 to f32
        %cst_69 = arith.constant 1.500000e+00 : f32
        %301 = arith.mulf %300, %300 : f32
        %302 = arith.mulf %301, %296 : f32
        %303 = arith.subf %cst_69, %302 : f32
        %304 = arith.mulf %303, %301 : f32
        %305 = arith.subf %293, %2 : f32
        %306 = arith.mulf %305, %304 : f32
        %307 = arith.mulf %306, %0 : f32
        %308 = arith.addf %307, %1 : f32
        affine.store %308, %arg5[0, 0, %arg6, %292] : memref<1x64x112x112xf32>
        %309 = affine.apply #map17(%arg7)
        %310 = affine.load %arg4[0, 0, %arg6, %309] : memref<1x64x112x112xf32>
        %311 = arith.truncf %cst : f64 to f32
        %312 = arith.addf %3, %311 : f32
        %cst_70 = arith.constant 5.000000e-01 : f32
        %313 = arith.mulf %312, %cst_70 : f32
        %314 = arith.bitcast %312 : f32 to i32
        %c1_i32_71 = arith.constant 1 : i32
        %315 = arith.shrui %314, %c1_i32_71 : i32
        %c1597463007_i32_72 = arith.constant 1597463007 : i32
        %316 = arith.subi %c1597463007_i32_72, %315 : i32
        %317 = arith.bitcast %316 : i32 to f32
        %cst_73 = arith.constant 1.500000e+00 : f32
        %318 = arith.mulf %317, %317 : f32
        %319 = arith.mulf %318, %313 : f32
        %320 = arith.subf %cst_73, %319 : f32
        %321 = arith.mulf %320, %318 : f32
        %322 = arith.subf %310, %2 : f32
        %323 = arith.mulf %322, %321 : f32
        %324 = arith.mulf %323, %0 : f32
        %325 = arith.addf %324, %1 : f32
        affine.store %325, %arg5[0, 0, %arg6, %309] : memref<1x64x112x112xf32>
        %326 = affine.apply #map18(%arg7)
        %327 = affine.load %arg4[0, 0, %arg6, %326] : memref<1x64x112x112xf32>
        %328 = arith.truncf %cst : f64 to f32
        %329 = arith.addf %3, %328 : f32
        %cst_74 = arith.constant 5.000000e-01 : f32
        %330 = arith.mulf %329, %cst_74 : f32
        %331 = arith.bitcast %329 : f32 to i32
        %c1_i32_75 = arith.constant 1 : i32
        %332 = arith.shrui %331, %c1_i32_75 : i32
        %c1597463007_i32_76 = arith.constant 1597463007 : i32
        %333 = arith.subi %c1597463007_i32_76, %332 : i32
        %334 = arith.bitcast %333 : i32 to f32
        %cst_77 = arith.constant 1.500000e+00 : f32
        %335 = arith.mulf %334, %334 : f32
        %336 = arith.mulf %335, %330 : f32
        %337 = arith.subf %cst_77, %336 : f32
        %338 = arith.mulf %337, %335 : f32
        %339 = arith.subf %327, %2 : f32
        %340 = arith.mulf %339, %338 : f32
        %341 = arith.mulf %340, %0 : f32
        %342 = arith.addf %341, %1 : f32
        affine.store %342, %arg5[0, 0, %arg6, %326] : memref<1x64x112x112xf32>
        %343 = affine.apply #map19(%arg7)
        %344 = affine.load %arg4[0, 0, %arg6, %343] : memref<1x64x112x112xf32>
        %345 = arith.truncf %cst : f64 to f32
        %346 = arith.addf %3, %345 : f32
        %cst_78 = arith.constant 5.000000e-01 : f32
        %347 = arith.mulf %346, %cst_78 : f32
        %348 = arith.bitcast %346 : f32 to i32
        %c1_i32_79 = arith.constant 1 : i32
        %349 = arith.shrui %348, %c1_i32_79 : i32
        %c1597463007_i32_80 = arith.constant 1597463007 : i32
        %350 = arith.subi %c1597463007_i32_80, %349 : i32
        %351 = arith.bitcast %350 : i32 to f32
        %cst_81 = arith.constant 1.500000e+00 : f32
        %352 = arith.mulf %351, %351 : f32
        %353 = arith.mulf %352, %347 : f32
        %354 = arith.subf %cst_81, %353 : f32
        %355 = arith.mulf %354, %352 : f32
        %356 = arith.subf %344, %2 : f32
        %357 = arith.mulf %356, %355 : f32
        %358 = arith.mulf %357, %0 : f32
        %359 = arith.addf %358, %1 : f32
        affine.store %359, %arg5[0, 0, %arg6, %343] : memref<1x64x112x112xf32>
        %360 = affine.apply #map20(%arg7)
        %361 = affine.load %arg4[0, 0, %arg6, %360] : memref<1x64x112x112xf32>
        %362 = arith.truncf %cst : f64 to f32
        %363 = arith.addf %3, %362 : f32
        %cst_82 = arith.constant 5.000000e-01 : f32
        %364 = arith.mulf %363, %cst_82 : f32
        %365 = arith.bitcast %363 : f32 to i32
        %c1_i32_83 = arith.constant 1 : i32
        %366 = arith.shrui %365, %c1_i32_83 : i32
        %c1597463007_i32_84 = arith.constant 1597463007 : i32
        %367 = arith.subi %c1597463007_i32_84, %366 : i32
        %368 = arith.bitcast %367 : i32 to f32
        %cst_85 = arith.constant 1.500000e+00 : f32
        %369 = arith.mulf %368, %368 : f32
        %370 = arith.mulf %369, %364 : f32
        %371 = arith.subf %cst_85, %370 : f32
        %372 = arith.mulf %371, %369 : f32
        %373 = arith.subf %361, %2 : f32
        %374 = arith.mulf %373, %372 : f32
        %375 = arith.mulf %374, %0 : f32
        %376 = arith.addf %375, %1 : f32
        affine.store %376, %arg5[0, 0, %arg6, %360] : memref<1x64x112x112xf32>
        %377 = affine.apply #map21(%arg7)
        %378 = affine.load %arg4[0, 0, %arg6, %377] : memref<1x64x112x112xf32>
        %379 = arith.truncf %cst : f64 to f32
        %380 = arith.addf %3, %379 : f32
        %cst_86 = arith.constant 5.000000e-01 : f32
        %381 = arith.mulf %380, %cst_86 : f32
        %382 = arith.bitcast %380 : f32 to i32
        %c1_i32_87 = arith.constant 1 : i32
        %383 = arith.shrui %382, %c1_i32_87 : i32
        %c1597463007_i32_88 = arith.constant 1597463007 : i32
        %384 = arith.subi %c1597463007_i32_88, %383 : i32
        %385 = arith.bitcast %384 : i32 to f32
        %cst_89 = arith.constant 1.500000e+00 : f32
        %386 = arith.mulf %385, %385 : f32
        %387 = arith.mulf %386, %381 : f32
        %388 = arith.subf %cst_89, %387 : f32
        %389 = arith.mulf %388, %386 : f32
        %390 = arith.subf %378, %2 : f32
        %391 = arith.mulf %390, %389 : f32
        %392 = arith.mulf %391, %0 : f32
        %393 = arith.addf %392, %1 : f32
        affine.store %393, %arg5[0, 0, %arg6, %377] : memref<1x64x112x112xf32>
        %394 = affine.apply #map22(%arg7)
        %395 = affine.load %arg4[0, 0, %arg6, %394] : memref<1x64x112x112xf32>
        %396 = arith.truncf %cst : f64 to f32
        %397 = arith.addf %3, %396 : f32
        %cst_90 = arith.constant 5.000000e-01 : f32
        %398 = arith.mulf %397, %cst_90 : f32
        %399 = arith.bitcast %397 : f32 to i32
        %c1_i32_91 = arith.constant 1 : i32
        %400 = arith.shrui %399, %c1_i32_91 : i32
        %c1597463007_i32_92 = arith.constant 1597463007 : i32
        %401 = arith.subi %c1597463007_i32_92, %400 : i32
        %402 = arith.bitcast %401 : i32 to f32
        %cst_93 = arith.constant 1.500000e+00 : f32
        %403 = arith.mulf %402, %402 : f32
        %404 = arith.mulf %403, %398 : f32
        %405 = arith.subf %cst_93, %404 : f32
        %406 = arith.mulf %405, %403 : f32
        %407 = arith.subf %395, %2 : f32
        %408 = arith.mulf %407, %406 : f32
        %409 = arith.mulf %408, %0 : f32
        %410 = arith.addf %409, %1 : f32
        affine.store %410, %arg5[0, 0, %arg6, %394] : memref<1x64x112x112xf32>
        %411 = affine.apply #map23(%arg7)
        %412 = affine.load %arg4[0, 0, %arg6, %411] : memref<1x64x112x112xf32>
        %413 = arith.truncf %cst : f64 to f32
        %414 = arith.addf %3, %413 : f32
        %cst_94 = arith.constant 5.000000e-01 : f32
        %415 = arith.mulf %414, %cst_94 : f32
        %416 = arith.bitcast %414 : f32 to i32
        %c1_i32_95 = arith.constant 1 : i32
        %417 = arith.shrui %416, %c1_i32_95 : i32
        %c1597463007_i32_96 = arith.constant 1597463007 : i32
        %418 = arith.subi %c1597463007_i32_96, %417 : i32
        %419 = arith.bitcast %418 : i32 to f32
        %cst_97 = arith.constant 1.500000e+00 : f32
        %420 = arith.mulf %419, %419 : f32
        %421 = arith.mulf %420, %415 : f32
        %422 = arith.subf %cst_97, %421 : f32
        %423 = arith.mulf %422, %420 : f32
        %424 = arith.subf %412, %2 : f32
        %425 = arith.mulf %424, %423 : f32
        %426 = arith.mulf %425, %0 : f32
        %427 = arith.addf %426, %1 : f32
        affine.store %427, %arg5[0, 0, %arg6, %411] : memref<1x64x112x112xf32>
        %428 = affine.apply #map24(%arg7)
        %429 = affine.load %arg4[0, 0, %arg6, %428] : memref<1x64x112x112xf32>
        %430 = arith.truncf %cst : f64 to f32
        %431 = arith.addf %3, %430 : f32
        %cst_98 = arith.constant 5.000000e-01 : f32
        %432 = arith.mulf %431, %cst_98 : f32
        %433 = arith.bitcast %431 : f32 to i32
        %c1_i32_99 = arith.constant 1 : i32
        %434 = arith.shrui %433, %c1_i32_99 : i32
        %c1597463007_i32_100 = arith.constant 1597463007 : i32
        %435 = arith.subi %c1597463007_i32_100, %434 : i32
        %436 = arith.bitcast %435 : i32 to f32
        %cst_101 = arith.constant 1.500000e+00 : f32
        %437 = arith.mulf %436, %436 : f32
        %438 = arith.mulf %437, %432 : f32
        %439 = arith.subf %cst_101, %438 : f32
        %440 = arith.mulf %439, %437 : f32
        %441 = arith.subf %429, %2 : f32
        %442 = arith.mulf %441, %440 : f32
        %443 = arith.mulf %442, %0 : f32
        %444 = arith.addf %443, %1 : f32
        affine.store %444, %arg5[0, 0, %arg6, %428] : memref<1x64x112x112xf32>
        %445 = affine.apply #map25(%arg7)
        %446 = affine.load %arg4[0, 0, %arg6, %445] : memref<1x64x112x112xf32>
        %447 = arith.truncf %cst : f64 to f32
        %448 = arith.addf %3, %447 : f32
        %cst_102 = arith.constant 5.000000e-01 : f32
        %449 = arith.mulf %448, %cst_102 : f32
        %450 = arith.bitcast %448 : f32 to i32
        %c1_i32_103 = arith.constant 1 : i32
        %451 = arith.shrui %450, %c1_i32_103 : i32
        %c1597463007_i32_104 = arith.constant 1597463007 : i32
        %452 = arith.subi %c1597463007_i32_104, %451 : i32
        %453 = arith.bitcast %452 : i32 to f32
        %cst_105 = arith.constant 1.500000e+00 : f32
        %454 = arith.mulf %453, %453 : f32
        %455 = arith.mulf %454, %449 : f32
        %456 = arith.subf %cst_105, %455 : f32
        %457 = arith.mulf %456, %454 : f32
        %458 = arith.subf %446, %2 : f32
        %459 = arith.mulf %458, %457 : f32
        %460 = arith.mulf %459, %0 : f32
        %461 = arith.addf %460, %1 : f32
        affine.store %461, %arg5[0, 0, %arg6, %445] : memref<1x64x112x112xf32>
        %462 = affine.apply #map26(%arg7)
        %463 = affine.load %arg4[0, 0, %arg6, %462] : memref<1x64x112x112xf32>
        %464 = arith.truncf %cst : f64 to f32
        %465 = arith.addf %3, %464 : f32
        %cst_106 = arith.constant 5.000000e-01 : f32
        %466 = arith.mulf %465, %cst_106 : f32
        %467 = arith.bitcast %465 : f32 to i32
        %c1_i32_107 = arith.constant 1 : i32
        %468 = arith.shrui %467, %c1_i32_107 : i32
        %c1597463007_i32_108 = arith.constant 1597463007 : i32
        %469 = arith.subi %c1597463007_i32_108, %468 : i32
        %470 = arith.bitcast %469 : i32 to f32
        %cst_109 = arith.constant 1.500000e+00 : f32
        %471 = arith.mulf %470, %470 : f32
        %472 = arith.mulf %471, %466 : f32
        %473 = arith.subf %cst_109, %472 : f32
        %474 = arith.mulf %473, %471 : f32
        %475 = arith.subf %463, %2 : f32
        %476 = arith.mulf %475, %474 : f32
        %477 = arith.mulf %476, %0 : f32
        %478 = arith.addf %477, %1 : f32
        affine.store %478, %arg5[0, 0, %arg6, %462] : memref<1x64x112x112xf32>
        %479 = affine.apply #map27(%arg7)
        %480 = affine.load %arg4[0, 0, %arg6, %479] : memref<1x64x112x112xf32>
        %481 = arith.truncf %cst : f64 to f32
        %482 = arith.addf %3, %481 : f32
        %cst_110 = arith.constant 5.000000e-01 : f32
        %483 = arith.mulf %482, %cst_110 : f32
        %484 = arith.bitcast %482 : f32 to i32
        %c1_i32_111 = arith.constant 1 : i32
        %485 = arith.shrui %484, %c1_i32_111 : i32
        %c1597463007_i32_112 = arith.constant 1597463007 : i32
        %486 = arith.subi %c1597463007_i32_112, %485 : i32
        %487 = arith.bitcast %486 : i32 to f32
        %cst_113 = arith.constant 1.500000e+00 : f32
        %488 = arith.mulf %487, %487 : f32
        %489 = arith.mulf %488, %483 : f32
        %490 = arith.subf %cst_113, %489 : f32
        %491 = arith.mulf %490, %488 : f32
        %492 = arith.subf %480, %2 : f32
        %493 = arith.mulf %492, %491 : f32
        %494 = arith.mulf %493, %0 : f32
        %495 = arith.addf %494, %1 : f32
        affine.store %495, %arg5[0, 0, %arg6, %479] : memref<1x64x112x112xf32>
        %496 = affine.apply #map28(%arg7)
        %497 = affine.load %arg4[0, 0, %arg6, %496] : memref<1x64x112x112xf32>
        %498 = arith.truncf %cst : f64 to f32
        %499 = arith.addf %3, %498 : f32
        %cst_114 = arith.constant 5.000000e-01 : f32
        %500 = arith.mulf %499, %cst_114 : f32
        %501 = arith.bitcast %499 : f32 to i32
        %c1_i32_115 = arith.constant 1 : i32
        %502 = arith.shrui %501, %c1_i32_115 : i32
        %c1597463007_i32_116 = arith.constant 1597463007 : i32
        %503 = arith.subi %c1597463007_i32_116, %502 : i32
        %504 = arith.bitcast %503 : i32 to f32
        %cst_117 = arith.constant 1.500000e+00 : f32
        %505 = arith.mulf %504, %504 : f32
        %506 = arith.mulf %505, %500 : f32
        %507 = arith.subf %cst_117, %506 : f32
        %508 = arith.mulf %507, %505 : f32
        %509 = arith.subf %497, %2 : f32
        %510 = arith.mulf %509, %508 : f32
        %511 = arith.mulf %510, %0 : f32
        %512 = arith.addf %511, %1 : f32
        affine.store %512, %arg5[0, 0, %arg6, %496] : memref<1x64x112x112xf32>
        %513 = affine.apply #map29(%arg7)
        %514 = affine.load %arg4[0, 0, %arg6, %513] : memref<1x64x112x112xf32>
        %515 = arith.truncf %cst : f64 to f32
        %516 = arith.addf %3, %515 : f32
        %cst_118 = arith.constant 5.000000e-01 : f32
        %517 = arith.mulf %516, %cst_118 : f32
        %518 = arith.bitcast %516 : f32 to i32
        %c1_i32_119 = arith.constant 1 : i32
        %519 = arith.shrui %518, %c1_i32_119 : i32
        %c1597463007_i32_120 = arith.constant 1597463007 : i32
        %520 = arith.subi %c1597463007_i32_120, %519 : i32
        %521 = arith.bitcast %520 : i32 to f32
        %cst_121 = arith.constant 1.500000e+00 : f32
        %522 = arith.mulf %521, %521 : f32
        %523 = arith.mulf %522, %517 : f32
        %524 = arith.subf %cst_121, %523 : f32
        %525 = arith.mulf %524, %522 : f32
        %526 = arith.subf %514, %2 : f32
        %527 = arith.mulf %526, %525 : f32
        %528 = arith.mulf %527, %0 : f32
        %529 = arith.addf %528, %1 : f32
        affine.store %529, %arg5[0, 0, %arg6, %513] : memref<1x64x112x112xf32>
        %530 = affine.apply #map30(%arg7)
        %531 = affine.load %arg4[0, 0, %arg6, %530] : memref<1x64x112x112xf32>
        %532 = arith.truncf %cst : f64 to f32
        %533 = arith.addf %3, %532 : f32
        %cst_122 = arith.constant 5.000000e-01 : f32
        %534 = arith.mulf %533, %cst_122 : f32
        %535 = arith.bitcast %533 : f32 to i32
        %c1_i32_123 = arith.constant 1 : i32
        %536 = arith.shrui %535, %c1_i32_123 : i32
        %c1597463007_i32_124 = arith.constant 1597463007 : i32
        %537 = arith.subi %c1597463007_i32_124, %536 : i32
        %538 = arith.bitcast %537 : i32 to f32
        %cst_125 = arith.constant 1.500000e+00 : f32
        %539 = arith.mulf %538, %538 : f32
        %540 = arith.mulf %539, %534 : f32
        %541 = arith.subf %cst_125, %540 : f32
        %542 = arith.mulf %541, %539 : f32
        %543 = arith.subf %531, %2 : f32
        %544 = arith.mulf %543, %542 : f32
        %545 = arith.mulf %544, %0 : f32
        %546 = arith.addf %545, %1 : f32
        affine.store %546, %arg5[0, 0, %arg6, %530] : memref<1x64x112x112xf32>
        %547 = affine.apply #map31(%arg7)
        %548 = affine.load %arg4[0, 0, %arg6, %547] : memref<1x64x112x112xf32>
        %549 = arith.truncf %cst : f64 to f32
        %550 = arith.addf %3, %549 : f32
        %cst_126 = arith.constant 5.000000e-01 : f32
        %551 = arith.mulf %550, %cst_126 : f32
        %552 = arith.bitcast %550 : f32 to i32
        %c1_i32_127 = arith.constant 1 : i32
        %553 = arith.shrui %552, %c1_i32_127 : i32
        %c1597463007_i32_128 = arith.constant 1597463007 : i32
        %554 = arith.subi %c1597463007_i32_128, %553 : i32
        %555 = arith.bitcast %554 : i32 to f32
        %cst_129 = arith.constant 1.500000e+00 : f32
        %556 = arith.mulf %555, %555 : f32
        %557 = arith.mulf %556, %551 : f32
        %558 = arith.subf %cst_129, %557 : f32
        %559 = arith.mulf %558, %556 : f32
        %560 = arith.subf %548, %2 : f32
        %561 = arith.mulf %560, %559 : f32
        %562 = arith.mulf %561, %0 : f32
        %563 = arith.addf %562, %1 : f32
        affine.store %563, %arg5[0, 0, %arg6, %547] : memref<1x64x112x112xf32>
        %564 = affine.apply #map32(%arg7)
        %565 = affine.load %arg4[0, 0, %arg6, %564] : memref<1x64x112x112xf32>
        %566 = arith.truncf %cst : f64 to f32
        %567 = arith.addf %3, %566 : f32
        %cst_130 = arith.constant 5.000000e-01 : f32
        %568 = arith.mulf %567, %cst_130 : f32
        %569 = arith.bitcast %567 : f32 to i32
        %c1_i32_131 = arith.constant 1 : i32
        %570 = arith.shrui %569, %c1_i32_131 : i32
        %c1597463007_i32_132 = arith.constant 1597463007 : i32
        %571 = arith.subi %c1597463007_i32_132, %570 : i32
        %572 = arith.bitcast %571 : i32 to f32
        %cst_133 = arith.constant 1.500000e+00 : f32
        %573 = arith.mulf %572, %572 : f32
        %574 = arith.mulf %573, %568 : f32
        %575 = arith.subf %cst_133, %574 : f32
        %576 = arith.mulf %575, %573 : f32
        %577 = arith.subf %565, %2 : f32
        %578 = arith.mulf %577, %576 : f32
        %579 = arith.mulf %578, %0 : f32
        %580 = arith.addf %579, %1 : f32
        affine.store %580, %arg5[0, 0, %arg6, %564] : memref<1x64x112x112xf32>
        %581 = affine.apply #map33(%arg7)
        %582 = affine.load %arg4[0, 0, %arg6, %581] : memref<1x64x112x112xf32>
        %583 = arith.truncf %cst : f64 to f32
        %584 = arith.addf %3, %583 : f32
        %cst_134 = arith.constant 5.000000e-01 : f32
        %585 = arith.mulf %584, %cst_134 : f32
        %586 = arith.bitcast %584 : f32 to i32
        %c1_i32_135 = arith.constant 1 : i32
        %587 = arith.shrui %586, %c1_i32_135 : i32
        %c1597463007_i32_136 = arith.constant 1597463007 : i32
        %588 = arith.subi %c1597463007_i32_136, %587 : i32
        %589 = arith.bitcast %588 : i32 to f32
        %cst_137 = arith.constant 1.500000e+00 : f32
        %590 = arith.mulf %589, %589 : f32
        %591 = arith.mulf %590, %585 : f32
        %592 = arith.subf %cst_137, %591 : f32
        %593 = arith.mulf %592, %590 : f32
        %594 = arith.subf %582, %2 : f32
        %595 = arith.mulf %594, %593 : f32
        %596 = arith.mulf %595, %0 : f32
        %597 = arith.addf %596, %1 : f32
        affine.store %597, %arg5[0, 0, %arg6, %581] : memref<1x64x112x112xf32>
        %598 = affine.apply #map34(%arg7)
        %599 = affine.load %arg4[0, 0, %arg6, %598] : memref<1x64x112x112xf32>
        %600 = arith.truncf %cst : f64 to f32
        %601 = arith.addf %3, %600 : f32
        %cst_138 = arith.constant 5.000000e-01 : f32
        %602 = arith.mulf %601, %cst_138 : f32
        %603 = arith.bitcast %601 : f32 to i32
        %c1_i32_139 = arith.constant 1 : i32
        %604 = arith.shrui %603, %c1_i32_139 : i32
        %c1597463007_i32_140 = arith.constant 1597463007 : i32
        %605 = arith.subi %c1597463007_i32_140, %604 : i32
        %606 = arith.bitcast %605 : i32 to f32
        %cst_141 = arith.constant 1.500000e+00 : f32
        %607 = arith.mulf %606, %606 : f32
        %608 = arith.mulf %607, %602 : f32
        %609 = arith.subf %cst_141, %608 : f32
        %610 = arith.mulf %609, %607 : f32
        %611 = arith.subf %599, %2 : f32
        %612 = arith.mulf %611, %610 : f32
        %613 = arith.mulf %612, %0 : f32
        %614 = arith.addf %613, %1 : f32
        affine.store %614, %arg5[0, 0, %arg6, %598] : memref<1x64x112x112xf32>
        %615 = affine.apply #map35(%arg7)
        %616 = affine.load %arg4[0, 0, %arg6, %615] : memref<1x64x112x112xf32>
        %617 = arith.truncf %cst : f64 to f32
        %618 = arith.addf %3, %617 : f32
        %cst_142 = arith.constant 5.000000e-01 : f32
        %619 = arith.mulf %618, %cst_142 : f32
        %620 = arith.bitcast %618 : f32 to i32
        %c1_i32_143 = arith.constant 1 : i32
        %621 = arith.shrui %620, %c1_i32_143 : i32
        %c1597463007_i32_144 = arith.constant 1597463007 : i32
        %622 = arith.subi %c1597463007_i32_144, %621 : i32
        %623 = arith.bitcast %622 : i32 to f32
        %cst_145 = arith.constant 1.500000e+00 : f32
        %624 = arith.mulf %623, %623 : f32
        %625 = arith.mulf %624, %619 : f32
        %626 = arith.subf %cst_145, %625 : f32
        %627 = arith.mulf %626, %624 : f32
        %628 = arith.subf %616, %2 : f32
        %629 = arith.mulf %628, %627 : f32
        %630 = arith.mulf %629, %0 : f32
        %631 = arith.addf %630, %1 : f32
        affine.store %631, %arg5[0, 0, %arg6, %615] : memref<1x64x112x112xf32>
        %632 = affine.apply #map36(%arg7)
        %633 = affine.load %arg4[0, 0, %arg6, %632] : memref<1x64x112x112xf32>
        %634 = arith.truncf %cst : f64 to f32
        %635 = arith.addf %3, %634 : f32
        %cst_146 = arith.constant 5.000000e-01 : f32
        %636 = arith.mulf %635, %cst_146 : f32
        %637 = arith.bitcast %635 : f32 to i32
        %c1_i32_147 = arith.constant 1 : i32
        %638 = arith.shrui %637, %c1_i32_147 : i32
        %c1597463007_i32_148 = arith.constant 1597463007 : i32
        %639 = arith.subi %c1597463007_i32_148, %638 : i32
        %640 = arith.bitcast %639 : i32 to f32
        %cst_149 = arith.constant 1.500000e+00 : f32
        %641 = arith.mulf %640, %640 : f32
        %642 = arith.mulf %641, %636 : f32
        %643 = arith.subf %cst_149, %642 : f32
        %644 = arith.mulf %643, %641 : f32
        %645 = arith.subf %633, %2 : f32
        %646 = arith.mulf %645, %644 : f32
        %647 = arith.mulf %646, %0 : f32
        %648 = arith.addf %647, %1 : f32
        affine.store %648, %arg5[0, 0, %arg6, %632] : memref<1x64x112x112xf32>
        %649 = affine.apply #map37(%arg7)
        %650 = affine.load %arg4[0, 0, %arg6, %649] : memref<1x64x112x112xf32>
        %651 = arith.truncf %cst : f64 to f32
        %652 = arith.addf %3, %651 : f32
        %cst_150 = arith.constant 5.000000e-01 : f32
        %653 = arith.mulf %652, %cst_150 : f32
        %654 = arith.bitcast %652 : f32 to i32
        %c1_i32_151 = arith.constant 1 : i32
        %655 = arith.shrui %654, %c1_i32_151 : i32
        %c1597463007_i32_152 = arith.constant 1597463007 : i32
        %656 = arith.subi %c1597463007_i32_152, %655 : i32
        %657 = arith.bitcast %656 : i32 to f32
        %cst_153 = arith.constant 1.500000e+00 : f32
        %658 = arith.mulf %657, %657 : f32
        %659 = arith.mulf %658, %653 : f32
        %660 = arith.subf %cst_153, %659 : f32
        %661 = arith.mulf %660, %658 : f32
        %662 = arith.subf %650, %2 : f32
        %663 = arith.mulf %662, %661 : f32
        %664 = arith.mulf %663, %0 : f32
        %665 = arith.addf %664, %1 : f32
        affine.store %665, %arg5[0, 0, %arg6, %649] : memref<1x64x112x112xf32>
        %666 = affine.apply #map38(%arg7)
        %667 = affine.load %arg4[0, 0, %arg6, %666] : memref<1x64x112x112xf32>
        %668 = arith.truncf %cst : f64 to f32
        %669 = arith.addf %3, %668 : f32
        %cst_154 = arith.constant 5.000000e-01 : f32
        %670 = arith.mulf %669, %cst_154 : f32
        %671 = arith.bitcast %669 : f32 to i32
        %c1_i32_155 = arith.constant 1 : i32
        %672 = arith.shrui %671, %c1_i32_155 : i32
        %c1597463007_i32_156 = arith.constant 1597463007 : i32
        %673 = arith.subi %c1597463007_i32_156, %672 : i32
        %674 = arith.bitcast %673 : i32 to f32
        %cst_157 = arith.constant 1.500000e+00 : f32
        %675 = arith.mulf %674, %674 : f32
        %676 = arith.mulf %675, %670 : f32
        %677 = arith.subf %cst_157, %676 : f32
        %678 = arith.mulf %677, %675 : f32
        %679 = arith.subf %667, %2 : f32
        %680 = arith.mulf %679, %678 : f32
        %681 = arith.mulf %680, %0 : f32
        %682 = arith.addf %681, %1 : f32
        affine.store %682, %arg5[0, 0, %arg6, %666] : memref<1x64x112x112xf32>
        %683 = affine.apply #map39(%arg7)
        %684 = affine.load %arg4[0, 0, %arg6, %683] : memref<1x64x112x112xf32>
        %685 = arith.truncf %cst : f64 to f32
        %686 = arith.addf %3, %685 : f32
        %cst_158 = arith.constant 5.000000e-01 : f32
        %687 = arith.mulf %686, %cst_158 : f32
        %688 = arith.bitcast %686 : f32 to i32
        %c1_i32_159 = arith.constant 1 : i32
        %689 = arith.shrui %688, %c1_i32_159 : i32
        %c1597463007_i32_160 = arith.constant 1597463007 : i32
        %690 = arith.subi %c1597463007_i32_160, %689 : i32
        %691 = arith.bitcast %690 : i32 to f32
        %cst_161 = arith.constant 1.500000e+00 : f32
        %692 = arith.mulf %691, %691 : f32
        %693 = arith.mulf %692, %687 : f32
        %694 = arith.subf %cst_161, %693 : f32
        %695 = arith.mulf %694, %692 : f32
        %696 = arith.subf %684, %2 : f32
        %697 = arith.mulf %696, %695 : f32
        %698 = arith.mulf %697, %0 : f32
        %699 = arith.addf %698, %1 : f32
        affine.store %699, %arg5[0, 0, %arg6, %683] : memref<1x64x112x112xf32>
        %700 = affine.apply #map40(%arg7)
        %701 = affine.load %arg4[0, 0, %arg6, %700] : memref<1x64x112x112xf32>
        %702 = arith.truncf %cst : f64 to f32
        %703 = arith.addf %3, %702 : f32
        %cst_162 = arith.constant 5.000000e-01 : f32
        %704 = arith.mulf %703, %cst_162 : f32
        %705 = arith.bitcast %703 : f32 to i32
        %c1_i32_163 = arith.constant 1 : i32
        %706 = arith.shrui %705, %c1_i32_163 : i32
        %c1597463007_i32_164 = arith.constant 1597463007 : i32
        %707 = arith.subi %c1597463007_i32_164, %706 : i32
        %708 = arith.bitcast %707 : i32 to f32
        %cst_165 = arith.constant 1.500000e+00 : f32
        %709 = arith.mulf %708, %708 : f32
        %710 = arith.mulf %709, %704 : f32
        %711 = arith.subf %cst_165, %710 : f32
        %712 = arith.mulf %711, %709 : f32
        %713 = arith.subf %701, %2 : f32
        %714 = arith.mulf %713, %712 : f32
        %715 = arith.mulf %714, %0 : f32
        %716 = arith.addf %715, %1 : f32
        affine.store %716, %arg5[0, 0, %arg6, %700] : memref<1x64x112x112xf32>
        %717 = affine.apply #map41(%arg7)
        %718 = affine.load %arg4[0, 0, %arg6, %717] : memref<1x64x112x112xf32>
        %719 = arith.truncf %cst : f64 to f32
        %720 = arith.addf %3, %719 : f32
        %cst_166 = arith.constant 5.000000e-01 : f32
        %721 = arith.mulf %720, %cst_166 : f32
        %722 = arith.bitcast %720 : f32 to i32
        %c1_i32_167 = arith.constant 1 : i32
        %723 = arith.shrui %722, %c1_i32_167 : i32
        %c1597463007_i32_168 = arith.constant 1597463007 : i32
        %724 = arith.subi %c1597463007_i32_168, %723 : i32
        %725 = arith.bitcast %724 : i32 to f32
        %cst_169 = arith.constant 1.500000e+00 : f32
        %726 = arith.mulf %725, %725 : f32
        %727 = arith.mulf %726, %721 : f32
        %728 = arith.subf %cst_169, %727 : f32
        %729 = arith.mulf %728, %726 : f32
        %730 = arith.subf %718, %2 : f32
        %731 = arith.mulf %730, %729 : f32
        %732 = arith.mulf %731, %0 : f32
        %733 = arith.addf %732, %1 : f32
        affine.store %733, %arg5[0, 0, %arg6, %717] : memref<1x64x112x112xf32>
        %734 = affine.apply #map42(%arg7)
        %735 = affine.load %arg4[0, 0, %arg6, %734] : memref<1x64x112x112xf32>
        %736 = arith.truncf %cst : f64 to f32
        %737 = arith.addf %3, %736 : f32
        %cst_170 = arith.constant 5.000000e-01 : f32
        %738 = arith.mulf %737, %cst_170 : f32
        %739 = arith.bitcast %737 : f32 to i32
        %c1_i32_171 = arith.constant 1 : i32
        %740 = arith.shrui %739, %c1_i32_171 : i32
        %c1597463007_i32_172 = arith.constant 1597463007 : i32
        %741 = arith.subi %c1597463007_i32_172, %740 : i32
        %742 = arith.bitcast %741 : i32 to f32
        %cst_173 = arith.constant 1.500000e+00 : f32
        %743 = arith.mulf %742, %742 : f32
        %744 = arith.mulf %743, %738 : f32
        %745 = arith.subf %cst_173, %744 : f32
        %746 = arith.mulf %745, %743 : f32
        %747 = arith.subf %735, %2 : f32
        %748 = arith.mulf %747, %746 : f32
        %749 = arith.mulf %748, %0 : f32
        %750 = arith.addf %749, %1 : f32
        affine.store %750, %arg5[0, 0, %arg6, %734] : memref<1x64x112x112xf32>
        %751 = affine.apply #map43(%arg7)
        %752 = affine.load %arg4[0, 0, %arg6, %751] : memref<1x64x112x112xf32>
        %753 = arith.truncf %cst : f64 to f32
        %754 = arith.addf %3, %753 : f32
        %cst_174 = arith.constant 5.000000e-01 : f32
        %755 = arith.mulf %754, %cst_174 : f32
        %756 = arith.bitcast %754 : f32 to i32
        %c1_i32_175 = arith.constant 1 : i32
        %757 = arith.shrui %756, %c1_i32_175 : i32
        %c1597463007_i32_176 = arith.constant 1597463007 : i32
        %758 = arith.subi %c1597463007_i32_176, %757 : i32
        %759 = arith.bitcast %758 : i32 to f32
        %cst_177 = arith.constant 1.500000e+00 : f32
        %760 = arith.mulf %759, %759 : f32
        %761 = arith.mulf %760, %755 : f32
        %762 = arith.subf %cst_177, %761 : f32
        %763 = arith.mulf %762, %760 : f32
        %764 = arith.subf %752, %2 : f32
        %765 = arith.mulf %764, %763 : f32
        %766 = arith.mulf %765, %0 : f32
        %767 = arith.addf %766, %1 : f32
        affine.store %767, %arg5[0, 0, %arg6, %751] : memref<1x64x112x112xf32>
        %768 = affine.apply #map44(%arg7)
        %769 = affine.load %arg4[0, 0, %arg6, %768] : memref<1x64x112x112xf32>
        %770 = arith.truncf %cst : f64 to f32
        %771 = arith.addf %3, %770 : f32
        %cst_178 = arith.constant 5.000000e-01 : f32
        %772 = arith.mulf %771, %cst_178 : f32
        %773 = arith.bitcast %771 : f32 to i32
        %c1_i32_179 = arith.constant 1 : i32
        %774 = arith.shrui %773, %c1_i32_179 : i32
        %c1597463007_i32_180 = arith.constant 1597463007 : i32
        %775 = arith.subi %c1597463007_i32_180, %774 : i32
        %776 = arith.bitcast %775 : i32 to f32
        %cst_181 = arith.constant 1.500000e+00 : f32
        %777 = arith.mulf %776, %776 : f32
        %778 = arith.mulf %777, %772 : f32
        %779 = arith.subf %cst_181, %778 : f32
        %780 = arith.mulf %779, %777 : f32
        %781 = arith.subf %769, %2 : f32
        %782 = arith.mulf %781, %780 : f32
        %783 = arith.mulf %782, %0 : f32
        %784 = arith.addf %783, %1 : f32
        affine.store %784, %arg5[0, 0, %arg6, %768] : memref<1x64x112x112xf32>
        %785 = affine.apply #map45(%arg7)
        %786 = affine.load %arg4[0, 0, %arg6, %785] : memref<1x64x112x112xf32>
        %787 = arith.truncf %cst : f64 to f32
        %788 = arith.addf %3, %787 : f32
        %cst_182 = arith.constant 5.000000e-01 : f32
        %789 = arith.mulf %788, %cst_182 : f32
        %790 = arith.bitcast %788 : f32 to i32
        %c1_i32_183 = arith.constant 1 : i32
        %791 = arith.shrui %790, %c1_i32_183 : i32
        %c1597463007_i32_184 = arith.constant 1597463007 : i32
        %792 = arith.subi %c1597463007_i32_184, %791 : i32
        %793 = arith.bitcast %792 : i32 to f32
        %cst_185 = arith.constant 1.500000e+00 : f32
        %794 = arith.mulf %793, %793 : f32
        %795 = arith.mulf %794, %789 : f32
        %796 = arith.subf %cst_185, %795 : f32
        %797 = arith.mulf %796, %794 : f32
        %798 = arith.subf %786, %2 : f32
        %799 = arith.mulf %798, %797 : f32
        %800 = arith.mulf %799, %0 : f32
        %801 = arith.addf %800, %1 : f32
        affine.store %801, %arg5[0, 0, %arg6, %785] : memref<1x64x112x112xf32>
        %802 = affine.apply #map46(%arg7)
        %803 = affine.load %arg4[0, 0, %arg6, %802] : memref<1x64x112x112xf32>
        %804 = arith.truncf %cst : f64 to f32
        %805 = arith.addf %3, %804 : f32
        %cst_186 = arith.constant 5.000000e-01 : f32
        %806 = arith.mulf %805, %cst_186 : f32
        %807 = arith.bitcast %805 : f32 to i32
        %c1_i32_187 = arith.constant 1 : i32
        %808 = arith.shrui %807, %c1_i32_187 : i32
        %c1597463007_i32_188 = arith.constant 1597463007 : i32
        %809 = arith.subi %c1597463007_i32_188, %808 : i32
        %810 = arith.bitcast %809 : i32 to f32
        %cst_189 = arith.constant 1.500000e+00 : f32
        %811 = arith.mulf %810, %810 : f32
        %812 = arith.mulf %811, %806 : f32
        %813 = arith.subf %cst_189, %812 : f32
        %814 = arith.mulf %813, %811 : f32
        %815 = arith.subf %803, %2 : f32
        %816 = arith.mulf %815, %814 : f32
        %817 = arith.mulf %816, %0 : f32
        %818 = arith.addf %817, %1 : f32
        affine.store %818, %arg5[0, 0, %arg6, %802] : memref<1x64x112x112xf32>
        %819 = affine.apply #map47(%arg7)
        %820 = affine.load %arg4[0, 0, %arg6, %819] : memref<1x64x112x112xf32>
        %821 = arith.truncf %cst : f64 to f32
        %822 = arith.addf %3, %821 : f32
        %cst_190 = arith.constant 5.000000e-01 : f32
        %823 = arith.mulf %822, %cst_190 : f32
        %824 = arith.bitcast %822 : f32 to i32
        %c1_i32_191 = arith.constant 1 : i32
        %825 = arith.shrui %824, %c1_i32_191 : i32
        %c1597463007_i32_192 = arith.constant 1597463007 : i32
        %826 = arith.subi %c1597463007_i32_192, %825 : i32
        %827 = arith.bitcast %826 : i32 to f32
        %cst_193 = arith.constant 1.500000e+00 : f32
        %828 = arith.mulf %827, %827 : f32
        %829 = arith.mulf %828, %823 : f32
        %830 = arith.subf %cst_193, %829 : f32
        %831 = arith.mulf %830, %828 : f32
        %832 = arith.subf %820, %2 : f32
        %833 = arith.mulf %832, %831 : f32
        %834 = arith.mulf %833, %0 : f32
        %835 = arith.addf %834, %1 : f32
        affine.store %835, %arg5[0, 0, %arg6, %819] : memref<1x64x112x112xf32>
        %836 = affine.apply #map48(%arg7)
        %837 = affine.load %arg4[0, 0, %arg6, %836] : memref<1x64x112x112xf32>
        %838 = arith.truncf %cst : f64 to f32
        %839 = arith.addf %3, %838 : f32
        %cst_194 = arith.constant 5.000000e-01 : f32
        %840 = arith.mulf %839, %cst_194 : f32
        %841 = arith.bitcast %839 : f32 to i32
        %c1_i32_195 = arith.constant 1 : i32
        %842 = arith.shrui %841, %c1_i32_195 : i32
        %c1597463007_i32_196 = arith.constant 1597463007 : i32
        %843 = arith.subi %c1597463007_i32_196, %842 : i32
        %844 = arith.bitcast %843 : i32 to f32
        %cst_197 = arith.constant 1.500000e+00 : f32
        %845 = arith.mulf %844, %844 : f32
        %846 = arith.mulf %845, %840 : f32
        %847 = arith.subf %cst_197, %846 : f32
        %848 = arith.mulf %847, %845 : f32
        %849 = arith.subf %837, %2 : f32
        %850 = arith.mulf %849, %848 : f32
        %851 = arith.mulf %850, %0 : f32
        %852 = arith.addf %851, %1 : f32
        affine.store %852, %arg5[0, 0, %arg6, %836] : memref<1x64x112x112xf32>
        %853 = affine.apply #map49(%arg7)
        %854 = affine.load %arg4[0, 0, %arg6, %853] : memref<1x64x112x112xf32>
        %855 = arith.truncf %cst : f64 to f32
        %856 = arith.addf %3, %855 : f32
        %cst_198 = arith.constant 5.000000e-01 : f32
        %857 = arith.mulf %856, %cst_198 : f32
        %858 = arith.bitcast %856 : f32 to i32
        %c1_i32_199 = arith.constant 1 : i32
        %859 = arith.shrui %858, %c1_i32_199 : i32
        %c1597463007_i32_200 = arith.constant 1597463007 : i32
        %860 = arith.subi %c1597463007_i32_200, %859 : i32
        %861 = arith.bitcast %860 : i32 to f32
        %cst_201 = arith.constant 1.500000e+00 : f32
        %862 = arith.mulf %861, %861 : f32
        %863 = arith.mulf %862, %857 : f32
        %864 = arith.subf %cst_201, %863 : f32
        %865 = arith.mulf %864, %862 : f32
        %866 = arith.subf %854, %2 : f32
        %867 = arith.mulf %866, %865 : f32
        %868 = arith.mulf %867, %0 : f32
        %869 = arith.addf %868, %1 : f32
        affine.store %869, %arg5[0, 0, %arg6, %853] : memref<1x64x112x112xf32>
        %870 = affine.apply #map50(%arg7)
        %871 = affine.load %arg4[0, 0, %arg6, %870] : memref<1x64x112x112xf32>
        %872 = arith.truncf %cst : f64 to f32
        %873 = arith.addf %3, %872 : f32
        %cst_202 = arith.constant 5.000000e-01 : f32
        %874 = arith.mulf %873, %cst_202 : f32
        %875 = arith.bitcast %873 : f32 to i32
        %c1_i32_203 = arith.constant 1 : i32
        %876 = arith.shrui %875, %c1_i32_203 : i32
        %c1597463007_i32_204 = arith.constant 1597463007 : i32
        %877 = arith.subi %c1597463007_i32_204, %876 : i32
        %878 = arith.bitcast %877 : i32 to f32
        %cst_205 = arith.constant 1.500000e+00 : f32
        %879 = arith.mulf %878, %878 : f32
        %880 = arith.mulf %879, %874 : f32
        %881 = arith.subf %cst_205, %880 : f32
        %882 = arith.mulf %881, %879 : f32
        %883 = arith.subf %871, %2 : f32
        %884 = arith.mulf %883, %882 : f32
        %885 = arith.mulf %884, %0 : f32
        %886 = arith.addf %885, %1 : f32
        affine.store %886, %arg5[0, 0, %arg6, %870] : memref<1x64x112x112xf32>
        %887 = affine.apply #map51(%arg7)
        %888 = affine.load %arg4[0, 0, %arg6, %887] : memref<1x64x112x112xf32>
        %889 = arith.truncf %cst : f64 to f32
        %890 = arith.addf %3, %889 : f32
        %cst_206 = arith.constant 5.000000e-01 : f32
        %891 = arith.mulf %890, %cst_206 : f32
        %892 = arith.bitcast %890 : f32 to i32
        %c1_i32_207 = arith.constant 1 : i32
        %893 = arith.shrui %892, %c1_i32_207 : i32
        %c1597463007_i32_208 = arith.constant 1597463007 : i32
        %894 = arith.subi %c1597463007_i32_208, %893 : i32
        %895 = arith.bitcast %894 : i32 to f32
        %cst_209 = arith.constant 1.500000e+00 : f32
        %896 = arith.mulf %895, %895 : f32
        %897 = arith.mulf %896, %891 : f32
        %898 = arith.subf %cst_209, %897 : f32
        %899 = arith.mulf %898, %896 : f32
        %900 = arith.subf %888, %2 : f32
        %901 = arith.mulf %900, %899 : f32
        %902 = arith.mulf %901, %0 : f32
        %903 = arith.addf %902, %1 : f32
        affine.store %903, %arg5[0, 0, %arg6, %887] : memref<1x64x112x112xf32>
        %904 = affine.apply #map52(%arg7)
        %905 = affine.load %arg4[0, 0, %arg6, %904] : memref<1x64x112x112xf32>
        %906 = arith.truncf %cst : f64 to f32
        %907 = arith.addf %3, %906 : f32
        %cst_210 = arith.constant 5.000000e-01 : f32
        %908 = arith.mulf %907, %cst_210 : f32
        %909 = arith.bitcast %907 : f32 to i32
        %c1_i32_211 = arith.constant 1 : i32
        %910 = arith.shrui %909, %c1_i32_211 : i32
        %c1597463007_i32_212 = arith.constant 1597463007 : i32
        %911 = arith.subi %c1597463007_i32_212, %910 : i32
        %912 = arith.bitcast %911 : i32 to f32
        %cst_213 = arith.constant 1.500000e+00 : f32
        %913 = arith.mulf %912, %912 : f32
        %914 = arith.mulf %913, %908 : f32
        %915 = arith.subf %cst_213, %914 : f32
        %916 = arith.mulf %915, %913 : f32
        %917 = arith.subf %905, %2 : f32
        %918 = arith.mulf %917, %916 : f32
        %919 = arith.mulf %918, %0 : f32
        %920 = arith.addf %919, %1 : f32
        affine.store %920, %arg5[0, 0, %arg6, %904] : memref<1x64x112x112xf32>
        %921 = affine.apply #map53(%arg7)
        %922 = affine.load %arg4[0, 0, %arg6, %921] : memref<1x64x112x112xf32>
        %923 = arith.truncf %cst : f64 to f32
        %924 = arith.addf %3, %923 : f32
        %cst_214 = arith.constant 5.000000e-01 : f32
        %925 = arith.mulf %924, %cst_214 : f32
        %926 = arith.bitcast %924 : f32 to i32
        %c1_i32_215 = arith.constant 1 : i32
        %927 = arith.shrui %926, %c1_i32_215 : i32
        %c1597463007_i32_216 = arith.constant 1597463007 : i32
        %928 = arith.subi %c1597463007_i32_216, %927 : i32
        %929 = arith.bitcast %928 : i32 to f32
        %cst_217 = arith.constant 1.500000e+00 : f32
        %930 = arith.mulf %929, %929 : f32
        %931 = arith.mulf %930, %925 : f32
        %932 = arith.subf %cst_217, %931 : f32
        %933 = arith.mulf %932, %930 : f32
        %934 = arith.subf %922, %2 : f32
        %935 = arith.mulf %934, %933 : f32
        %936 = arith.mulf %935, %0 : f32
        %937 = arith.addf %936, %1 : f32
        affine.store %937, %arg5[0, 0, %arg6, %921] : memref<1x64x112x112xf32>
        %938 = affine.apply #map54(%arg7)
        %939 = affine.load %arg4[0, 0, %arg6, %938] : memref<1x64x112x112xf32>
        %940 = arith.truncf %cst : f64 to f32
        %941 = arith.addf %3, %940 : f32
        %cst_218 = arith.constant 5.000000e-01 : f32
        %942 = arith.mulf %941, %cst_218 : f32
        %943 = arith.bitcast %941 : f32 to i32
        %c1_i32_219 = arith.constant 1 : i32
        %944 = arith.shrui %943, %c1_i32_219 : i32
        %c1597463007_i32_220 = arith.constant 1597463007 : i32
        %945 = arith.subi %c1597463007_i32_220, %944 : i32
        %946 = arith.bitcast %945 : i32 to f32
        %cst_221 = arith.constant 1.500000e+00 : f32
        %947 = arith.mulf %946, %946 : f32
        %948 = arith.mulf %947, %942 : f32
        %949 = arith.subf %cst_221, %948 : f32
        %950 = arith.mulf %949, %947 : f32
        %951 = arith.subf %939, %2 : f32
        %952 = arith.mulf %951, %950 : f32
        %953 = arith.mulf %952, %0 : f32
        %954 = arith.addf %953, %1 : f32
        affine.store %954, %arg5[0, 0, %arg6, %938] : memref<1x64x112x112xf32>
      }
    }
    return
  }
}
